#+TITLE: GNU Emacs 配置说明
#+AUTHOR: Aaron Liew(aka. tabuyos)
#+EMAIL: tabuyos@outlook.com
#+LANGUAGE: zh-CN
#+OPTIONS: ':t toc:nil num:t author:t email:t
#+STARTUP: content indent align fold
#+PROPERTY: header-args :results silent :noweb yes
#+MACRO: latest-export-date (eval (format-time-string "%F %T %z"))
#+MACRO: word-count (eval (count-words (point-min) (point-max)))

*最新修改于 {{{latest-export-date}}} 共 {{{word-count}}}.*

这是 =Emacs= 的配置文件, 该文件使用 ~babel-tangle~ 技术, 可以自动提取文件中的相关代码, 并将其导出到对应的文件中,
这也被成为 =文学编程=, 可以很好的管理个人配置文件, 同时也可以对其中的配置信息进行阐述/解释

#+TOC: headlines 8 insert TOC here, with eight headline levels

* 概要

我使用 Emacs 进行日常项目的相关开发工作, 包括但不限于: ~Rust~, ~Golang~, ~Java~, ~C/C++~, ~HTML/JavaScript~ 等,
在使用期间, 我始终秉承着一个 =少即是多= 的原则, 尽可能的 =剔除/不添加/不引入= 不必要的 =包/功能=, 将常用的功能进行分类,
不修改原生按键的情况下, 添加更丰富的自定义按键

当前文件是 ~Org~ 文件, 它是生成并控制 ~Emacs~ 所有配置文件的文档, 通过它, 我们可以一边解释某些配置选项的作用, 一边学习新的配置选项,
同时可以将这些配置选项添加到对应的 ~Emacs~ 配置文件中

** 使用环境

- 系统 :: =MacOS=
- 键盘 :: =HHKB= -- 远离 ~RSI(Repetitive strain injury, 即: 重复性劳损)~ 从键盘开始
- 版本 :: =30.0=
- 来源 :: =Source Code=

** 文件解释

- ~early-init.el~ :: 该文件早于处理常规初始化文件, 在软件包系统和 ~GUI~ 初始化之前加载
- ~init.el~ :: 常规初始化文件, 用于加载各种软件包和相关配置
- ~module/~ :: 配置模块目录, 包含 ~Emacs~ 的所有自定义配置信息, 每个模块都涉及特定类型的功能, 主要用于调整相关的软件包
- ~feature/~ :: 自定义库, 用于扩展某些模块

** 必需功能

- UI 界面
- 字体配置
- 近期访问的项目/文件
- 自动保存
- Org-Mode
- 工具集-crux
- 文本相关的操作
  - 注释
  - 光标跳转
  - 文本移动/复制
  - 选取扩展/收缩
  - 多光标操作
- 窗口跳转
- 各种编程语言

* Emacs 的早期初始化(early-init.el)

这是启动期间读取的第一个文件

** 暂存基础信息

 保存一些额外的变量信息, 并将该变量重置, 有助于提升启动速度

#+begin_src emacs-lisp :tangle early-init.el :mkdirp yes
;; (defvar lim--file-name-handler-alist file-name-handler-alist)
;; (defvar lim--vc-handled-backends vc-handled-backends)

;; (setq file-name-handler-alist nil
;;       vc-handled-backends nil)
#+end_src

** 垃圾回收

临时提高垃圾回收的阈值以及堆栈的分配比例, 这有助于提升 ~Emacs~ 的启动速度, 但是请注意, 永久设置该值将是极其危险的, 所以在后续的流程中将重新调整

#+begin_src emacs-lisp :tangle early-init.el :mkdirp yes
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.5)
#+end_src

** 会话框

调整会话框 ~UI~, 同时将 ~yes-or-no-p~ 替换为 ~y-or-n-p~, 采用更短的应答

#+begin_src emacs-lisp :tangle early-init.el :mkdirp yes
(setq use-file-dialog nil
      use-dialog-box nil
      use-short-answers t)
#+end_src

** 配置基础 UI

在 ~Emacs~ 启动后, 对其基础的 ~UI~ 进行相关的调整, 如:

- 关闭警铃声音
- 关闭 site 相关文件加载
- window/frame 可以进行像素级调整
- frame 标题配置
- 欢迎界面和默认打开 buffer 配置
- 关闭工具栏/菜单栏/滚动条等
- 启动 frame 调整

#+begin_src emacs-lisp :tangle early-init.el :mkdirp yes
(setq ring-bell-function 'ignore
      site-run-file nil)

(setq window-resize-pixelwise t
      frame-resize-pixelwise t)

(setq frame-inhibit-implied-resize t)

(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))

(setq initial-scratch-message nil
      inhibit-startup-message t
      inhibit-splash-screen t
      inhibit-startup-screen t
      inhibit-x-resources t
      inhibit-startup-echo-area-message "Aaron Liew(aka Tabuyos)"
      inhibit-startup-buffer-menu t)

(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))

(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))

(when (fboundp 'menu-bar-mode)
  (menu-bar-mode -1))


;; Option 1: Customize frame size
(add-to-list 'default-frame-alist '(width . (text-pixels . 1500)))
(add-to-list 'default-frame-alist '(height . (text-pixels . 700)))
;; (add-to-list 'default-frame-alist '(undecorated-round . t))
;; (add-to-list 'default-frame-alist '(drag-internal-border . 1))
;; (add-to-list 'default-frame-alist '(internal-border-width . 5))

;; Option 2: Fullscreen
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** 钩子

添加启动后相关恢复配置的钩子, 以及设置基础 frame 的标题

#+begin_src emacs-lisp :tangle early-init.el :mkdirp yes
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold (* 1000 1000 8)
                  gc-cons-percentage 0.1
                  ;; file-name-handler-alist lim--file-name-handler-alist
                  ;; vc-handled-backends lim--vc-handled-backends
                  )))

(add-hook 'after-init-hook (lambda () (set-frame-name "home")))

(provide 'early-init)
#+end_src

* Emacs 的主要初始化(init.el)

** 加载 load-path

- ~lim-loading-paths~ 会递归加载指定目录及其子目录
- ~lim-module-dir~ 为自定义模块目录
- ~lim-feature-dir~ 为自定义库目录
- ~lim-customize-file~ 为个性化配置文件

#+begin_src emacs-lisp :tangle init.el :mkdirp yes
(defun lim-loading-paths (&rest folders)
  (dolist (folder folders)
    (when (file-directory-p folder)
      (let ((parent folder))
        (unless (member parent load-path)
          (add-to-list 'load-path parent))
        (dolist (name (remove ".." (remove "." (directory-files parent))))
          (let ((child (expand-file-name name parent)))
            (when (file-directory-p child)
              (unless (member child load-path)
                (lim-loading-paths child))))))
      )))

(defvar lim-module-dir
  (expand-file-name "module" user-emacs-directory)
  "Lim's initilize directory.")

(defvar lim-feature-dir
  (expand-file-name "feature" user-emacs-directory)
  "Lim's feature directory.")

(defvar lim-customize-file
  (expand-file-name "customizes.el" user-emacs-directory)
  "Lim's customize file.")

(lim-loading-paths lim-module-dir lim-feature-dir)
#+end_src

** 性能分析

#+begin_src emacs-lisp :tangle init.el :mkdirp yes
;; (use-package benchmark-init
;;   :hook
;;   (after-init . benchmark-init/deactivate))

;; (benchmark-init/activate)
#+end_src

** 加载包模块

#+begin_src emacs-lisp :tangle init.el :mkdirp yes
;; Enable module
(require 'lim-module-base)
(require 'lim-module-package)
(require 'lim-module-icon)
(require 'lim-module-appearance)
(require 'lim-module-essential)
(require 'lim-module-hydra)
(require 'lim-module-completion)
(require 'lim-module-dired)
(require 'lim-module-org)
(require 'lim-module-window)
(require 'lim-module-ai)
(require 'lim-module-dev)
(require 'lim-module-keybind)
#+end_src

* Emacs 的配置模块

- info
- package
- icon
- appearance
- essential kill-whole-line 需要调整, cc to mx 应该在特定模式下有效, 需要调整 soothing 的 global
- hydra
- completion
- +search+
- dired
- window
- git
- org
- dev
- web

** lim-module-base.el 模块

*** 用户信息

配置用户相关的基础信息, 这里配置了用户的姓名以及对应的邮箱信息

#+begin_src emacs-lisp :tangle module/lim-module-base.el :mkdirp yes
(eval-and-compile
  (setq user-full-name "Aaron Liew")
  (setq user-mail-address "tabuyos@outlook.com"))
#+end_src

*** 本地编译

检测是否支持原生编译, 并对其进行相关的配置

#+begin_src emacs-lisp :tangle module/lim-module-base.el :mkdirp yes
(use-package emacs
  :config
  (when (native-comp-available-p)
    (setq native-comp-async-report-warnings-errors 'silent)
    (setq native-compile-prune-cache t)))
#+end_src

*** 备份和锁定文件

禁用备份和锁定文件

#+begin_src emacs-lisp :tangle module/lim-module-base.el :mkdirp yes
(use-package emacs
  :config
  (setq create-lockfiles nil)
  (setq make-backup-files nil)
  (setq backup-inhibited nil))
#+end_src

*** 杂项

一些额外的配置, 如 ~alt~ 按键, 光标宽度, 初始 ~*scratch*~ 缓冲区的主模式, 移动文件至 =系统垃圾桶=

#+begin_src emacs-lisp :tangle module/lim-module-base.el :mkdirp yes
(use-package emacs
  :ensure nil
  :config
  (setq x-alt-keysym 'meta)
  (setq x-stretch-cursor nil)
  (setq custom-file lim-customize-file)
  (setq custom-safe-themes t)
  ;; (setq initial-major-mode 'emacs-lisp-mode)
  (setq delete-by-moving-to-trash t))
#+end_src

*** mark 和 kill 环的容量

#+begin_src emacs-lisp :tangle module/lim-module-base.el :mkdirp yes
(use-package emacs
  :ensure nil
  :config
  (setq global-mark-ring-max 200)
  (setq mark-ring-max 200)
  (setq kill-ring-max 200))
#+end_src

*** 导出模块

#+begin_src emacs-lisp :tangle module/lim-module-base.el :mkdirp yes
(provide 'lim-module-base)
#+end_src

** lim-module-package.el 模块

*** 加载 lim-package 库

加载自定义 ~package~ 库, 同时开启 ~diminish~, ~straight~, ~quelpa~ 等模块

#+begin_src emacs-lisp :tangle module/lim-module-package.el :mkdirp yes
(use-package lim-package
  :ensure nil
  :config
  (setq package-user-dir archives-dir
        package-archives archives-source
        package-archive-priorities archives-priorities)
  (setq package-install-upgrade-built-in nil)
  (unless (bound-and-true-p package--initialized)
    (setq package-enable-at-startup nil)
    (package-initialize))
  (unless (package-installed-p 'use-package)
    (package-refresh-contents :async)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-verbose (not (bound-and-true-p byte-compile-current-file)))
    (setq use-package-always-ensure t)
    (setq use-package-expand-minimally t)
    (setq use-package-compute-statistics t)
    (setq use-package-enable-imenu-support t))

  (integration-diminish)
  ;; (integration-straight)
  ;; (integration-quelpa)
  ;; (integration-elpaca)
  )
#+end_src

*** 加载包管理器

#+begin_src emacs-lisp :tangle module/lim-module-package.el :mkdirp yes
(eval-when-compile
  (require 'use-package)
  (require 'bind-key))
#+end_src

*** 自动更新软件包

#+begin_src emacs-lisp :tangle module/lim-module-package.el :mkdirp yes
(use-package auto-package-update
  :unless (daemonp)
  :custom
  ;; in days
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-delete-old-versions t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-at-time "03:00"))
#+end_src

*** 基础包

#+begin_src emacs-lisp :tangle module/lim-module-package.el :mkdirp yes
(use-package s)

(use-package f)
#+end_src

*** 异步处理

#+begin_src emacs-lisp :tangle module/lim-module-package.el :mkdirp yes
(use-package async
  :config
  (async-bytecomp-package-mode 1))
#+end_src

*** 局部代理

#+begin_src emacs-lisp :tangle module/lim-module-base.el :mkdirp yes
;; (use-package with-proxy)
#+end_src

*** 导出模块

#+begin_src emacs-lisp :tangle module/lim-module-package.el :mkdirp yes
(provide 'lim-module-package)
#+end_src

** lim-module-icon.el 模块

~Emacs~ 中的图标采用 ~nerd-icons~, 其他备选方案有 ~all-the-icons~

*** nerd-icons

#+begin_src emacs-lisp :tangle module/lim-module-icon.el :mkdirp yes
(use-package nerd-icons
  :diminish nil)
#+end_src

*** nerd-icons-completion

#+begin_src emacs-lisp :tangle module/lim-module-icon.el :mkdirp yes
(use-package nerd-icons-completion
  :diminish nil
  :after marginalia
  :config
  (nerd-icons-completion-mode)
  (with-eval-after-load 'marginalia
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup)))
#+end_src

*** nerd-icons-corfu

#+begin_src emacs-lisp :tangle module/lim-module-icon.el :mkdirp yes
(use-package nerd-icons-corfu
  :after corfu
  :diminish nil
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

*** nerd-icons-dired

#+begin_src emacs-lisp :tangle module/lim-module-icon.el :mkdirp yes
(use-package nerd-icons-dired
  :diminish nil
  :hook
  (dired-mode . nerd-icons-dired-mode))
#+end_src

*** 导出模块

#+begin_src emacs-lisp :tangle module/lim-module-icon.el :mkdirp yes
(provide 'lim-module-icon)
#+end_src

** lim-module-appearance.el 模块

*** 字体和缩放比例预设

这里预设了可能使用的字体名称, 默认情况下, 中文使用 ~cjk-family~, 符号使用 ~symbol-family~, 表情使用 ~emoji-family~, 英文使用 ~code-family~

#+begin_quote
PS: 为什么不使用 ~default-family~ 字体? 主要是因为该字体在编码环境中行距过窄(字体的 ~ascent~ 和 ~descent~ 过小), 同时穿插着使用中文符号, 而两者的字体高度又不一致, 在输入的过程中会导致画面的抖动(临时调整当前行高导致), 因此为了尽可能的降低二者的影响才使用 ~code-family~ 字体
#+end_quote

#+begin_src emacs-lisp :tangle module/lim-module-appearance.el :mkdirp yes
(defvar emoji-family "Apple Color Emoji" "For emoji in MacOS.")

(defvar emoji-noto-family "NotoEmoji Nerd Font Mono")

(defvar symbol-family "Apple Symbols" "For symbol in MacOS.")

(defvar symbol-noto-family "Symbols Nerd Font Mono")

(defvar cjk-family "PingFang SC" "For CJK font(如汉字) in MacOS.")

(defvar cjk-noto-family "Noto Serif CJK SC")

(defvar kaiti-family "Kaiti SC")

(defvar code-family "JetBrains Mono")

(defvar default-family "Menlo" "For default font(just programing) in MacOS.")

(defvar default-noto-family "NotoMono Nerd Font")

(defvar fixed-family "NotoMono Nerd Font")

(defvar fixed-serif-family "NotoSerif Nerd Font Mono")

(defvar variable-family "NotoSans Nerd Font")

(defvar cjk-rescale-ratio 0.85)
#+end_src

*** CJK, Emoji 和 Symbol

设置 =CJK=, =Emoji= 和 =Symbol= 使用的字体, 通过设置 ~use-default-font-for-symbols~ 为 ~nil~ 以禁止使用默认字体来渲染符号, 从而使用指定字体来渲染

- Option 1(推荐) :: 通过调整 ~CJK~ 字体的缩放比例, 从而使中英文字体高度一致(缺点: 中文字体看上去会显得较小)
- Option 2 :: 通过控制 ~line-height~ 从而兼容所有字体高度(缺点: 单屏所容纳的内容较少)

#+begin_src emacs-lisp :tangle module/lim-module-appearance.el :mkdirp yes
(defun lim--rescale-font (family ratio)
  (if (/= ratio 0.0)
      (let ((elt (cons family ratio)))
        (unless (member elt face-font-rescale-alist)
          (push elt face-font-rescale-alist)))))

(defun lim--make-consistent-height (family)
  (let* ((font (face-attribute 'default :font))
         (size (font-get font :size))
         (name (format "%s-%s" family size))
         (height (aref (font-info name) 3))
         (modify (< (default-line-height) height)))
    (if modify
        (setq-default default-text-properties (list 'line-height height))
      )))

(defun lim-set-other-fontset-font ()
  (when window-system
    (setq use-default-font-for-symbols nil)

    (set-fontset-font t 'emoji (font-spec :family emoji-family))
    (set-fontset-font t 'symbol (font-spec :family symbol-family))

    (let* ((fontset (frame-parameter nil 'font))
           (ratio (or cjk-rescale-ratio 0.0))
           (family cjk-family)
           ;; (family cjk-noto-family)
           (fontspec (font-spec :family family)))

      (dolist (charset '(kana han hangul cjk-misc bopomofo))
        (set-fontset-font fontset charset fontspec))

      ;; Option 1
      (lim--rescale-font cjk-family ratio)

      ;; Option 2
      ;; (lim--make-consistent-height family)
      )))
#+end_src

*** 主题

 加载两种主题软件包, 高对比度: ~modus-themes~, 多色彩: ~ef-themes~, 这两个软件包都提供了丰富的主题以供选择, 方法 ~lim/apply-theme~ 会自动根据当前系统的主题模式(=light= or =dark=)加载对应的主题

#+begin_quote
在亮模式下使用 ~ef-day~, 暗模式下则使用 ~ef-elea-dark~, 方法 ~ef-themes-load-random~ 会随机加载特定模式下的主题
#+end_quote

#+begin_src emacs-lisp :tangle module/lim-module-appearance.el :mkdirp yes
;;; modus themes
(use-package modus-themes
  :demand t)

;; ef themes
(use-package ef-themes
  :demand t
  :config
  (setq ef-themes-variable-pitch-ui t)
  (setq ef-themes-mixed-fonts t)

  (defun lim/apply-theme (appearance)
    "Load theme, taking current system APPEARANCE into consideration."
    (mapc #'disable-theme custom-enabled-themes)
    (pcase appearance
      ('light (load-theme 'ef-day t))
      ('dark (load-theme 'ef-elea-dark t))))
  ;; (ef-themes-load-random 'dark)
  ;; (load-theme 'ef-day t)
  (add-hook 'ns-system-appearance-change-functions #'lim/apply-theme)
  )
#+end_src

*** 突出显示当前行

调用某些函数后, 可以短暂的突出显示当前行, 这些函数定义在 ~pulsar-pulse-functions~

#+begin_src emacs-lisp :tangle module/lim-module-appearance.el :mkdirp yes
(use-package pulsar
  :hook
  ((next-error . (pulsar-pulse-line-red pulsar-recenter-top pulsar-reveal-entry))
   (minibuffer-setup . pulsar-pulse-line-red))
  :bind
  (("C-x l" . pulsar-pulse-line))
  :config
  (setopt pulsar-pulse t
          pulsar-delay 0.055
          pulsar-iterations 10
          pulsar-face 'pulsar-magenta
          pulsar-highlight-face 'pulsar-cyan)

  (pulsar-global-mode 1))
#+end_src

*** 高亮当前行

使用 ~lin-mode~ 来开启高亮当前行, 即增强 ~hl-line-mode~, 设置 ~hl-line~ 的样式为 ~lin~ 指的样式

#+begin_src emacs-lisp :tangle module/lim-module-appearance.el :mkdirp yes
;; (use-package lin
;;   :hook
;;   (after-init . lin-global-mode)
;;   ((prog-mode text-mode) . lin-mode)
;;   :config
;;   (setq lin-face 'lin-green))
#+end_src

使用原生高亮当前行

#+begin_src emacs-lisp :tangle module/lim-module-appearance.el :mkdirp yes
(use-package hl-line
  :ensure nil
  :functions (lim/set-cursor-fringe lim/cursor-fringe-local-buffer-run)
  :hook ((prog-mode text-mode) . lim/cursor-fringe-local-buffer-run)
  :config
  (defface lim/cursor-left-fringe-face
    '((t (:foreground "firebrick")))
    "Face for `lim/cursor-left-fringe-face'.")

  (defvar-local lim/cursor-left-fringe-overlay-position nil
    "Store cursor's position.

`overlay-arrow-bitmap' is a special SYMBOL defined in xdisp.c.")

  (defun lim/set-cursor-fringe ()
    "Set current cursor fringe."
    (if (not (and (eobp) (bolp)))
        (setq lim/cursor-left-fringe-overlay-position (copy-marker (line-beginning-position)))
      (setq lim/cursor-left-fringe-overlay-position  nil)))

  (defun lim/cursor-fringe-local-buffer-run ()
    "Registry fn to prog mode."
    (add-hook 'post-command-hook 'lim/set-cursor-fringe 'append 'local))

  ;; (define-fringe-bitmap 'lim/cursor-left-fringe-bitmap [128 192 96 48 24 48 96 192 128] 9 8 'center)
  (define-fringe-bitmap 'lim/cursor-left-fringe-bitmap [192 96 48 24 12 24 48 96 192] 9 8 'center)

  (set-fringe-bitmap-face 'lim/cursor-left-fringe-bitmap 'lim/cursor-left-fringe-face)

  (add-to-list 'overlay-arrow-variable-list 'lim/cursor-left-fringe-overlay-position)

  (put 'lim/cursor-left-fringe-overlay-position 'overlay-arrow-bitmap 'lim/cursor-left-fringe-bitmap))
#+end_src

*** window/frame 的间距/填充

这里设定了一些默认的 =UI= 部分的间距/填充, 特别需要注意的是: ~mode-line-active~ 是指当前激活窗口的 ~mode-line~, 同理, ~mode-line-inactive~ 是其他未激活窗口的 ~mode-line~

#+begin_src emacs-lisp :tangle module/lim-module-appearance.el :mkdirp yes
(use-package spacious-padding
  :if (display-graphic-p)
  :hook (after-init . spacious-padding-mode)
  :init
  (setq spacious-padding-widths
        '( :internal-border-width 15
           :header-line-width 4
           :mode-line-width 6
           :tab-width 4
           :right-divider-width 1
           :scroll-bar-width 8
           :left-fringe-width 20
           :right-fringe-width 20))
  (setq spacious-padding-subtle-mode-line
        '( :mode-line-active help-key-binding
           :mode-line-inactive window-divider))
  )
#+end_src

*** 渲染 buffer 中的颜色值

#+begin_src emacs-lisp :tangle module/lim-module-appearance.el :mkdirp yes
(use-package colorful-mode
  :diminish
  :hook (after-init . global-colorful-mode)
  :init
  (setq colorful-use-prefix t
        colorful-prefix-string "⬤")
  (setq colorful-allow-mouse-clicks nil)
  (dolist (mode '(html-mode help-mode helpful-mode))
    (add-to-list 'global-colorful-modes mode)))

;; (use-package rainbow-mode
;;   :diminish
;;   :commands rainbow-mode
;;   :init
;;   (setq rainbow-ansi-colors nil)
;;   (setq rainbow-x-colors nil)
;;   :hook (prog-mode . rainbow-mode))
#+end_src

*** 彩虹括号

#+begin_src emacs-lisp :tangle module/lim-module-appearance.el :mkdirp yes
(use-package rainbow-delimiters
  :commands rainbow-delimiters-mode
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** 光标

#+begin_src emacs-lisp :tangle module/lim-module-appearance.el :mkdirp yes
(use-package cursory
  :demand t
  :if (display-graphic-p)
  :config
  (setq cursory-presets
        '((box
           :blink-cursor-interval 0.8)
          (box-no-blink
           :blink-cursor-mode -1)
          (bar
           :cursor-type (bar . 2)
           :blink-cursor-interval 0.8)
          (bar-no-other-window
           :inherit bar
           :cursor-in-non-selected-windows nil)
          (bar-no-blink
           :cursor-type (bar . 2)
           :blink-cursor-mode -1)
          (underscore
           :cursor-type (hbar . 3)
           :blink-cursor-blinks 50)
          (underscore-thin-other-window
           :inherit underscore
           :cursor-in-non-selected-windows (hbar . 1))
          (underscore-thick
           :cursor-type (hbar . 8)
           :blink-cursor-interval 0.3
           :blink-cursor-blinks 50
           :cursor-in-non-selected-windows (hbar . 3))
          (underscore-thick-no-blink
           :blink-cursor-mode -1
           :cursor-type (hbar . 8)
           :cursor-in-non-selected-windows (hbar . 3))
          (t
           :cursor-type box
           :cursor-in-non-selected-windows hollow
           :blink-cursor-mode 1
           :blink-cursor-blinks 10
           :blink-cursor-interval 0.2
           :blink-cursor-delay 0.2)))
  (cursory-set-preset (or (cursory-restore-latest-preset) 'box))
  :hook
  (kill-emacs . cursory-store-latest-preset))
#+end_src

*** 字体

设置默认字体, =CJK= 字体, =Symbol= 字体以及 =Emoji= 字体

#+begin_src emacs-lisp :tangle module/lim-module-appearance.el :mkdirp yes
(use-package fontaine
  :if (display-graphic-p)
  :init
  :hook
  ((after-init . fontaine-mode)
   (after-init . (lambda ()
                   (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))))
   (fontaine-set-preset . lim-set-other-fontset-font))
  :config
  (setq text-scale-mode-step 1.172)
  (setq x-underline-at-descent-line nil)
  (setq-default text-scale-remap-header-line t)
  (setq fontaine-latest-state-file (locate-user-emacs-file "fontaine-latest-state.eld"))

  (setq fontaine-presets
        `((small
           :default-height 140)
          (regular) ;; use fallback values
          (medium
           :default-weight semilight
           :default-height 170
           :bold-weight extrabold)
          (large
           :inherit medium
           :default-height 180)
          (presentation
           :default-height 190)
          (t
           :default-family ,code-family
           :default-weight regular
           :default-height 160
           :fixed-pitch-family ,fixed-family
           :fixed-pitch-weight nil
           :fixed-pitch-height 1.0
           :fixed-pitch-serif-family ,fixed-serif-family
           :fixed-pitch-serif-weight nil
           :fixed-pitch-serif-height 1.0
           :variable-pitch-family ,variable-family
           :variable-pitch-weight nil
           :variable-pitch-height 1.0
           :line-spacing nil)))

  (with-eval-after-load 'pulsar
    (add-hook 'fontaine-set-preset-hook #'pulsar-pulse-line)))
#+end_src

*** modeline

#+begin_src emacs-lisp :tangle module/lim-module-appearance.el :mkdirp yes
(use-package lim-modeline
  :ensure nil
  :config
  (require 'project)
  
  (setq mode-line-compact nil)
  (setq mode-line-right-align-edge 'right-margin)
  (setq-default mode-line-format
                '("%e"
                  lim-modeline-window-number
                  lim-modeline-buffer-status
                  lim-modeline-hydra
                  lim-modeline-kbd-macro
                  lim-modeline-narrow
                  lim-modeline-remote-status
                  lim-modeline-window-dedicated-status
                  lim-modeline-input-method
                  lim-modeline-major-mode
                  lim-modeline-minor-mode
                  lim-modeline-cursor-position
                  lim-modeline-selection
                  lim-modeline-encoding
                  lim-modeline-buffer-id-with-breadcrumb
                  lim-modeline-process
                  lim-modeline-vc
                  lim-modeline-eglot
                  ;; lim-modeline-notmuch-indicator
                  mode-line-format-right-align
                  lim-modeline-flymake
                  project-mode-line-format
                  lim-modeline-misc-info
                  )))
#+end_src

*** keycast

#+begin_src emacs-lisp :tangle module/lim-module-appearance.el :mkdirp yes
;; (use-package keycast
;;   :after lim-modeline
;;   :commands (keycast-mode-line-mode keycast-header-line-mode keycast-tab-bar-mode keycast-log-mode)
;;   :init
;;   (setq keycast-mode-line-format "%2s(%K%1s%c%R)")
;;   (setq keycast-mode-line-insert-after 'lim-modeline-misc-info)
;;   (setq keycast-mode-line-window-predicate 'mode-line-window-selected-p)
;;   (setq keycast-mode-line-remove-tail-elements nil)
;;   :config
;;   (dolist (input '(self-insert-command org-self-insert-command))
;;     (add-to-list 'keycast-substitute-alist `(,input "." "Typing…")))

;;   (dolist (event '( mouse-event-p mouse-movement-p mwheel-scroll handle-select-window
;;                     mouse-set-point mouse-drag-region))
;;     (add-to-list 'keycast-substitute-alist `(,event nil))))
#+end_src

*** 缓冲区边界指示器

#+begin_src emacs-lisp :tangle module/lim-module-appearance.el :mkdirp yes
(use-package emacs
  :config
  (setq-default indicate-buffer-boundaries 'left))
#+end_src

*** 面包屑

在 ~header-line~ 中显示面包屑

#+begin_src emacs-lisp :tangle module/lim-module-appearance.el :mkdirp yes
(use-package breadcrumb
  :hook (after-init . breadcrumb-mode)
  :config
  (setq breadcrumb-project-max-length 0.5)
  (setq breadcrumb-project-crumb-separator "/")
  (setq breadcrumb-imenu-max-length 1.0)
  (setq breadcrumb-imenu-crumb-separator " > "))
#+end_src

*** 高亮 TODO

#+begin_src emacs-lisp :tangle module/lim-module-appearance.el :mkdirp yes
(use-package hl-todo
  :hook (prog-mode . hl-todo-mode)
  :config
  (setq hl-todo-highlight-punctuation ":")
  (setq hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))
#+end_src

*** 小地图

#+begin_src emacs-lisp :tangle module/lim-module-appearance.el :mkdirp yes
(use-package minimap
  :defer t
  :config
  (setq minimap-window-location 'right)
  (setq minimap-update-delay 0)
  (setq minimap-width-fraction 0.09)
  (setq minimap-minimum-width 15))
#+end_src

*** 显示分页符

#+begin_src emacs-lisp :tangle module/lim-module-appearance.el :mkdirp yes
(use-package page-break-lines
  :diminish
  :hook (after-init . global-page-break-lines-mode))
#+end_src

*** 导出模块

#+begin_src emacs-lisp :tangle module/lim-module-appearance.el :mkdirp yes
(provide 'lim-module-appearance)
#+end_src

** lim-module-essential.el 模块

*** 行号和位置信息

在 ~buffer~ 中全局开启行号, 在 ~mode-line~ 中开启行列位置信息

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package emacs
  :ensure nil
  :config
  (setq mode-require-final-newline 'visit-save)
  (global-display-line-numbers-mode)
  (column-number-mode)
  (line-number-mode))
#+end_src

*** 自动加载文件

当文件发生变更时, 自动重新加载文件(这种变化往往是外部导致的)

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package autorevert
  :ensure nil
  :config
  (setq auto-revert-verbose t)
  (global-auto-revert-mode))
#+end_src

*** TAB 与缩进

使用空格代替 =TAB=, 使用 =TAB= 进行缩进时, 缩进宽度为: 2

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package emacs
  :ensure nil
  :demand t
  :config
  (setq tab-always-indent 'complete)
  (setq tab-first-completion 'word-or-paren-or-punct)
  (setq-default tab-width 2
                standard-indent 2
                indent-tabs-mode nil
                c-basic-offset 2))
#+end_src

*** 鼠标行为

 关闭 ~mode-line~ 上的鼠标行为, 关闭 ~buffer~ 中的 ~Ctrl+Click~ 单击行为

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package emacs
  :config
  (global-set-key (kbd "C-<down-mouse-1>") 'ignore)
  (global-set-key [mode-line mouse-1] 'ignore)
  (global-set-key [mode-line mouse-2] 'ignore)
  (global-set-key [mode-line mouse-3] 'ignore))
#+end_src

鼠标滚动时, 光标行为: 固定在屏幕的相对位置

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package mouse
  :ensure nil
  :hook (after-init . mouse-wheel-mode)
  :config
  (setq mouse-wheel-tilt-scroll t)
  (setq mouse-wheel-flip-direction t)
  (setq-default scroll-conservatively 1 ; affects `scroll-step'
                ;; scroll-preserve-screen-position 1 ; don't move when scroll
                scroll-margin 0
                next-screen-context-lines 0))
#+end_src

*** 保存光标位置

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package saveplace
  :ensure nil
  :config
  (setq save-place-forget-unreadable-files nil)
  :hook (after-init . save-place-mode))
#+end_src

*** 括号高亮和补全

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package paren
  :ensure nil
  :hook (after-init . show-paren-mode)
  :config
  (setq show-paren-style 'parenthesis)
  (setq show-paren-when-point-in-periphery t)
  (setq show-paren-when-point-inside-paren t)
  (setq show-paren-context-when-offscreen 'overlay))

(use-package electric
  :ensure nil
  :hook
  (prog-mode . electric-indent-local-mode))

(use-package elec-pair
  :ensure nil
  :hook (after-init . electric-pair-mode)
  ;; :init
  ;; (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
  )
#+end_src

*** 选区和删除

选择选区后可以直接进行删除

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package delsel
  :ensure nil
  :hook (after-init . delete-selection-mode))
#+end_src

*** 窗口/符号跳转

双眼所至, 光标所达

=ace-window= 在仅有两个窗口时进行切换则直接跳转到另一个窗口, 多于两个窗口时, 则在对应窗口左上角高亮窗口序号, 按对应序号直接跳转

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package avy
  :config
  (setq avy-background t)
  (setq avy-all-windows t)
  (setq avy-timeout-seconds 0.3))

(use-package ace-window
  :defer t
  :config
  (set-face-attribute 'aw-leading-char-face nil :height 1.0))
#+end_src

*** 符号高亮

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package symbol-overlay
  :diminish
  :custom-face
  (symbol-overlay-default-face ((t :inherit (bold shadow) :underline (:color "gray"))))
  (symbol-overlay-face-1 ((t (:inherit nerd-icons-blue :background unspecified :foreground unspecified :inverse-video t))))
  (symbol-overlay-face-2 ((t (:inherit nerd-icons-pink :background unspecified :foreground unspecified :inverse-video t))))
  (symbol-overlay-face-3 ((t (:inherit nerd-icons-yellow :background unspecified :foreground unspecified :inverse-video t))))
  (symbol-overlay-face-4 ((t (:inherit nerd-icons-purple :background unspecified :foreground unspecified :inverse-video t))))
  (symbol-overlay-face-5 ((t (:inherit nerd-icons-red :background unspecified :foreground unspecified :inverse-video t))))
  (symbol-overlay-face-6 ((t (:inherit nerd-icons-orange :background unspecified :foreground unspecified :inverse-video t))))
  (symbol-overlay-face-7 ((t (:inherit nerd-icons-green :background unspecified :foreground unspecified :inverse-video t))))
  (symbol-overlay-face-8 ((t (:inherit nerd-icons-cyan :background unspecified :foreground unspecified :inverse-video t))))
  :hook ((prog-mode . symbol-overlay-mode))
  :init (setq symbol-overlay-idle-time 0.3))
#+end_src

*** 帮助文档自动跳转

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package help
  :ensure nil
  :config
  (setq help-window-select t))
#+end_src

*** 文本操作工具

- =move-dup= :: 文本移动和重复
- =crux= :: 各种小工具
- =expreg= :: 选区扩展/收缩
- =multiple-cursors= :: 多光标

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package move-dup)

(use-package crux)

(use-package expreg)

(use-package multiple-cursors
  :config
  (setq mc/always-run-for-all t))
#+end_src

*** 代码折叠

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package hideshow
  :diminish hs-minor-mode
  :hook (prog-mode . hs-minor-mode))
#+end_src

*** 自动保存

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package super-save
  :diminish nil
  :config
  (super-save-mode)
  (setq super-save-auto-save-when-idle t))
#+end_src

*** 加载 lim-helper 库

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package lim-helper
  :ensure nil
  :functions (lim-helper-truncate-lines-silently)
  :hook ((fundamental-mode text-mode prog-mode) . lim-helper-truncate-lines-silently)
  :config
  (advice-add #'execute-extended-command--describe-binding-msg :override #'lim-helper-ignore))
#+end_src

*** 格式化

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package format-all
  :defer t
  :diminish nil
  :commands format-all-mode
  ;; :hook (prog-mode . format-all-mode)
  :bind ("C-c f" . #'format-all-region-or-buffer))
#+end_src

*** Compilation 缓冲区彩色化

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package compile
  :ensure nil
  :functions (lim/compilation-colorize-buffer)
  :hook (compilation-filter . lim/compilation-colorize-buffer)
  :config
  (require 'lim-simple)
  (setq compilation-buffer-name-function #'lim-simple-compilation-buffer-name)
  (require 'ansi-color)
  (defun lim/compilation-colorize-buffer ()
    (let ((buffer-read-only nil))
      (ansi-color-apply-on-region compilation-filter-start (point)))))
#+end_src

*** 加载环境变量

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package exec-path-from-shell
  ;; :autoload (exec-path-from-shell-initialize)
  :config (exec-path-from-shell-initialize))
#+end_src

*** 加载 lim-simple 库

该库增强了 ~simple.el~ (=Emacs= 内置)并添加了某些自定义函数

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package lim-simple
  :ensure nil)
#+end_src

*** 加载 lim-scratch 库

为所有的 ~major-mode~ 创建 ~scratch buffer~, 默认当前的 =buffer= 的 ~major-mode~

如果标记了选区, 那么同时还会将该选区的内容一并发送至该 ~scratch buffer~

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package lim-scratch
  :ensure nil
  :bind
  ("C-c s" . lim-scratch-buffer))
#+end_src

*** 持久化 scratch

重置某些冲突的按键

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package elisp-mode
  :ensure nil
  :bind
  ( :map lisp-interaction-mode-map
    ("C-j" . nil)
    ("M-RET" . eval-print-last-sexp)))
#+end_src

持久化

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package persistent-scratch
  :diminish
  :bind (:map persistent-scratch-mode-map
         ([remap kill-buffer] . lim-scratch-confirm-kill-buffer)
         ([remap revert-buffer] . persistent-scratch-restore)
         ([remap revert-this-buffer] . persistent-scratch-restore))
  :hook ((after-init . persistent-scratch-autosave-mode)
         (lisp-interaction-mode . persistent-scratch-mode))
  :init (setq persistent-scratch-backup-file-name-format "%Y-%m-%d"
              persistent-scratch-backup-directory
              (expand-file-name "persistent-scratch" user-emacs-directory)))
#+end_src

*** 加载 lim-pair 库

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package lim-pair :ensure nil)
#+end_src

*** 近期访问文件

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package recentf
  :ensure nil
  :hook (after-init . recentf-mode)
  :config
  (setq recentf-auto-cleanup 'never)
  (setq recentf-max-saved-items 200)
  (setq recentf-max-menu-items 100)
  (setq recentf-exclude `(,(recentf-expand-file-name "\\(straight\\|quelpa\\|elpa\\|eln-cache\\|var\\|.cache\\)/.*")
                          ,(recentf-expand-file-name "\\(auto-save-list\\|temp\\|transient\\|etc\\|backup\\|elfeed\\)/.*")
                          ,(recentf-expand-file-name "\\(recentf\\|bookmarks\\|savehist\\|places\\)")
                          ,tramp-file-name-regexp
                          "^/tmp" "\\.bak\\'" "\\.gpg\\'" "\\.gz\\'" "\\.tgz\\'" "\\.xz\\'" "\\.zip\\'" "^/ssh:" "\\.png\\'"
                          "\\.jpg\\'" "/\\.git/" "\\.gitignore\\'" "\\.log\\'" "COMMIT_EDITMSG" "\\.pyi\\'" "\\.pyc\\'"
                          ))

  ;; (run-at-time nil (* 5 60) #'recentf-save-list)
  (add-hook 'kill-emacs-hook #'recentf-save-list)
  ;; (add-hook 'kill-emacs-hook #'recentf-cleanup)
  )
#+end_src

*** 书签(Bookmark)

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package bookmark
  :ensure nil
  :commands (bookmark-set bookmark-jump bookmark-bmenu-list)
  :hook (bookmark-bmenu-mode . hl-line-mode))
#+end_src

*** 注册表(Register)

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package register
  :ensure nil
  :defer t
  :config
  (setq register-preview-delay 0.8
        register-preview-function #'register-preview-default)

  (with-eval-after-load 'savehist
    (add-to-list 'savehist-additional-variables 'register-alist)))
#+end_src

*** 工具提示

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package tooltip
  :ensure nil
  :hook (after-init . tooltip-mode)
  :config
  (setq tooltip-delay 0.5
        tooltip-short-delay 0.5
        x-gtk-use-system-tooltips t
        tooltip-frame-parameters
        '((name . "tooltip")
          (internal-border-width . 10)
          (border-width . 0)
          (no-special-glyphs . t))))
#+end_src

*** Emacs 服务器

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package server
  :ensure nil
  :defer 1
  :config
  (setq server-client-instructions nil)
  (unless (server-running-p)
    (server-start)))
#+end_src

*** 改动跳转

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package goto-chg
  :bind
  (("C-(" . goto-last-change)
   ("C-)" . goto-last-change-reverse)))
#+end_src

*** View 模式

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package view
  :ensure nil
  :functions (readonly-if-internal)
  :hook
  (emacs-lisp-mode . readonly-if-internal)
  (find-function-after . view-mode)
  (find-file . view-mode)
  :config
  (setcdr view-mode-map nil)
  (defun readonly-if-internal ()
    (let ((name (or (buffer-file-name) "")))
      (cond
       ((string-match "\\.el\\.gz\\'" name) (read-only-mode +1))
       ((string-match "\\*/elpa" name) (read-only-mode +1)))))
  )
#+end_src

*** winner

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package winner-mode
  :ensure nil
  :hook (after-init . winner-mode))

(use-package ediff
  :ensure nil
  :hook (ediff-quit . winner-undo))
#+end_src

*** so-long

有时候会打开一些文件, 这些文件里的某一行特别长, 而 =Emacs= 没有针对这种情况做特殊处理, 会导致整个界面卡死,
~so-long~ 会自动检测并将一些可能导致严重性能的 =mode= 关闭

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package so-long
  :ensure nil
  :config (global-so-long-mode 1))
#+end_src

*** 撤销与重做

可视化撤销与重做

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package vundo
  :defer 1
  :bind
  (("C-c C-/" . vundo)
   :map vundo-mode-map
   ("C-/" . vundo-backward)
   ("b" . vundo-backward)
   ("f" . vundo-forward)
   ("g" . vundo-goto-last-saved)
   ("h" . vundo-backward)
   ("j" . vundo-next)
   ("k" . vundo-previous)
   ("l" . vundo-forward))
  :config
  (setq vundo-compact-display t)
  
  (with-eval-after-load 'pulsar
    (add-hook 'vundo-post-exit-hook #'pulsar-pulse-line-green)))
#+end_src

*** 搜索

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package lim-search
  :ensure nil
  :commands (lim-search-mode lim-search-mode-toggle)
  :hook
  (lim-search-mode-quit . lim-search-dehighlight)
  ;; (lim-search-mode-quit . (lambda () (lazy-highlight-cleanup t)))
  ;; (lim-search-mode . isearch-exit)
  )

(use-package isearch
  :ensure nil
  :demand t
  :hook
  (isearch-mode-end . lim-search-dehighlight)
  :bind
  ( :map isearch-mode-map
    ([remap isearch-delete-char] . #'isearch-del-char)
    ([escape] . #'isearch-exit)
    ("C-c C-c" . #'lim-search-mode)
    )
  :config
  (setq isearch-lazy-count t)
  (setq lazy-count-prefix-format "(%s/%s) ")
  (setq lazy-count-suffix-format nil)
  (setq lazy-highlight-cleanup nil))
#+end_src

*** buffer 名称独特化

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package uniquify
  :ensure nil
  :config
  (setq uniquify-buffer-name-style 'forward
        uniquify-separator "/"
        ;; frename buffer after killing uniquify
        uniquify-after-kill-buffer-p t
        ;; don't mock special buffers
        uniquify-ignore-buffers-re "^\\*"
        ))
#+end_src

*** dumb-jump

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package dumb-jump
  :hook
  (xref-backend-functions . dumb-jump-xref-activate)
  :init
  ;; (setq dumb-jump-default-project user-emacs-directory)
  (setq dumb-jump-selector 'completing-read))
#+end_src

*** 列长度

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package simple
  :ensure nil
  :config
  (setq-default fill-column 120))
#+end_src

*** pop 窗口

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package popper
  :hook
  (after-init . popper-mode)
  (popper-mode-hook . popper-echo-mode)
  ;; :config
  ;; (setq popper-reference-buffers
  ;;       '("\\*Messages\\*"
  ;;         "^\\*eldoc"
  ;;         elisp-refs-mode
  ;;         flymake-diagnostics-buffer-mode
  ;;         (lambda (buf)
  ;;           (with-current-buffer buf
  ;;             (derived-mode-p
  ;;              '(compilation-mode
  ;;                comint-mode
  ;;                help-mode))))))
  )

(use-package shackle
  :config
  (setq popper-display-control nil)
  ;; (setq split-width-threshold 1)
  (setq shackle-default-rule '(:select t))
  (setq shackle-rules
      '((help-mode :select t :align right)
        (compilation-mode :select t :size 0.3 :align below)))
  (shackle-mode 1))
#+end_src

*** 空白字符

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package whitespace
  :ensure nil
  :diminish nil
  ;; :hook ((prog-mode markdown-mode conf-mode) . whitespace-mode)
  :config
  (setq whitespace-line-column nil)
  (setq whitespace-style
        '(face
          trailing
          lines-tail
          tabs
          tab-mark
          missing-newline-at-eof
          ))
  (global-whitespace-mode))
#+end_src

*** 重复模式

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package repeat
  :ensure nil
  ;; :hook (after-init . repeat-mode)
  :config
  (setq repeat-exit-key "<escape>"))

(use-package defrepeater
  :vc ( :url "https://github.com/alphapapa/defrepeater.el.git"
        :rev :newest))
#+end_src

*** 正则替换

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package anzu)
#+end_src

*** 语法检查(flymake)

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package flymake
  :diminish
  ;; :bind ("C-c f" . flymake-show-buffer-diagnostics)
  :hook (prog-mode . flymake-mode)
  :init
  (setq flymake-no-changes-timeout nil)
  (setq flymake-fringe-indicator-position 'right-fringe))

(use-package sideline-flymake
  :diminish sideline-mode
  :custom-face
  (sideline-flymake-error ((t (:height 0.85 :italic t))))
  (sideline-flymake-warning ((t (:height 0.85 :italic t))))
  (sideline-flymake-success ((t (:height 0.85 :italic t))))
  :hook (flymake-mode . sideline-mode)
  :init
  (setq sideline-flymake-display-mode 'point)
  (setq sideline-backends-right '(sideline-flymake)))
#+end_src

*** 注释

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package newcomment
  :ensure nil
  :config
  (setq comment-empty-lines nil))
#+end_src

*** 加载 lim-soothing 库

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(use-package lim-soothing
  :ensure nil
  :hook (after-init . global-lim-soothing-mode)
  :bind
  ( :map lim-soothing-mode-map

    ;; comment
    ("M-;" . lim-soothing-comment)
    ("C-c M-;" . lim-soothing-comment-timestamp-keyword)

    ;; jump
    ("C-;" . avy-goto-char-timer)
    ("C-c C-j" . avy-resume)

    ;; move/duplicate
    ("M-p" . move-dup-move-lines-up)
    ("M-n" . move-dup-move-lines-down)
    ;; ("C-c C-d" . move-dup-duplicate-down)
    ("C-c C-d" . lim-simple-duplicate-line-or-region)
    ("C-c C-u" . move-dup-duplicate-up)

    ;; expreg
    ("C-M-w" . expreg-expand)
    ("C-M-s" . expreg-contract)

    ;; crux
    ("C-a" . crux-move-beginning-of-line)
    ("C-c C-k" . lim-simple-kill-whole-line-or-region)
    ("C-S-j" . crux-top-join-line)
    ("C-j" . crux-smart-open-line)
    ("C-o" . crux-smart-open-line-above)

    ;; multiple-cursor
    ("C-c m t" . mc/mark-all-like-this)
    ("C-c m m" . mc/mark-all-like-this-dwim)
    ("C-c m l" . mc/edit-lines)
    ("C-c m e" . mc/edit-ends-of-lines)
    ("C-c m a" . mc/edit-beginnings-of-lines)
    ("C-c m n" . mc/mark-next-like-this)
    ("C-c m p" . mc/mark-previous-like-this)
    ("C-c m s" . mc/mark-sgml-tag-pair)
    ("C-c m d" . mc/mark-all-like-this-in-defun)

    ;; ace window
    ([remap other-window] . ace-window)

    ;; fold
    ("C-." . hs-toggle-hiding)
    ))
#+end_src

*** 导出模块

#+begin_src emacs-lisp :tangle module/lim-module-essential.el :mkdirp yes
(provide 'lim-module-essential)
#+end_src

** lim-module-hydra.el 模块

*** hydra 和 posframe

#+begin_src emacs-lisp :tangle module/lim-module-hydra.el :mkdirp yes
(use-package hydra
  :config
  (setq lv-use-separator t)
  (setq hydra-is-helpful nil))

(use-package use-package-hydra
  :after hydra)

(use-package posframe)

(use-package hydra-posframe
  :vc ( :url "https://github.com/Ladicle/hydra-posframe.git"
        :rev :newest)
  :hook (after-init . hydra-posframe-mode))

(use-package major-mode-hydra)
#+end_src

*** 导出模块

#+begin_src emacs-lisp :tangle module/lim-module-hydra.el :mkdirp yes
(provide 'lim-module-hydra)
#+end_src

** lim-module-completion.el 模块

*** 自定义匹配函数

#+begin_src emacs-lisp :tangle module/lim-module-completion.el :mkdirp yes
(defun lim-orderless--consult-suffix ()
  "Regexp which matches the end of string with Consult tofu support."
  (if (and (boundp 'consult--tofu-char) (boundp 'consult--tofu-range))
      (format "[%c-%c]*$"
              consult--tofu-char
              (+ consult--tofu-char consult--tofu-range -1))
    "$"))

(defun lim-orderless-literal (word _index _total)
  "Read WORD= as a literal string."
  (when (string-suffix-p "=" word)
    ;; The `orderless-literal' is how this should be treated by
    ;; orderless.  The `substring' form omits the `=' from the
    ;; pattern.
    `(orderless-literal . ,(substring word 0 -1))))

(defun lim-orderless-consult-dispatch (word _index _total)
  (cond
   ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
   ((string-suffix-p "$" word)
    `(orderless-regexp . ,(concat (substring word 0 -1) (lim-orderless--consult-suffix))))
   ;; File extensions
   ((and (or minibuffer-completing-file-name
             (derived-mode-p 'eshell-mode))
         (string-match-p "\\`\\.." word))
    `(orderless-regexp . ,(concat "\\." (substring word 1) (lim-orderless--consult-suffix))))))

(defun lim-orderless-beg-or-end (word _index _total)
  "Expand WORD~ to \\(^WORD\\|WORD$\\)."
  (when-let (((string-suffix-p "~" word))
             (word (substring word 0 -1)))
    `(orderless-regexp . ,(format "\\(^%s\\|%s$\\)" word word))))

(defun lim-orderless-dispatch-flex-first (_pattern index _total)
    (and (eq index 0) 'orderless-flex))
#+end_src

*** Mini 缓冲区增强

=minibuffer= 增强

#+begin_src emacs-lisp :tangle module/lim-module-completion.el :mkdirp yes
(use-package vertico
  :init
  (vertico-mode)
  :config
  (setq vertico-cycle t)
  (setq vertico-resize t))

(use-package vertico-directory
  :after vertico
  :ensure nil
  :bind
  ( :map vertico-map
    ("RET" . vertico-directory-enter)
    ("DEL" . vertico-directory-delete-char)
    ("M-DEL" . vertico-directory-delete-word))
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

*** crm(completing-read-multiple)

#+begin_src emacs-lisp :tangle module/lim-module-completion.el :mkdirp yes
(use-package emacs
  :init
  (defun lim/crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'lim/crm-indicator))
#+end_src

*** Mini 缓冲区边注

=minibuffer= 中显示相关边注

#+begin_src emacs-lisp :tangle module/lim-module-completion.el :mkdirp yes
(use-package marginalia
  :defer 1
  :bind
  ( :map minibuffer-local-map
    ("M-A" . marginalia-cycle))
  :init
  (marginalia-mode)
  :config
  (setq marginalia-max-relative-age 0))
#+end_src

*** 无序匹配

#+begin_src emacs-lisp :tangle module/lim-module-completion.el :mkdirp yes
(use-package orderless
  :demand t
  :after minibuffer
  :bind ( :map minibuffer-local-completion-map
          ("SPC" . nil)
          ("?" . nil))
  :config
  (orderless-define-completion-style +orderless-with-initialism
    (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp)))

  (setq orderless-matching-styles '(orderless-prefixes orderless-literal orderless-regexp))

  (setq orderless-style-dispatchers
        '(lim-orderless-literal
          lim-orderless-beg-or-end
          lim-orderless-consult-dispatch
          orderless-affix-dispatch))

  (setq orderless-component-separator #'orderless-escapable-split-on-space)

  ;; (setq completion-styles '(substring initials flex orderless basic))
  (setq completion-styles '(substring partial-completion initials flex orderless basic))
  (setq completion-category-defaults nil)
  (setq completion-category-overrides
        '((file (styles . (partial-completion orderless basic)))
          (bookmark (styles . (orderless basic)))
          (library (styles . (orderless basic)))
          (lsp-capf (styles . (orderless basic)))
          (embark-keybinding (styles . (substring orderless basic)))
          (imenu (styles . (substring orderless basic)))
          (consult-location (styles . (substring orderless basic)))
          (kill-ring (styles . (substring orderless basic)))
          (eglot (styles . (substring orderless basic)))
          (eglot-capf (styles . (substring orderless basic)))
          (command (styles +orderless-with-initialism))
          (variable (styles +orderless-with-initialism))
          (symbol (styles +orderless-with-initialism)))))
#+end_src

*** 完成时大小写敏感

忽略大小写敏感(其目的可以尽可能的减少 ~Shift~ 按键的使用)

#+begin_src emacs-lisp :tangle module/lim-module-completion.el :mkdirp yes
(use-package emacs
  :config
  (setq completion-ignore-case t)
  (setq read-buffer-completion-ignore-case t)
  (setq-default case-fold-search t)
  (setq read-file-name-completion-ignore-case t))
#+end_src

*** mb-depth

#+begin_src emacs-lisp :tangle module/lim-module-completion.el :mkdirp yes
(use-package mb-depth
  :ensure nil
  :hook
  ((after-init . minibuffer-depth-indicate-mode)
   (minibuffer-setup . cursor-intangible-mode))
  :config
  (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt))
  (setq read-extended-command-predicate #'command-completion-default-include-p)
  (setq read-minibuffer-restore-windows nil)
  (setq enable-recursive-minibuffers t))
#+end_src

*** minibuf-eldef

#+begin_src emacs-lisp :tangle module/lim-module-completion.el :mkdirp yes
(use-package minibuf-eldef
  :ensure nil
  :hook (after-init . minibuffer-electric-default-mode)
  :config
  (setq minibuffer-default-prompt-format " [%s]"))
#+end_src

*** rfn-eshadow

#+begin_src emacs-lisp :tangle module/lim-module-completion.el :mkdirp yes
(use-package rfn-eshadow
  :ensure nil
  :config
  (setq resize-mini-windows t)
  (setq read-answer-short t)
  (setq echo-keystrokes 0.25)
  (file-name-shadow-mode 1))
#+end_src

*** minibuffer

#+begin_src emacs-lisp :tangle module/lim-module-completion.el :mkdirp yes
(use-package minibuffer
  :ensure nil
  :demand t
  :config
  (setq completions-format 'one-column)
  (setq completion-show-help nil)
  (setq completion-auto-help 'always)
  (setq completion-auto-select nil)
  (setq completions-detailed t)
  (setq completion-show-inline-help nil)
  (setq completions-max-height 6)
  (setq completions-header-format (propertize "%s candidates:\n" 'face 'bold-italic))
  (setq completions-highlight-face 'completions-highlight)
  (setq minibuffer-completion-auto-choose t)
  (setq minibuffer-visible-completions t)
  (setq completions-sort 'historical))
#+end_src

*** UI(completion UI)

#+begin_src emacs-lisp :tangle module/lim-module-completion.el :mkdirp yes
(use-package corfu
  :hook ((after-init . global-corfu-mode))
  :bind ( :map corfu-map
          ("<tab>" . corfu-complete)
          :map corfu-popupinfo-map
          ("C-M-j" . corfu-popupinfo-scroll-up)
          ("C-M-k" . corfu-popupinfo-scroll-down))
  :config
  (setq corfu-cycle t)
  (setq corfu-auto t)
  (setq corfu-auto-prefix 2)
  ;; (setq corfu-auto-delay 0.1)
  (setq corfu-separator ?\s)
  ;; (setq corfu-preselect 'prompt)
  (setq corfu-scroll-margin 5)
  ;; (setq corfu-on-exact-match nil)
  (setq corfu-popupinfo-delay '(0.1 . 0.2))
  (setq corfu-popupinfo-max-width 140)
  (setq corfu-popupinfo-max-height 30)

  (setq corfu-preview-current nil)
  (setq corfu-min-width 20)

  (corfu-popupinfo-mode 1)

  (with-eval-after-load 'savehist
    (corfu-history-mode 1)
    (add-to-list 'savehist-additional-variables 'corfu-history)))
#+end_src

*** 扩展(Completion At Point Extensions)

#+begin_src emacs-lisp :tangle module/lim-module-completion.el :mkdirp yes
(use-package cape
  :bind (("C-c p p" . completion-at-point)
         ("C-c p t" . complete-tag)
         ("C-c p d" . cape-dabbrev)
         ("C-c p h" . cape-history)
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-elisp-symbol)
         ("C-c p e" . cape-elisp-block)
         ("C-c p a" . cape-abbrev)
         ("C-c p l" . cape-line)
         ("C-c p w" . cape-dict)
         ("C-c p :" . cape-emoji)
         ("C-c p \\" . cape-tex)
         ("C-c p _" . cape-tex)
         ("C-c p ^" . cape-tex)
         ("C-c p &" . cape-sgml)
         ("C-c p r" . cape-rfc1345))
  :init
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-elisp-block)
  ;;(add-hook 'completion-at-point-functions #'cape-history)
  ;;(add-hook 'completion-at-point-functions #'cape-keyword)
  ;;(add-hook 'completion-at-point-functions #'cape-tex)
  ;;(add-hook 'completion-at-point-functions #'cape-sgml)
  ;;(add-hook 'completion-at-point-functions #'cape-rfc1345)
  (add-hook 'completion-at-point-functions #'cape-abbrev)
  ;;(add-hook 'completion-at-point-functions #'cape-dict)
  ;;(add-hook 'completion-at-point-functions #'cape-elisp-symbol)
  ;;(add-hook 'completion-at-point-functions #'cape-line)

  :config
  (setq dabbrev-check-other-buffers nil
        dabbrev-check-all-buffers nil
        cape-dabbrev-min-length 3)
  (cape-wrap-prefix-length #'cape-dabbrev 3)
)
#+end_src

*** 完成增强(consult)

#+begin_src emacs-lisp :tangle module/lim-module-completion.el :mkdirp yes
(use-package consult
  :bind (;("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ;; ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ;; ("C-c i" . consult-info)
         ;; ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ;; ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("M-s b" . consult-buffer)                ;; orig. switch-to-buffer
         ;; ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ;; ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ;; ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ;; ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ;; ("M-#" . consult-register-load)
         ;; ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ;; ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ;; ("M-g e" . consult-compile-error)
         ;; ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ;; ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ;; ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ;; ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)                  ;; Alternative: consult-fd
         ;; ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ;; ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ;; ("M-s e" . consult-isearch-history)
         :map consult-narrow-map
         ("?" . consult-narrow-help)
         :map isearch-mode-map
         ;; ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ;; ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  :hook (completion-list-mode . consult-preview-at-point-mode)

  :init
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format
        xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  (advice-add #'register-preview :override #'consult-register-window)

  :config
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   :preview-key '(:debounce 0.4 any))
  (setq consult-narrow-key "<")
  (setq consult-preview-key 'any)

  (add-to-list 'consult-mode-histories '(vc-git-log-edit-mode . log-edit-comment-ring))

  (require 'consult-imenu)
  ;; (with-eval-after-load 'pulsar
  ;;     (setq consult-after-jump-hook nil)
  ;;     (dolist (fn '(pulsar-recenter-top pulsar-reveal-entry))
  ;;       (add-hook 'consult-after-jump-hook fn)))
  )
#+end_src

*** 历史记录

保存相关历史操作

#+begin_src emacs-lisp :tangle module/lim-module-completion.el :mkdirp yes
(use-package savehist
  :ensure nil
  :hook (after-init . savehist-mode)
  :config
  (setq savehist-file (locate-user-emacs-file "savehist"))
  (setq history-delete-duplicates t)
  (setq history-length 600)
  (setq savehist-save-minibuffer-history t)
  (setq savehist-autosave-interval 300)
  (add-to-list 'savehist-additional-variables 'kill-ring)
  (add-to-list 'savehist-additional-variables 'global-mark-ring)
  (add-to-list 'savehist-additional-variables 'extended-command-history))
#+end_src

*** Mini 缓冲区操作

增强 =minibuffer= 的按键操作

#+begin_src emacs-lisp :tangle module/lim-module-completion.el :mkdirp yes
(use-package embark
  :bind
  (("C-c C-a" . embark-act)
   ("C-c C-;" . embark-dwim)
   ("C-h B" . embark-bindings)
   :map minibuffer-local-map
   ("C-c C-c" . embark-collect)
   ("C-c C-e" . embark-export))
  :init
  (setq prefix-help-command #'embark-prefix-help-command))

(use-package embark-consult
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

*** 可写 Grep 缓冲区

#+begin_src emacs-lisp :tangle module/lim-module-completion.el :mkdirp yes
(use-package wgrep
  :after grep
  :bind
  ( :map grep-mode-map
    ("e" . wgrep-change-to-wgrep-mode)
    ("C-x C-q" . wgrep-change-to-wgrep-mode)
    ("C-c C-c" . wgrep-finish-edit))
  :config
  (setq wgrep-auto-save-buffer t)
  (setq wgrep-change-readonly-file t))

(use-package grep
  :config
  (setq grep-highlight-matches t)
  ;; (setq grep-find-ignored-directories
  ;;       (append (list ".git" ".cache" "vendor" "node_modules" "target")
  ;;               grep-find-ignored-directories))
  ;; (setq grep-find-ignored-files
  ;;       (append (list "*.blob" "*.gz" "TAGS" "projectile.cache" "GPATH" "GRTAGS" "GTAGS" "TAGS" ".project" )
  ;;               grep-find-ignored-files))
  )
#+end_src

*** 动态缩写扩展

#+begin_src emacs-lisp :tangle module/lim-module-completion.el :mkdirp yes
(use-package dabbrev
  :ensure nil
  :commands (dabbrev-expand dabbrev-completion)
  :config
  (setq dabbrev-abbrev-char-regexp "\\sw\\|\\s_")
  (setq dabbrev-abbrev-skip-leading-regexp "[$*/=~']")
  (setq dabbrev-backward-only nil)
  (setq dabbrev-case-distinction 'case-replace)
  (setq dabbrev-case-fold-search nil)
  (setq dabbrev-case-replace 'case-replace)
  (setq dabbrev-check-other-buffers t)
  (setq dabbrev-eliminate-newlines t)
  (setq dabbrev-upcase-means-case-search t)
  (setq dabbrev-ignored-buffer-modes
        '(archive-mode image-mode docview-mode pdf-view-mode)))
#+end_src

*** 代码片段

#+begin_src emacs-lisp :tangle module/lim-module-completion.el :mkdirp yes
(use-package tempel
  :bind
  (("M-+" . tempel-complete)
   ("M-*" . tempel-insert)
   :map tempel-map
   ("<tab>" . tempel-next)
   ("<backtab>" . tempel-previous))
  :init
  (setq tempel-path (expand-file-name "templates/*.eld" user-emacs-directory))
  (defun tempel-setup-capf ()
    (setq-local completion-at-point-functions (cons #'tempel-expand completion-at-point-functions)))
  :hook
  (conf-mode . tempel-setup-capf)
  (prog-mode . tempel-setup-capf)
  (text-mode . tempel-setup-capf)
  (eglot-managed-mode . tempel-setup-capf)
  :functions (tempel-include)
  :config
  (global-tempel-abbrev-mode)
  (defun tempel-include (elt)
    (when (eq (car-safe elt) 'i)
      (if-let (template (alist-get (cadr elt) (tempel--templates)))
          (cons 'l template)
        (message "Template %s not found" (cadr elt))
        nil)))
  (add-to-list 'tempel-user-elements #'tempel-include))

(use-package yasnippet
  ;; :config
  ;; (yas-global-mode 1)
  )

(use-package yasnippet-snippets
  :after (yasnippet))

;; (use-package yasnippet-capf
;;   :after cape
;;   :config
;;   (add-hook 'completion-at-point-functions #'yasnippet-capf))

(use-package tempel-collection)
#+end_src

*** 导出模块

#+begin_src emacs-lisp :tangle module/lim-module-completion.el :mkdirp yes
(provide 'lim-module-completion)
#+end_src

** lim-module-dired.el 模块

*** 文件管理器

#+begin_src emacs-lisp :tangle module/lim-module-dired.el :mkdirp yes
(use-package dired-sidebar
  :commands (dired-sidebar-toggle-sidebar)
  :hook
  (dired-sidebar-mode . lim-simple-whitespace-disable)
  (dired-sidebar-mode . auto-revert-mode)
  :bind
  ( :map dired-sidebar-mode-map
    ("<mouse-2>" . nil)
    ("<double-mouse-1>" . dired-sidebar-mouse-subtree-cycle-or-find-file))
  :config
  (advice-add 'dired-sidebar-mouse-subtree-cycle-or-find-file :after 'dired-sidebar-revert)
  (setq dired-listing-switches "-Ahlv"))
#+end_src

*** 复制/删除行为

#+begin_src emacs-lisp :tangle module/lim-module-dired.el :mkdirp yes
(use-package dired
  :ensure nil
  :commands (dired)
  :config
  (setq dired-recursive-copies 'always)
  (setq dired-recursive-deletes 'always)
  (setq delete-by-moving-to-trash t))
#+end_src

*** 目录选择

#+begin_src emacs-lisp :tangle module/lim-module-dired.el :mkdirp yes
(use-package dired
  :ensure nil
  :commands (dired)
  :config
  (setq dired-dwim-target t))
#+end_src

*** 刷新和钩子

#+begin_src emacs-lisp :tangle module/lim-module-dired.el :mkdirp yes
(use-package dired-x :ensure nil)

(use-package dired
  :ensure nil
  :commands (dired)
  :config
  (setq dired-auto-revert-buffer #'dired-directory-changed-p)
  ;; (setq dired-make-directory-clickable t)
  (setq dired-free-space nil)
  (setq dired-omit-verbose nil)
  ;; (setq dired-mouse-drag-files t)

  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
  (add-hook 'dired-mode-hook #'hl-line-mode)
  (add-hook 'dired-mode-hook #'dired-omit-mode))
#+end_src

*** 回收站

#+begin_src emacs-lisp :tangle module/lim-module-dired.el :mkdirp yes
(use-package trashed
  :commands (trashed)
  :config
  (setq trashed-action-confirmer 'y-or-n-p)
  (setq trashed-use-header-line t)
  (setq trashed-sort-key '("Date deleted" . t))
  (setq trashed-date-format "%Y-%m-%d %H:%M:%S"))
#+end_src

*** 导出模块

#+begin_src emacs-lisp :tangle module/lim-module-dired.el :mkdirp yes
(provide 'lim-module-dired)
#+end_src

** lim-module-org.el 模块

*** 日历

配置日历相关的一些显示, 如时区, 农历, 经纬度等信息

#+begin_src emacs-lisp :tangle module/lim-module-org.el :mkdirp yes
(use-package calendar
  :ensure nil
  :commands (calendar)
  :config
  ;; Show calendar for diary entry
  (setq calendar-mark-diary-entries-flag t)
  ;; Show calendar for holiday
  (setq calendar-mark-holidays-flag t)
  (setq calendar-mode-line-format nil)
  (setq calendar-time-display-form
        '( 24-hours ":" minutes
           (when time-zone (format "(%s)" time-zone))))
  ;; Monday is the first day of the week
  (setq calendar-week-start-day 1)
  ;; Like year/month/day style
  (setq calendar-date-style 'iso)
  ;; Like +0800 style
  (setq calendar-time-zone-style 'numeric)

  (require 'solar)
  ;; Not my actual coordinates
  (setq calendar-longitude (getenv "MY_LONGITUDE"))
  (setq calendar-latitude (getenv "MY_LATITUDE"))

  (require 'cal-dst)
  ;; UTC +8. China Standard Time, Beijing Time
  (setq calendar-standard-time-zone-name "+0800")
  (setq calendar-daylight-time-zone-name "+0800"))
#+end_src

*** 预约

配置预约提示

#+begin_src emacs-lisp :tangle module/lim-module-org.el :mkdirp yes
(use-package appt
  :ensure nil
  :commands (appt-activate)
  :config
  (require 'notifications)
  (defun appt-disp-window-and-notification (min-to-appt current-time appt-msg)
    (let ((title (format "%s 分钟内有新预约" min-to-appt)))
      (notifications-notify
       ;; Until next reminder
       :timeout (* appt-display-interval 60000)
       :title title
       :body appt-msg
       )
      ;; The original function is also called
      (appt-disp-window min-to-appt current-time appt-msg)))
  (setq appt-display-diary nil
        appt-display-mode-line t
        ;; Reminder interval
        appt-display-interval 5
        ;; Mute
        appt-audible nil
        appt-warning-time-regexp "预约 \\([0-9]+\\)"
        appt-message-warning-time 15)
  ;; Use customize func
  (setq appt-display-format 'window)
  (setq appt-disp-window-function #'appt-disp-window-and-notification)

  (with-eval-after-load 'org-agenda
    (appt-activate 1)
    (org-agenda-to-appt)))
#+end_src

*** 个人文档信息

 个人文档信息的基础配置, 关闭了某些无用的按键, 同时加入了 =mode-hydra= 主模式按键提示

#+begin_src emacs-lisp :tangle module/lim-module-org.el :mkdirp yes
(use-package org
  :ensure nil
  :init
  (setq org-directory "~/org-notes/")
  (setq org-imenu-depth 7)

  (add-to-list 'safe-local-variable-values '(org-hide-leading-stars . t))
  (add-to-list 'safe-local-variable-values '(org-hide-macro-markers . t))
  :mode-hydra
  ((:title "Org-Mode Commands")
   ("Main"
    ( ("l" org-insert-last-stored-link "insert last link")
      ("cl" org-toggle-link-display "toggle link display")
      ("." org-toggle-link-display "toggle link display")
      ("i" lim-org-id-headlines "id headline" :color blue)
      ("h" lim-org-ox-html "ox html" :color blue)
      )
    ))
  :bind
  ( :map global-map
    ("C-c o l" . org-store-link)
    ("C-c o a" . org-agenda)
    ("C-c o c" . org-capture)
    ("C-c o o" . org-open-at-point-global)
    :map org-mode-map
    ;; So many bindings one zillion keys and most of them useless, disable it!
    ("C-'" . nil)
    ("C-," . nil)
    ("M-;" . nil)
    ("<C-return>" . nil)
    ("<C-S-return>" . nil)
    ("C-M-S-<right>" . nil)
    ("C-M-S-<left>" . nil)
    ("C-c ;" . nil)

    ("C-c l" . org-insert-last-stored-link)
    ("C-c C-l" . org-toggle-link-display)
    ("M-." . org-edit-special)

    :map org-src-mode-map
    ("M-," . org-edit-src-exit)

    :map narrow-map
    ("b" . org-narrow-to-block)
    ("e" . org-narrow-to-element)
    ("s" . org-narrow-to-subtree)

    :map ctl-x-x-map
    ("i" . lim-org-id-headlines)
    ("h" . lim-org-ox-html))
  :config
  ;; My custom extras, which I use for the agenda and a few other Org features.
  (require 'lim-org)
  (require 'org-tempo)

  ;; general settings
  (setq org-M-RET-may-split-line '((default . nil)))
  ;; (setq org-cycle-separator-lines 0)
  (setq org-adapt-indentation nil)
  (setq org-structure-template-alist
        '(("s" . "src")
          ("e" . "src emacs-lisp")
          ("E" . "src emacs-lisp :results value code :lexical t")
          ("t" . "src emacs-lisp :tangle FILENAME")
          ("T" . "src emacs-lisp :tangle FILENAME :mkdirp yes")
          ("x" . "example")
          ("X" . "export")
          ("q" . "quote")))
  (setq org-catch-invisible-edits 'show)
  (setq org-loop-over-headlines-in-active-region 'start-level)
  (setq org-modules '(ol-info ol-eww))
  (setq org-use-sub-superscripts '{})
  (setq org-insert-heading-respect-content t)
  (setq org-read-date-prefer-future 'time)
  ;; other options affect elisp regexp in src blocks
  (setq org-highlight-latex-and-related '(latex))
  (setq org-fontify-quote-and-verse-blocks t)
  (setq org-fontify-whole-block-delimiter-line t)
  (setq org-track-ordered-property-with-tag t)
  (setq org-highest-priority ?A)
  (setq org-lowest-priority ?C)
  (setq org-default-priority ?A)
  (setq org-priority-faces nil)

  (defun lim/org-disable-angle-bracket ()
    (setq-local electric-pair-inhibit-predicate
                `(lambda (c)
                   (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c)))))

  (add-hook 'org-mode-hook 'lim/org-disable-angle-bracket)

  ;; See my `pulsar' package, defined elsewhere in this setup.
  (with-eval-after-load 'pulsar
    (dolist (hook '(org-agenda-after-show-hook org-follow-link-hook))
      (add-hook hook #'pulsar-recenter-center)
      (add-hook hook #'pulsar-reveal-entry))))
#+end_src

*** Refile 和 TODO

#+begin_src emacs-lisp :tangle module/lim-module-org.el :mkdirp yes
(use-package org
  :ensure nil
  :config
  (setq org-refile-targets
        '((org-agenda-files . (:maxlevel . 2))
          (nil . (:maxlevel . 2))))
  (setq org-refile-use-outline-path t)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-refile-use-cache t)
  (setq org-reverse-note-order nil)

  (setq org-todo-keywords
        '((sequence "TODO(t)" "DOING(i!)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@/!)")
          (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f!)")
          ))

  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "#FF9966" :weight bold))
          ("DOING" . (:foreground "#6699FF" :weight bold))
          ("WAIT" . (:foreground "#333399" :weight bold))
          ("REPORT" . (:foreground "#6666CC" :weight bold))
          ("BUG" . (:foreground "#FF0066" :weight bold))
          ("KNOWNCAUSE" . (:foreground "#99CC33" :weight bold))
          ("CANCELED" . (:foreground "#FF6666" :weight bold))
          ("DONE" . (:foreground "#22AA66" :weight bold))
          ("FIXED" . (:foreground "#00AA00" :weight bold))
          ))
  (setq org-use-fast-todo-selection 'expert)

  (setq org-fontify-done-headline nil)
  (setq org-fontify-todo-headline nil)
  (setq org-fontify-whole-heading-line nil)
  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t))
#+end_src

*** 标签

#+begin_src emacs-lisp :tangle module/lim-module-org.el :mkdirp yes
(use-package org
  :ensure nil
  :config
  (setq org-tag-alist nil)
  (setq org-auto-align-tags nil)
  (setq org-tags-column 0))
#+end_src

*** 日志

#+begin_src emacs-lisp :tangle module/lim-module-org.el :mkdirp yes
(use-package org
  :ensure nil
  :config
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-log-note-clock-out nil)
  (setq org-log-redeadline 'time)
  (setq org-log-reschedule 'time))
#+end_src

*** 链接

#+begin_src emacs-lisp :tangle module/lim-module-org.el :mkdirp yes
(use-package org
  :ensure nil
  :config
  (require 'lim-org)

  (setq org-link-context-for-files t)
  (setq org-link-keep-stored-after-insertion nil)
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id))
#+end_src

*** 代码块

#+begin_src emacs-lisp :tangle module/lim-module-org.el :mkdirp yes
(use-package org
  :ensure nil
  :config
  (setq org-confirm-babel-evaluate nil)
  (setq org-src-window-setup 'current-window)
  (setq org-edit-src-persistent-message nil)
  (setq org-src-fontify-natively t)
  (setq org-src-preserve-indentation t)
  (setq org-src-tab-acts-natively t)
  (setq org-edit-src-content-indentation 0))
#+end_src

*** 导出

#+begin_src emacs-lisp :tangle module/lim-module-org.el :mkdirp yes
(use-package org
  :ensure nil
  :init
  (setq org-export-backends '(html texinfo md))
  :config
  (setq org-export-with-toc t)
  (setq org-export-headline-levels 8)
  (setq org-export-dispatch-use-expert-ui nil)
  (setq org-html-htmlize-output-type nil)
  (setq org-html-head-include-default-style nil)
  (setq org-html-head-include-scripts nil))
#+end_src

*** 符号

#+begin_src emacs-lisp :tangle module/lim-module-org.el :mkdirp yes
(use-package org
  :ensure nil
  :config
  (prettify-symbols-mode 1)
  (setq prettify-symbols-unprettify-at-point t))
#+end_src

*** 行号

在 ~org-mode~ 中关闭行号的显示, 因为作用不大, 而且还影响阅读

#+begin_src emacs-lisp :tangle module/lim-module-org.el :mkdirp yes
(use-package display-line-numbers
  :hook (org-mode . (lambda () (display-line-numbers-mode -1))))
#+end_src

*** 文档笔记捕获(capture)

=Capture= 可让你快速存储笔记, 几乎不会中断你的工作流程

#+begin_src emacs-lisp :tangle module/lim-module-org.el :mkdirp yes
(use-package org-capture
  :ensure nil
  :config
  (require 'lim-org)

  (setq org-capture-templates
        `(("i" "灵感" entry
           (file+headline "inbox.org" "INSPIRE")
           ,(concat
             "* %^{Title}\n"
             ":PROPERTIES:\n"
             ":CAPTURED: %U\n"
             ":END:\n\n"
             "%i %l")
           :empty-lines 1)
          ("t" "临时" entry
           (file+headline "inbox.org" "TEMPORARY")
           ,(concat
             "* TODO [#B] %^{Title}\n"
             ":PROPERTIES:\n"
             ":EFFORT: %^{Effort estimate in minutes|5|10|15|30|45|60|90|120}\n"
             ":END:\n\n"
             "%a\n")
           :prepend t
           :clock-in t
           :clock-keep t
           :immediate-finish t
           :empty-lines 1)
          ("l" "闲时" entry
           (file+olp+datetree "leisure.org")
           ,(concat
             "* TODO [#C] %^{Title}\n"
             ":PROPERTIES:\n"
             ":CAPTURED: %U\n"
             ":END:\n\n"
             "%i%?")
           :empty-lines 1
           :tree-type month)
          ("g" "GTD" entry
           (file+olp+datetree "gtd.org")
           ,(concat
             "* TODO [#B] %^{Title} %^g\n"
             "SCHEDULED: %^t\n"
             "DEADLINE: %^t\n"
             ":PROPERTIES:\n"
             ":CAPTURED: %U\n"
             ":END:\n\n"
             "%a\n%i%?")
           :empty-lines 1
           :tree-type week)
          ))
  )
#+end_src

*** 中国农历假期

#+begin_src emacs-lisp :tangle module/lim-module-org.el :mkdirp yes
(use-package cal-china-x
  :config
  (setq mark-holidays-in-calendar t)
  (setq cal-china-x-important-holidays cal-china-x-chinese-holidays)
  (setq calendar-holidays
        (append cal-china-x-important-holidays
                cal-china-x-general-holidays
                holiday-general-holidays
                holiday-christian-holidays)))
#+end_src

*** 会议安排

#+begin_src emacs-lisp :tangle module/lim-module-org.el :mkdirp yes
(use-package org-agenda
  :ensure nil
  :config
  (require 'solar)
  (require 'lim-org)

  (defun lim/org-agenda-format-date-aligned (date)
    "Format a DATE string for display in the daily/weekly agenda, or timeline.

This function makes sure that dates are aligned for easy reading."
    (require 'cal-iso)
    (let* ((dayname (aref cal-china-x-days
                          (calendar-day-of-week date)))
           (day (cadr date))
           (month (car date))
           (year (nth 2 date))
           (cn-date (calendar-chinese-from-absolute (calendar-absolute-from-gregorian date)))
           (cn-month (cl-caddr cn-date))
           (cn-day (cl-cadddr cn-date))
           (cn-month-string (concat (aref cal-china-x-month-name
                                          (1- (floor cn-month)))
                                    (if (integerp cn-month)
                                        ""
                                      "(闰月)")))
           (cn-day-string (aref cal-china-x-day-name
                                (1- cn-day))))
      (format "%04d-%02d-%02d 周%s %s%s" year month
              day dayname cn-month-string cn-day-string)))

  (setq org-default-notes-file (expand-file-name ".notes" org-directory))
  (setq org-agenda-include-diary t)
  (setq diary-file (expand-file-name "standard-diary" org-directory))
  (setq org-agenda-diary-file 'diary-file)
  (setq org-agenda-time-grid
        '((daily today require-timed)
          (0300 0600 0900 1200 1500 1800 2100 2400)
          "......" "------------------------"))
  (setq org-agenda-format-date 'lim/org-agenda-format-date-aligned)

  (setq org-agenda-files `(,org-directory))
  (setq org-agenda-span 'week)
  (setq org-agenda-start-on-weekday 1)
  (setq org-agenda-confirm-kill t)
  (setq org-agenda-show-all-dates t)
  (setq org-agenda-show-outline-path nil)
  (setq org-agenda-window-setup 'current-window)
  (setq org-agenda-skip-comment-trees t)

  (setq org-agenda-scheduled-leaders
        '("Scheduled: " "Sched.%2dx: "))
  (setq org-agenda-inactive-leader "[")
  (setq org-agenda-deadline-leaders
        '("Deadline:  " "In %3d d.: " "%2d d. ago: "))

  (setq org-agenda-current-time-string "← now ──────────────────")
  )
#+end_src

*** 文档美化

#+begin_src emacs-lisp :tangle module/lim-module-org.el :mkdirp yes
(use-package org-modern
  :hook
  (org-mode . org-modern-mode)
  (org-agenda-finalize . org-modern-agenda)
  :config
  (setq org-modern-table nil)
  (setq org-pretty-entities t)
  (setq org-hide-emphasis-markers t)

  (setq org-modern-list
        '( ;(?+ . "➣")
          (?+ . "∙")
          (?- . "◦")
          (?* . "‣")
          ))
  )
#+end_src

*** 窗口美化(Olivetti)

#+begin_src emacs-lisp :tangle module/lim-module-org.el :mkdirp yes
(use-package olivetti
  :hook org-mode)
#+end_src

*** 文档美化增强

进入隐藏修饰标签时, 自动展开

#+begin_src emacs-lisp :tangle module/lim-module-org.el :mkdirp yes
(use-package org-appear
  :hook org-modern-mode
  :config
  (setq org-appear-autolinks t))
#+end_src

*** 导出模块

#+begin_src emacs-lisp :tangle module/lim-module-org.el :mkdirp yes
(provide 'lim-module-org)
#+end_src

** lim-module-window.el 模块

*** 窗口移动

允许窗口在水平/垂直方向循环移动

#+begin_src emacs-lisp :tangle module/lim-module-window.el :mkdirp yes
(use-package windmove
  :ensure nil
  :config
  (setq windmove-wrap-around t))
#+end_src

*** 导出模块

#+begin_src emacs-lisp :tangle module/lim-module-window.el :mkdirp yes
(provide 'lim-module-window)
#+end_src

** lim-module-ai.el 模块

*** Tabby

#+begin_src emacs-lisp :tangle module/lim-module-ai.el :mkdirp yes
(use-package tabby
  :vc ( :url "https://github.com/alan-w-255/tabby.el.git")
  :bind
  (("C-'" . tabby-complete)
   :map tabby-completion-map
   ("<tab>" . tabby-accept-completion)
   ("C-<return>" . tabby-accept-completion-by-word)
   ("C-l" . tabby-accept-completion-by-line))
  :commands (tabby-accept-completion)
  :defines (taby-mode-map tabby--ongoing-request-id)
  ;; :hook
  ;; (go-ts-mode . tabby-mode)
  ;; (tuareg-mode . tabby-mode)
  ;; (haskell-mode . tabby-mode)
  :config
  (setq tabby-idle-delay 1.5))
#+end_src

*** GPT

#+begin_src emacs-lisp :tangle module/lim-module-ai.el :mkdirp yes
(use-package gptel
  :ensure t
  :defer 1
  :bind
  ( :map gptel-mode-map
    ("<RET>" . gptel-send))
  :config
  (setq gptel-default-mode 'org-mode)
  :init
  (setq-default gptel-model "Qwen2-1.5B-Instruct")
  (setq-default gptel-backend
                (gptel-make-openai "tabby"
                  :stream t
                  :protocol "http"
                  :host "localhost:18080"
                  :key "auth_df7bf9e69c29473f8e2ba10eea95a048"
                  :models '("Qwen2-1.5B-Instruct"))
                )
  (add-hook 'gptel-post-response-functions 'gptel-end-of-response))
#+end_src

*** 导出模块

#+begin_src emacs-lisp :tangle module/lim-module-ai.el :mkdirp yes
(provide 'lim-module-ai)
#+end_src

** lim-module-dev.el 模块

*** 加载 lim-dev 库

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package lim-dev :ensure nil)
#+end_src

*** 文件结构(imenu-list)

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package imenu-list
  :config
  (setq-default imenu-list-mode-line-format
        '("%e"
          (:propertize "%b" face mode-line-buffer-id) " - "
          (:eval (buffer-name imenu-list--displayed-buffer)) " "
          )))
#+end_src

*** VCS

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package magit
  :defer t
  :commands magit-status
  :config
  (setq magit-diff-refine-hunk 'all)
  (setq magit-display-buffer-function
        'magit-display-buffer-fullframe-status-v1)
  (setq magit-ediff-dwim-show-on-hunks t)
  (setq magit-log-arguments
        '("--graph" "--color" "--decorate" "--show-signature" "--follow" "-n256"))
  (setq magit-log-margin-show-committer-date t)
  (setq magit-log-remove-graph-args
        '("--follow" "--grep" "-G" "-S" "-L"))
  (setq magit-todos-insert-after'(bottom))
  )

(use-package magit-todos :after magit)

(use-package magit-delta
  :after magit
  :hook (magit-mode . magit-delta-mode)
  :config
  (setq magit-delta-default-dark-theme "ef-elea-dark"))

(use-package forge
  :after magit
  :demand t
  :custom-face
  (forge-topic-label ((t (:inherit variable-pitch :height 0.9 :width condensed :weight regular :underline nil))))
  :init (setq forge-topic-list-columns
              '(("#" 5 forge-topic-list-sort-by-number (:right-align t) number nil)
                ("Title" 60 t nil title  nil)
                ("State" 6 t nil state nil)
                ("Updated" 10 t nil updated nil))))

(use-package vc-hooks
  :ensure nil
  :config
  (setq vc-follow-symlinks t)
  (setq vc-allow-async-revert t)
  ;; (setq vc-handled-backends '(Git))
  )

(use-package diff-hl
  :hook ((after-init         . global-diff-hl-mode)
         (dired-mode         . diff-hl-dired-mode-unless-remote)
         (magit-pre-refresh  . diff-hl-magit-pre-refresh)
         (magit-post-refresh . diff-hl-magit-post-refresh))
  :config
  ;; When Emacs runs in terminal, show the indicators in margin instead.
  (unless (display-graphic-p)
    (diff-hl-margin-mode)))

(use-package ediff
  :ensure nil
  :hook ((ediff-before-setup . ediff-save-window-conf)
         (ediff-quit         . ediff-restore-window-conf))
  :config
  (defvar local-ediff-saved-window-conf nil)

  (defun ediff-save-window-conf ()
    (setq local-ediff-saved-window-conf (current-window-configuration)))

  (defun ediff-restore-window-conf ()
    (when (window-configuration-p local-ediff-saved-window-conf)
      (set-window-configuration local-ediff-saved-window-conf)))
  :custom
  (ediff-highlight-all-diffs t)
  (ediff-window-setup-function 'ediff-setup-windows-plain)
  (ediff-split-window-function 'split-window-horizontally)
  (ediff-merge-split-window-function 'split-window-horizontally))

(use-package git-gutter
  :defer t
  :config
  (global-git-gutter-mode 1))

(use-package git-gutter-fringe
  :after git-gutter
  :config
  (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))

(use-package blamer
  :defer 20
  :custom-face
  (blamer-face ((t :foreground "#7a88cf"
                   :background unspecified
                   :height 140
                   :italic t)))
  :config
  (setq blamer-idle-time 0.3)
  (setq blamer-min-offset 80)

  (global-blamer-mode 1))

(use-package git-modes
  :mode ("/.dockerignore\\'" . gitignore-mode))

(use-package browse-at-remote
  :bind (:map vc-prefix-map
              ("B" . browse-at-remote)))
#+end_src

*** EditorConfig

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package ws-butler
  :diminish
  :config
  (ws-butler-global-mode 1))

(use-package whitespace-cleanup-mode
  :diminish
  :commands whitespace-cleanup-mode)

(use-package editorconfig
  :diminish
  :config
  (setq editorconfig-trim-whitespaces-mode 'ws-butler-mode)
  (editorconfig-mode 1))
#+end_src

*** 高亮 URL

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package goto-addr
  :ensure nil
  :hook
  ((text-mode . goto-address-mode)
   (prog-mode . goto-address-prog-mode))
  :bind
  (("<mouse-2>" . ignore)
   :map goto-address-highlight-keymap
   ("<mouse-2>" . ignore))
  :config
  (setq goto-address-url-mouse-face nil)
  (setq goto-address-mail-mouse-face nil))
#+end_src

*** 加载 lim-project 库

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package lim-project
  :ensure nil
  :autoload (lim-project-root)
  :hook (after-init . global-lim-project-mode))
#+end_src

*** 加载 lim-treesit 库

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package lim-treesit :ensure nil)
#+end_src

*** 工作空间

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
;; (use-package tabspaces
;;   :hook (after-init . tabspaces-mode)
;;   :config
;;   (setq tab-bar-show nil)

;;   (setq tabspaces-use-filtered-buffers-as-default t)
;;   (setq tabspaces-default-tab "Default")
;;   (setq tabspaces-remove-to-default t)
;;   (setq tabspaces-include-buffers '("*scratch*" "*Messages*"))
;;   ;; sessions
;;   (setq tabspaces-session t)
;;   (setq tabspaces-session-auto-restore t)

;;   ;; Filter Buffers for Consult-Buffer
;;   (with-eval-after-load 'consult
;;     ;; hide full buffer list (still available with "b" prefix)
;;     (consult-customize consult--source-buffer :hidden t :default nil)
;;     ;; set consult-workspace buffer list
;;     (defvar consult--source-workspace
;;       (list :name     "Workspace Buffer"
;;             :narrow   ?w
;;             :history  'buffer-name-history
;;             :category 'buffer
;;             :state    #'consult--buffer-state
;;             :default  t
;;             :items    (lambda () (consult--buffer-query
;;                                   :predicate #'tabspaces--local-buffer-p
;;                                   :sort 'visibility
;;                                   :as #'buffer-name)))
;;       "Set workspace buffer list for consult-buffer.")
;;     (add-to-list 'consult-buffer-sources 'consult--source-workspace))
;;   )
#+end_src

*** LSP 客户端(eglot)

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package eglot
  :ensure nil
  :config
  (setq eglot-autoshutdown t))

(use-package eglot-booster
  :vc ( :url "https://github.com/jdtsmith/eglot-booster.git"
        :rev :newest)
	:after eglot
	:config	(eglot-booster-mode))

(use-package consult-eglot)

(use-package consult-eglot-embark
  :config
  (with-eval-after-load 'embark
    (consult-eglot-embark-mode)))
#+end_src

*** LSP 客户端(lsp-mode)

暂不使用 ~lsp-mode~ 转而使用 =emacs= 内置的 =eglot lsp client=

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package flycheck)

(use-package lsp-mode
  :commands (lsp lsp-format-buffer lsp-organize-imports)
  :diminish
  :init
  (setq lsp-keymap-prefix "C-c l")
  (setq lsp-log-io t)
  ;; (setq lsp-keep-workspace-alive nil)
  ;; (setq lsp-signature-auto-activate nil)
  ;; (setq lsp-progress-spinner-type 'progress-bar-filled)
  ;; (setq lsp-enable-file-watchers nil)
  ;; (setq lsp-enable-folding nil)
  ;; (setq lsp-enable-symbol-highlighting nil)
  ;; (setq lsp-enable-text-document-color nil)
  ;; (setq lsp-enable-indentation nil)
  ;; (setq lsp-enable-on-type-formatting nil)
  :hook
  ((markdown-mode yaml-mode yaml-ts-mode) . lsp-deferred)
  :config
  (defun lsp-booster--advice-json-parse (old-fn &rest args)
    "Try to parse bytecode instead of json."
    (or
     (when (equal (following-char) ?#)
       (let ((bytecode (read (current-buffer))))
         (when (byte-code-function-p bytecode)
           (funcall bytecode))))
     (apply old-fn args)))
  
  (advice-add (if (progn (require 'json)
                         (fboundp 'json-parse-buffer))
                  'json-parse-buffer
                'json-read)
              :around
              #'lsp-booster--advice-json-parse)

  (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
    "Prepend emacs-lsp-booster command to lsp CMD."
    (let ((orig-result (funcall old-fn cmd test?)))
      ;; for check lsp-server-present?
      (if (and (not test?)
               ;; see lsp-resolve-final-command, it would add extra shell wrapper
               (not (file-remote-p default-directory))
               lsp-use-plists
               ;; native json-rpc
               (not (functionp 'json-rpc-connection))
               (executable-find "emacs-lsp-booster"))
          (progn
            ;; resolve command from exec-path (in case not found in $PATH)
            (when-let ((command-from-exec-path (executable-find (car orig-result))))
              (setcar orig-result command-from-exec-path))
            (message "Using emacs-lsp-booster for %s!" orig-result)
            (cons "emacs-lsp-booster" orig-result))
        orig-result)))
  
  (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command))

(use-package lsp-mode
  :custom
  ;; we use Corfu!
  (lsp-completion-provider :none)
  :init
  (defun lim/lsp-mode-setup-completion ()
    "Configure corfu for lsp-mode"
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless flex basic))
    (add-hook 'orderless-style-dispatchers #'lim-orderless-dispatch-flex-first nil t)
    ;; Optionally configure the cape-capf-buster.
    (setq-local completion-at-point-functions (list (cape-capf-buster #'lsp-completion-at-point))))
  
  :hook
  (lsp-completion-mode . lim/lsp-mode-setup-completion))

(use-package lsp-ui :commands lsp-ui-mode)

;; (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

(use-package dap-mode :after lsp-mode :config (dap-auto-configure-mode))

(use-package consult-lsp
  :bind
  ( :map lsp-mode-map
    ("C-M-." . consult-lsp-symbols)))
#+end_src

*** LSP 客户端(lsp-bridge)

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package lsp-bridge
  :vc ( :url "https://github.com/manateelazycat/lsp-bridge.git"
        :rev :newest)
  :commands (lsp-bridge-mode lsp-bridge-code-format)
  :diminish
  :defer t
  :bind
  ( :map lsp-bridge-mode-map
    ([remap xref-find-definitions] . lsp-bridge-find-def)
    ([remap xref-find-references] . lsp-bridge-find-references)
    ([remap xref-go-back] . lsp-bridge-find-def-return))
  :init
  (setq lsp-bridge-org-babel-lang-list nil)
  :config
  (setq lsp-bridge-enable-log t)
  (setq lsp-bridge-user-langserver-dir (f-join (lim-project-root) lim-project-identifier "lspserver"))
  (setq lsp-bridge-user-multiserver-dir (f-join (lim-project-root) lim-project-identifier "multilspserver"))
  (setq lsp-bridge-enable-hover-diagnostic t))
#+end_src

*** 加载 lim-lsp 库

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package lim-lsp :ensure nil)
#+end_src

*** Bash

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package sh-script
  :ensure nil
  :hook
  (sh-mode . bash-ts-mode)
  :init
  (lim-treesit-enable 'bash))
#+end_src

*** C

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package c-ts-mode
  :ensure nil
  :init
  (lim-treesit-enable 'c))

(use-package cc-mode
  :ensure nil
  :hook (c-mode . c-ts-mode))
#+end_src

*** C++

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package c-ts-mode
  :ensure nil
  :init
  (lim-treesit-enable 'cpp)
  (add-to-list 'major-mode-remap-alist '(c-or-c++-mode . c-or-c++-ts-mode)))

(use-package cc-mode
  :ensure nil
  :hook
  (c++-mode . c-ts-mode)
  (c-or-c++-mode . c-or-c++-ts-mode))
#+end_src

*** CSS

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package css-mode
  :ensure nil
  :hook (css-mode . css-ts-mode)
  :init
  (lim-treesit-enable 'css))
#+end_src

*** CMake

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package cmake-ts-mode
  :ensure nil
  :init
  (lim-treesit-enable 'cmake))

(use-package cmake-mode
  :hook (cmake-mode . cmake-ts-mode))
#+end_src

*** CSharp

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package csharp-mode
  :ensure nil
  :hook (csharp-mode . csharp-ts-mode)
  :init
  (lim-treesit-enable 'c-sharp))
#+end_src

*** Dockerfile

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package dockerfile-ts-mode
  :init
  (lim-treesit-enable 'dockerfile))

(use-package dockerfile-mode
  :hook
  (dockerfile-mode . dockerfile-ts-mode))
#+end_src

*** ELisp

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package elisp-mode
  :ensure nil
  :functions (lim/elisp-ts-support)
  :hook (emacs-lisp-mode . lim/elisp-ts-support)
  :init
  (lim-treesit-enable 'elisp)

  (defun lim/elisp-ts-support ()
    (when (treesit-language-available-p 'elisp)
      (treesit-parser-create 'elisp)
      (treesit-major-mode-setup))))
#+end_src

*** Go

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package go-ts-mode
  :ensure nil
  :functions (lim/whitespace-no-tab lim/install-go-tools)
  ;; :mode
  ;; ("\\.go\\'" . go-ts-mode)
  :hook
  (go-ts-mode . lim-lsp-ensure-for-eglot)
  (go-ts-mode . lim/whitespace-no-tab)
  (go-ts-mode . lim/install-go-tools)
  :init
  (lim-treesit-enable 'go)
  :config
  (setq go-ts-mode-indent-offset 2)

  (defun lim/whitespace-no-tab ()
    "Buffer local `whitespace-style'."
    (make-local-variable 'whitespace-style)
    (setq whitespace-style
          '(face trailing lines-tail missing-newline-at-eof)))

  (defun lim/install-go-tools ()
    "Install some go tools."
    (call-interactively 'lim-dev-install-go-tools))

  (cl-defmethod eglot-initialization-options (server &context (major-mode go-ts-mode))
    (lim-lsp-load-lsp-options "gopls"))
  )

;; (use-package flycheck-golangci-lint
;;   :hook (go-ts-mode . flycheck-golangci-lint-setup))

;; (use-package flymake-golangci
;;   :hook (go-ts-mode . flymake-golangci-load))

;; (use-package lim-flymake-golangci
;;   :ensure nil
;;   :functions (lim/golangci-config)
;;   :hook
;;   (eglot-managed-mode . lim/golangci-config)
;;   ;; (go-mode . flymake-golangci-load-backend)
;;   (go-ts-mode . flymake-golangci-load-backend)
;;   :config
;;   (defun lim/golangci-config ()
;;     (when (derived-mode-p '(go-mode go-ts-mode))
;;       (flymake-golangci-load-backend))))

(use-package go-mode
  :hook
  (go-mode . go-ts-mode)
  :config
  (setq gofmt-command "goimports")
  (add-to-list 'lim-dev-go-tools-alist
               '(gopls . "golang.org/x/tools/gopls"))
  (add-to-list 'lim-dev-go-tools-alist
               '(godef . "github.com/rogpeppe/godef"))
  (add-to-list 'lim-dev-go-tools-alist
               '(goimports . "golang.org/x/tools/cmd/goimports"))
  (add-to-list 'lim-dev-go-tools-alist
               '(godoc . "golang.org/x/tools/cmd/godoc"))
  (add-to-list 'lim-dev-go-tools-alist
               '(golangci-lint-langserver . "github.com/nametake/golangci-lint-langserver"))
  (add-to-list 'lim-dev-go-tools-alist
               '(golangci-lint . "github.com/golangci/golangci-lint/cmd/golangci-lint")))

(use-package godoctor
  :config
  (add-to-list 'lim-dev-go-tools-alist
               '(godoctor . "github.com/godoctor/godoctor")))

(use-package go-tag
  :config
  (add-to-list 'lim-dev-go-tools-alist
               '(gomodifytags . "github.com/fatih/gomodifytags")))

(use-package go-playground)

(use-package go-fill-struct
  :config
  (add-to-list 'lim-dev-go-tools-alist
               '(fillstruct . "github.com/davidrjenni/reftools/cmd/fillstruct")))

(use-package gotest)

(use-package go-gen-test
  :config
  (add-to-list 'lim-dev-go-tools-alist
               '(gotests . "github.com/cweill/gotests/...")))

(use-package go-impl
  :config
  (add-to-list 'lim-dev-go-tools-alist
               '(impl . "github.com/josharian/impl"))
  (add-to-list 'lim-dev-go-tools-alist
               '(godoc . "golang.org/x/tools/cmd/godoc")))

(use-package go-dlv
  :config
  (add-to-list 'lim-dev-go-tools-alist
               '(dlv . "github.com/go-delve/delve/cmd/dlv")))
#+end_src

*** GoMod

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package go-ts-mode
  :ensure nil
  ;; :mode
  ;; ("go\\.mod\\'" . go-mod-ts-mode)
  :hook
  (go-mod-ts-mode . lim/whitespace-no-tab)
  :init
  (lim-treesit-enable 'gomod))

(use-package go-mode
  :hook
  (go-dot-mod-mode . go-mod-ts-mode))
#+end_src

*** Haskell

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package haskell-mode
  :functions (lim/haskell-ts-support)
  :hook
  (haskell-mode . lim/haskell-ts-support)
  (haskell-mode . lim-lsp-ensure-for-eglot)
  :init
  (lim-treesit-enable 'haskell)

  (defun lim/haskell-ts-support ()
    (treesit-parser-create 'haskell)
    (treesit-major-mode-setup)))
#+end_src

*** HTML

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package html-ts-mode
  :ensure nil
  :init (lim-treesit-enable 'html))

;; (use-package sgml-mode
;;   :ensure nil
;;   :hook ((html-mode mhtml-mode sgml-mode) . html-ts-mode))
#+end_src

*** Java

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package java-ts-mode
  :ensure nil
  :hook
  (java-ts-mode . lim-lsp-ensure-for-lsp-bridge)
  :init (lim-treesit-enable 'java)
  :config
  (setq java-ts-mode-indent-offset 4)

  ;; (cl-defmethod eglot-initialization-options (server &context (major-mode java-ts-mode))
  ;;   (lim-lsp-load-lsp-options "jdtls"))
  )

(use-package cc-mode
  :ensure nil
  :hook (java-mode . java-ts-mode))
#+end_src

*** JavaScript

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package js
  :ensure nil
  :hook
  (js-ts-mode . lim-lsp-ensure-for-eglot)
  (js-mode . js-ts-mode)
  (javascript-mode . js-ts-mode)
  :init (lim-treesit-enable 'javascript))
#+end_src

*** JSON

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package json-ts-mode
  :ensure nil
  :hook
  (json-ts-mode . lim-lsp-ensure-for-eglot)
  :init (lim-treesit-enable 'json)
  :config
  (setq json-ts-mode-indent-offset 2))

(use-package js
  :ensure nil
  :hook (js-json-mode . json-ts-mode))

(use-package json-mode
  :hook ((json-mode jsonc-mode) . json-ts-mode))

(use-package json-navigator)
#+end_src

*** Kotlin

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package kotlin-ts-mode
  :mode "\\.kts?\\'"
  :hook
  (kotlin-ts-mode . lim-lsp-ensure-for-eglot)
  :init (lim-treesit-enable 'kotlin))

;; (use-package kotlin-mode
;;   :hook (kotlin-mode . kotlin-ts-mode))
#+end_src

*** Lua

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package lua-ts-mode
  :ensure nil
  :hook
  (lua-ts-mode . lim-lsp-ensure-for-eglot)
  :init (lim-treesit-enable 'lua))
#+end_src

*** Make

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package make-mode
  :ensure nil
  :functions (lim/make-ts-support)
  :hook (makefile-mode . lim/make-ts-support)
  :init
  (lim-treesit-enable 'make)

  (defun lim/make-ts-support ()
    (treesit-parser-create 'make)
    (treesit-major-mode-setup)))
#+end_src

*** Markdown

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package markdown-ts-mode
  :commands markdown-ts-mode
  :hook
  (markdown-ts-mode . lim-lsp-ensure-for-eglot)
  :init
  (lim-treesit-enable 'markdown)
  (lim-treesit-enable 'markdown-inline)
  (add-to-list 'eglot-server-programs '(markdown-ts-mode . ("marksman" "server"))))

(use-package markdown-mode
  :functions (lim/markdown-ts-support)
  :hook (markdown-mode . lim/markdown-ts-support)
  :init
  (lim-treesit-enable 'markdown)
  (lim-treesit-enable 'markdown-inline)

  (defun lim/markdown-ts-support ()
    (treesit-parser-create 'markdown)
    (treesit-major-mode-setup)))
#+end_src

*** OCaml

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package ocaml-ts-mode
  :hook
  (ocaml-ts-mode . lim-lsp-ensure-for-eglot)
  :init
  (lim-treesit-enable 'ocaml))

(use-package tuareg
  :hook (tuareg-mode . ocaml-ts-mode))

(use-package caml
  :hook (caml-mode . ocaml-ts-mode))
#+end_src

*** Org

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes

#+end_src

*** Python

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package python
  :ensure nil
  :hook
  (python-ts-mode . lim-lsp-ensure-for-eglot)
  (python-mode . python-ts-mode)
  :init (lim-treesit-enable 'python))
#+end_src

*** PHP

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package php-ts-mode
  :vc ( :url "https://github.com/emacs-php/php-ts-mode.git"
        :rev :newest)
  :hook
  (php-ts-mode . lim-lsp-ensure-for-eglot)
  :init (lim-treesit-enable 'php))
#+end_src

*** TypeScript

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package typescript-ts-mode
  :ensure nil
  :hook
  (typescript-ts-mode . lim-lsp-ensure-for-eglot)
  :init (lim-treesit-enable 'typescript))

(use-package typescript-mode
  :hook (typescript-mode . typescript-ts-mode))
#+end_src

*** TSX

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package tsx-ts-mode
  :ensure nil
  :hook
  (tsx-ts-mode . lim-lsp-ensure-for-eglot)
  :init (lim-treesit-enable 'tsx))

;; (use-package tsx-mode
;;   :vc ( :url "https://github.com/orzechowskid/tsx-mode.el.git"
;;         :rev :newest)
;;   :hook (tsx-mode . tsx-ts-mode))
#+end_src

*** Ruby

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package ruby-ts-mode
  :ensure nil
  :hook
  (ruby-ts-mode . lim-lsp-ensure-for-eglot)
  :init (lim-treesit-enable 'ruby))

(use-package ruby-mode
  :ensure nil
  :hook (ruby-mode . ruby-ts-mode))

(use-package inf-ruby
  :hook
  (ruby-ts-mode-hook . inf-ruby-minor-mode)
  ;; Auto breakpoint
  (compilation-filter . inf-ruby-auto-enter)
  :init
  (setq inf-ruby-default-implementation "pry"))
#+end_src

*** Rust

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package rust-ts-mode
  :ensure nil
  :hook
  (rust-ts-mode . lim-lsp-ensure-for-eglot)
  :init (lim-treesit-enable 'rust)
  :config
  (setq rust-ts-mode-indent-offset 4)

  (cl-defmethod eglot-initialization-options (server &context (major-mode rust-ts-mode))
    (lim-lsp-load-lsp-options "rust-analyzer")))

(use-package rust-mode
  :defer t
  :hook (rust-mode . rust-ts-mode)
  ;; :config
  ;; (setq rust-format-on-save t)
  )

(use-package rustic
  :defer t
  :hook (rustic-mode . rust-ts-mode)
  ;; :config
  ;; (setq rustic-lsp-client 'eglot)
  ;; (setq rustic-format-on-save t)
  )
#+end_src

*** SQL

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package sql
  :ensure nil
  :functions (lim/sql-ts-support)
  :hook (sql-mode . lim/sql-ts-support)
  :init
  (setq sql-mysql-options '("--protocol=tcp" "--prompt=" "--disable-pager"))
  
  (defun lim/sql-ts-support ()
    (treesit-parser-create 'sql)
    (treesit-major-mode-setup)))
#+end_src

*** VUE

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
;; (use-package vue-ts-mode
;;   :vc ( :url "https://github.com/8uff3r/vue-ts-mode.git"
;;         :rev :newest)
;;   :hook
;;   (vue-ts-mode . lim-lsp-ensure-for-eglot)
;;   :init (lim-treesit-enable vue))

(use-package vue-mode
  :hook
  (vue-ts-mode . lim-lsp-ensure-for-lsp-bridge)
  :init (lim-treesit-enable 'vue))
#+end_src

*** YAML

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package yaml-ts-mode
  :ensure nil
  :hook
  (yaml-ts-mode . lim-lsp-ensure-for-eglot)
  :init (lim-treesit-enable 'yaml))

(use-package yaml-mode
  :hook (yaml-mode . yaml-ts-mode))
#+end_src

*** TOML

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes

#+end_src

*** Zig

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes

#+end_src

*** Web

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package emmet-mode
  :hook
  (sgml-mode . emmet-mode)
  (css-mode . emmet-mode))

(use-package web-mode
  :after (eglot emmet-mode)
  :hook
  (web-mode . lim-lsp-ensure-for-eglot)
  (web-mode . emmet-mode))
#+end_src

*** 安装所有的语法

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(use-package treesit
  :ensure nil
  :config
  (setq treesit-font-lock-level 4)

  (dolist (lang (mapcar #'car treesit-language-source-alist))
    (unless (treesit-language-available-p lang)
      (message "Install %s language grammer..." lang)
      (treesit-install-language-grammar lang))))
#+end_src

*** 导出模块

#+begin_src emacs-lisp :tangle module/lim-module-dev.el :mkdirp yes
(provide 'lim-module-dev)
#+end_src

** lim-module-keybind.el 模块

*** 加载 lim-keymap 库

#+begin_src emacs-lisp :tangle module/lim-module-keybind.el :mkdirp yes
(use-package lim-keymap :ensure nil)
#+end_src

*** 加载 lim-hydra 库

自定义按键绑定(使用 ~hydra~ 完成)

#+begin_src emacs-lisp :tangle module/lim-module-keybind.el :mkdirp yes
(use-package lim-hydra
  :ensure nil
  :bind
  (("," . lim-hydra/body)
   :map isearch-mode-map
   ("," . lim-hydra/body)))
#+end_src

*** 加载 lim-minibuffer 库

#+begin_src emacs-lisp :tangle module/lim-module-keybind.el :mkdirp yes
(use-package lim-minibuffer
  :ensure nil
  :bind
  (:map minibuffer-mode-map
   ("," . lim-minibuffer-mode-enable))
  :hook
  (minibuffer-exit . lim-minibuffer-mode-disable))
#+end_src

*** 导出模块

#+begin_src emacs-lisp :tangle module/lim-module-keybind.el :mkdirp yes
(provide 'lim-module-keybind)
#+end_src

** lim-module-input-method.el 模块

*** Rime 输入法(配置待完善)

配置待完善

PS: 使用系统的输入法 vs. 使用 =emacs= 中的输入法, 似乎二者是智者见智仁者见仁, 对于二者的优劣性个人认为还有待商榷, 等后期将系统输入法切换至 ~Rime~ 在补充配置信息

#+begin_src emacs-lisp :tangle module/lim-module-input-method.el :mkdirp yes
;; (use-package rime
;;   :config
;;   (setq default-input-method "rime")
;;   (setq rime-show-candidate 'minibuffer)
;;   (setq rime-user-data-dir (expand-file-name "librime/rime-ice" user-emacs-directory))
;;   (setq rime-emacs-module-header-root "/opt/homebrew/opt/emacs-plus@30/include")
;;   (setq rime-librime-root (expand-file-name "librime/dist" user-emacs-directory))
;;   :bind
;;   ( :map rime-mode-map
;;     ("C-," . 'rime-send-keybinding)))
#+end_src

*** 导出模块

#+begin_src emacs-lisp :tangle module/lim-module-input-method.el :mkdirp yes
(provide 'lim-module-input-method)
#+end_src

* Emacs 的自定义库

** lim-helper.el 库

#+begin_src emacs-lisp :tangle feature/lim-helper.el :mkdirp yes
;;; lim-helper.el --- The Helper for Lim -*- lexical-binding: t; coding: utf-8; -*-

;; Copyright (C) 2024 Tabuyos

;; Author: Tabuyos <tabuyos@outlook.com>
;; Maintainer: Tabuyos <tabuyos@outlook.com>
;; Created: 2024/05/20

;;; Commentary:

;; Lim's Helper Library.

;;; Code:

(require 's)
(require 'f)

(defvar lim-helper-line-regexp-alist
  '((empty . "[\s\t]*$")
    (indent . "^[\s\t]+")
    (non-empty . "^.+$")
    (list . "^\\([\s\t#*+]+\\|[0-9]+[^\s]?[).]+\\)")
    (heading . "^[=-]+"))
  "Alist of regexp types used by `lim-helper-line-regexp-p'.")

(defun lim-helper-seconds-to-minutes (seconds)
  "Convert a number representing SECONDS to MM:SS notation."
  (let ((minutes (/ seconds 60))
        (seconds (% seconds 60)))
    (format "%.2d:%.2d" minutes seconds)))

(defun lim-helper-seconds-to-hours (seconds)
  "Convert a number representing SECONDS to HH:MM:SS notation."
  (let* ((hours (/ seconds 3600))
         (minutes (/ (% seconds 3600) 60))
         (seconds (% seconds 60)))
    (format "%.2d:%.2d:%.2d" hours minutes seconds)))

;;;###autoload
(defun lim-helper-seconds-to-minutes-or-hours (seconds)
  "Convert SECONDS to either minutes or hours, depending on the value."
  (if (> seconds 3599)
      (lim-helper-seconds-to-hours seconds)
    (lim-helper-seconds-to-minutes seconds)))

;;;###autoload
(defun lim-helper-empty-buffer-p ()
  "Test whether the buffer is empty."
  (or (= (point-min) (point-max))
      (save-excursion
        (goto-char (point-min))
        (while (and (looking-at "^\\([a-zA-Z]+: ?\\)?$")
                    (zerop (forward-line 1))))
        (eobp))))

;;;###autoload
(defun lim-helper-minor-modes-active ()
  "Return list of active minor modes for the current buffer."
  (let ((active-modes))
    (mapc (lambda (m)
            (when (and (boundp m) (symbol-value m))
              (push m active-modes)))
          minor-mode-list)
    active-modes))

;;;###autoload
(defun lim-helper-truncate-lines-silently ()
  "Toggle line truncation without printing messages."
  (let ((inhibit-message t))
    (toggle-truncate-lines t)))

;;;###autoload
(defun lim-helper-ignore (&rest _)
  "Use this as override advice to make a function do nothing."
  nil)

;;;###autoload
(defun lim-helper-clear-minibuffer-message (&rest _)
  "Print an empty message to clear the echo area.
Use this as advice :after a noisy function."
  (message ""))

;;;###autoload
(defun lim-helper-window-small-p ()
  "Return non-nil if window is small.
Check if the `window-width' or `window-height' is less than
`split-width-threshold' and `split-height-threshold',
respectively."
  (or (and (numberp split-width-threshold)
           (< (window-total-width) split-width-threshold))
      (and (numberp split-height-threshold)
           (> (window-total-height) split-height-threshold))))

;;;###autoload
(defun lim-helper-window-narrow-p ()
  "Return non-nil if window is narrow.
Check if the `window-width' is less than `split-width-threshold'."
  (and (numberp split-width-threshold)
       (< (window-total-width) split-width-threshold)))

;;;###autoload
(defun lim-helper-three-or-more-windows-p (&optional frame)
  "Return non-nil if three or more windows occupy FRAME.
If FRAME is non-nil, inspect the current frame."
  (>= (length (window-list frame :no-minibuffer)) 3))

;;;###autoload
(defun lim-helper-line-regexp-p (type &optional n)
  "Test for TYPE on line.
TYPE is the car of a cons cell in
`lim--line-regexp-alist'.  It matches a regular
expression.

With optional N, search in the Nth line from point."
  (save-excursion
    (goto-char (line-beginning-position))
    (and (not (bobp))
         (or (beginning-of-line n) t)
         (save-match-data
           (looking-at
            (alist-get type lim-helper-line-regexp-alist))))))

;;;###autoload
(defun lim-helper-shell-command-with-exit-code-and-output (command &rest args)
  "Run COMMAND with ARGS.
Return the exit code and output in a list."
  (with-temp-buffer
    (list (apply 'call-process command nil (current-buffer) nil args)
          (buffer-string))))

;;;###autoload
(defun lim-helper-window-bounds ()
  "Return start and end points in the window as a cons cell."
  (cons (window-start) (window-end)))

;;;###autoload
(defun lim-helper-mode-id (&optional mode)
  "Return ID of mode.

example: (java-mode java-ts-mode) -> java."
  (s-replace "-ts" "" (s-replace "-mode" "" (symbol-name (or mode major-mode)))))

;;;###autoload
(defun lim-helper-plist-merge (&rest plists)
  "Create a single property list from all plists in PLISTS."
  (let ((rtn (copy-sequence (pop plists)))
        p v ls ov)
    (while plists
      (setq ls (pop plists))
      (while ls
        (setq p (pop ls) v (pop ls) ov (plist-get rtn p))
        (when (and (plistp v)
                   (not (null ov))
                   (plistp ov))
          (setq v (lim-helper-plist-merge ov v)))
        (setq rtn (plist-put rtn p v))))
    rtn))

;;;###autoload
(defun lim-helper-plist-delete (plist property)
  "Delete PROPERTY from PLIST.
This is in contrast to merely setting it to 0."
  (let (p)
    (while plist
      (if (not (eq property (car plist)))
          (setq p (plist-put p (car plist) (nth 1 plist))))
      (setq plist (cddr plist)))
    p))

(defun lim-helper-load-options (filepath)
  (when (and (f-exists-p filepath) (f-file-p filepath))
    (with-temp-buffer
      (insert-file-contents (f-full filepath))
      (json-parse-buffer :object-type 'plist :false-object :json-false))))

(provide 'lim-helper)

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:
#+end_src

** lim-simple.el 库

#+begin_src emacs-lisp :tangle feature/lim-simple.el :mkdirp yes
;;; lim-simple.el --- The Simple for Lim -*- lexical-binding: t; coding: utf-8; -*-

;; Copyright (C) 2024 Tabuyos

;; Author: Tabuyos <tabuyos@outlook.com>
;; Maintainer: Tabuyos <tabuyos@outlook.com>
;; Created: 2024/05/20

;;; Commentary:

;; Lim's Simple Library.

;;; Code:

(require 'lim-helper)

(defun lim-simple--mark (bounds)
  "Mark between BOUNDS as a cons cell of beginning and end positions."
  (push-mark (car bounds))
  (goto-char (cdr bounds))
  (activate-mark))

(defun lim-simple--dont-move (fn &rest args)
  "Don't move position of current point."
  (let ((current-point (point)))
    (funcall fn args)
    (goto-char current-point)))

;;;###autoload
(defun lim-simple-switch-to-minibuffer-window ()
  "Switch to minibuffer window (if active)"
  (interactive)
  (when (active-minibuffer-window)
    (select-frame-set-input-focus (window-frame (active-minibuffer-window)))
    (select-window (active-minibuffer-window))))

;;;###autoload
(defun lim-simple-mark-sexp ()
  "Mark symbolic expression at or near point.
Repeat to extend the region forward to the next symbolic
expression."
  (interactive)
  (if (and (region-active-p)
           (eq last-command this-command))
      (ignore-errors (forward-sexp 1))
    (when-let ((thing (cond
                       ((thing-at-point 'url) 'url)
                       ((thing-at-point 'sexp) 'sexp)
                       ((thing-at-point 'string) 'string)
                       ((thing-at-point 'word) 'word))))
      (lim-simple--mark (bounds-of-thing-at-point thing)))))

;;;###autoload
(defun lim-simple-compilation-buffer-name (&rest _)
  "Using `compile-command` as compilation buffer name."
  (let ((cc (s-truncate 80 compile-command))
        (pn (project-name (project-current t))))
    (concat "*" pn ":compilation:" cc "*")))

;; ;;;###autoload
;; (defun lim-simple-dired-sidebar-preview ())

;;;###autoload
(defun lim-simple-dired-sidebar-show-selected-file ()
  "Show selected file."
  (interactive)
  (if (dired-sidebar-showing-sidebar-p)
      (dired-sidebar-point-at-file
       (dired-sidebar-get-file-to-show)
       (dired-sidebar-get-dir-to-show))
    (dired-sidebar-toggle-sidebar)))

;;;###autoload
(defun lim-simple-whitespace-disable ()
  "Disable `whitespace-mode'."
  (interactive)
  (whitespace-mode -1))

;;;###autoload
(defun lim-simple-whitespace-enable ()
  "Enable `whitespace-mode'."
  (interactive)
  (whitespace-mode +1))

;;;###autoload
(defun lim-simple-deactivate-mark ()
  "Deactivate mark."
  (interactive)
  (deactivate-mark))

;;;###autoload
(defun lim-simple-insert-space ()
  "Insert space character."
  (interactive)
  (if isearch-mode
      (isearch-printing-char ? )
    (insert " ")))

;;;###autoload
(defun lim-simple-insert-comma ()
  "Insert comma character."
  (interactive)
  (if isearch-mode
      (isearch-printing-char ?,)
    (insert ",")))

;;;###autoload
(defun lim-simple-insert-comma-space ()
  "Insert comma-space characters."
  (interactive)
  (if isearch-mode
      (progn
        (isearch-printing-char ?,)
        (isearch-printing-char ? ))
    (insert ", ")))

;;;###autoload
(defun lim-simple-quit ()
  "Quit"
  (interactive)
  (if (minibufferp)
      (minibuffer-keyboard-quit)
    (keyboard-quit)))

;;;###autoload
(defun lim-simple-mc-mark-at-point ()
  "Push current point mark."
  (interactive)
  (mc/create-fake-cursor-at-point))

;;;###autoload
(defun lim-simple-mc-activate ()
  "Activate Multi Cursor."
  (interactive)
  (mc/maybe-multiple-cursors-mode))

;;;###autoload
(defun lim-simple-run-shell-command (command)
  "Run shell command."
  (let ((output-buffer (generate-new-buffer " *lim-sco*"))
        (error-buffer (generate-new-buffer " *lim-sce*"))
        (result))
    (shell-command command output-buffer error-buffer)
    (setq result (with-current-buffer output-buffer (buffer-string)))
    (kill-buffer output-buffer)
    (kill-buffer error-buffer)
    (if (length= result 0) nil result)))

;;;###autoload
(defun lim-simple-copy-line ()
  "Copy the current line to the `kill-ring'."
  (interactive)
  (copy-region-as-kill (line-beginning-position) (line-end-position)))

;;;###autoload
(defun lim-simple-duplicate-line-or-region (n)
  "Duplicate the current line or active region."
  (interactive "p")
  (if mark-active
      (lim-simple-duplicate-region n)
    (lim-simple-duplicate-line n)))

(defun lim-simple-duplicate-line (n)
  "Duplicate the current line."
  (let* ((origin (point))
         (beg (pos-bol))
         (end (pos-eol))
         (content (buffer-substring-no-properties beg end)))
    (save-excursion
      (goto-char end)
      (dotimes (_ n)
        (newline)
        (insert content)))
    (goto-char (+ origin (* (length content) n) n))))

(defun lim-simple-duplicate-region (n)
  "Duplicate the current region."
  (let* ((deactivate-mark)
         (beg (region-beginning))
         (end (region-end))
         (content (buffer-substring-no-properties beg end))
         (offset (* (length content) n)))
    (save-excursion
      (goto-char end)
      (dotimes (_ n)
        (insert content)))
    (lim-simple--mark (cons (+ beg offset) (+ end offset)))))

;;;###autoload
(defun lim-simple-kill-whole-line-or-region (&optional n)
  "Simple `kill-whole-line' version."
  (interactive "p")
  (if (use-region-p)
      (lim-simple-kill-lines-in-region (count-lines (region-beginning) (region-end)))
    (lim-simple-kill-whole-line n)))

(defun lim-simple-kill-lines-in-region (&optional n)
  "Kill lines involved in the region."
  (save-excursion
    (if (> (point) (mark))
        (exchange-point-and-mark))
    (kill-whole-line (or n (setq n 1))))
  (back-to-indentation))

(defun lim-simple-kill-whole-line (&optional n)
  "Simple `kill-whole-line' version."
  (kill-whole-line (or n (setq n 1)))
  (back-to-indentation))

;;;###autoload
(defun lim-simple-yank-replace-line-or-region ()
  "Replace line or region with latest kill.
This command can then be followed by the standard
`yank-pop' (default is bound to \\[yank-pop])."
  (interactive)
  (if (use-region-p)
      (delete-region (region-beginning) (region-end))
    (delete-region (line-beginning-position) (line-end-position)))
  (yank))

;;;###autoload
(defun lim-simple-multi-line-below ()
  "Move half a screen below."
  (interactive)
  (forward-line (floor (window-height) 2))
  (setq this-command 'scroll-up-command))

;;;###autoload
(defun lim-simple-multi-line-above ()
  "Move half a screen above."
  (interactive)
  (forward-line (- (floor (window-height) 2)))
  (setq this-command 'scroll-down-command))

;;;###autoload
(defun lim-simple-unfill-region-or-paragraph (&optional beg end)
  "Unfill paragraph or, when active, the region.
Join all lines in region delimited by BEG and END, if active,
while respecting any empty lines (so multiple paragraphs are not
joined, just unfilled).  If no region is active, operate on the
paragraph.  The idea is to produce the opposite effect of both
`fill-paragraph' and `fill-region'."
  (interactive "r")
  (let ((fill-column most-positive-fixnum))
    (if (use-region-p)
        (fill-region beg end)
      (fill-paragraph))))

(defun lim-simple--display-unsaved-buffers (buffers buffer-menu-name)
  "Produce buffer menu listing BUFFERS called BUFFER-MENU-NAME."
  (let ((old-buf (current-buffer))
        (buf (get-buffer-create buffer-menu-name)))
    (with-current-buffer buf
      (Buffer-menu-mode)
      (setq-local Buffer-menu-files-only nil
                  Buffer-menu-buffer-list buffers
                  Buffer-menu-filter-predicate nil)
      (list-buffers--refresh buffers old-buf)
      (tabulated-list-print))
    (display-buffer buf)))

(defun lim-simple--get-unsaved-buffers ()
  "Get list of unsaved buffers."
  (seq-filter
   (lambda (buffer)
     (and (buffer-file-name buffer)
          (buffer-modified-p buffer)))
   (buffer-list)))

;;;###autoload
(defun lim-simple-display-unsaved-buffers ()
  "Produce buffer menu listing unsaved file-visiting buffers."
  (interactive)
  (if-let ((unsaved-buffers (lim-simple--get-unsaved-buffers)))
      (lim-simple--display-unsaved-buffers unsaved-buffers "*Unsaved buffers*")
    (message "No unsaved buffers")))

(defun lim-simple-display-unsaved-buffers-on-exit (&rest _)
  "Produce buffer menu listing unsaved file-visiting buffers.
Add this as :before advice to `save-buffers-kill-emacs'."
  (when-let ((unsaved-buffers (lim-simple--get-unsaved-buffers)))
    (lim-simple--display-unsaved-buffers unsaved-buffers "*Unsaved buffers*")))

;;;###autoload
(defun lim-simple-copy-current-buffer-filepath ()
  "Add the current buffer's file path to the `kill-ring'."
  (declare (interactive-only t))
  (interactive)
  (if buffer-file-name
      (kill-new buffer-file-name)
    (user-error "%s is not associated with a file" (buffer-name (current-buffer)))))

;;;###autoload
(defun lim-simple-rename-file-and-buffer (name)
  "Apply NAME to current file and rename its buffer.
Do not try to make a new directory or anything fancy."
  (interactive
   (list (read-string "Rename current file: " (buffer-file-name))))
  (let ((file (buffer-file-name)))
    (if (vc-registered file)
        (vc-rename-file file name)
      (rename-file file name))
    (set-visited-file-name name t t)))

(defun lim-simple--buffer-major-mode-prompt ()
  "Prompt of `lim-simple-buffers-major-mode'.
Limit list of buffers to those matching the current
`major-mode' or its derivatives."
  (let ((read-buffer-function nil)
        (current-major-mode major-mode))
    (read-buffer
     (format "Buffer for %s: " major-mode)
     nil
     :require-match
     (lambda (pair) ; pair is (name-string . buffer-object)
       (with-current-buffer (cdr pair)
         (derived-mode-p current-major-mode))))))

;;;###autoload
(defun lim-simple-buffers-major-mode ()
  "Select BUFFER matching the current one's major mode."
  (interactive)
  (switch-to-buffer (lim-simple--buffer-major-mode-prompt)))

(defun lim-simple--buffer-vc-root-prompt ()
  "Prompt of `lim-simple-buffers-vc-root'."
  (let ((root (or (vc-root-dir)
                  (locate-dominating-file "." ".git")))
        (read-buffer-function nil))
    (read-buffer
     (format "Buffers in %s: " root)
     nil t
     (lambda (pair) ; pair is (name-string . buffer-object)
       (with-current-buffer (cdr pair) (string-match-p root default-directory))))))

;;;###autoload
(defun lim-simple-buffers-vc-root ()
  "Select buffer matching the current one's VC root."
  (interactive)
  (switch-to-buffer (lim-simple--buffer-vc-root-prompt)))

(provide 'lim-simple)

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:
#+end_src

** lim-scratch.el 库

#+begin_src emacs-lisp :tangle feature/lim-scratch.el :mkdirp yes
;;; lim-scratch.el --- Scratch buffers for editable major mode -*- lexical-binding: t; coding: utf-8; -*-

;; Copyright (C) 2024 Tabuyos

;; Author: Tabuyos <tabuyos@outlook.com>
;; Maintainer: Tabuyos <tabuyos@outlook.com>
;; Created: 2024/05/20

;;; Commentary:

;; Set up a scratch buffer for an editable major mode.

;;; Code:

(require 'lim-helper)

(defvar lim-scratch--major-mode-history nil
  "Minibuffer history of `lim-scratch--major-mode-prompt'.")

(defvar lim-scratch-default-mode 'emacs-lisp-mode
  "Scratch buffer default major mode.")

(defun lim-scratch--scratch-list-modes ()
  "List known major modes."
  (let (symbols)
    (mapatoms
     (lambda (symbol)
       (when (and (functionp symbol)
                  (or (provided-mode-derived-p symbol 'text-mode)
                      (provided-mode-derived-p symbol 'prog-mode)))
         (push symbol symbols))))
    symbols))

(defun lim-scratch--insert-comment ()
  "Insert comment for major mode, if appropriate.
Insert a comment if `comment-start' is non-nil and the buffer is
empty."
  (when (and (lim-helper-empty-buffer-p) comment-start)
    (insert (format "Scratch buffer for: %s\n\n" major-mode))
    (goto-char (point-min))
    (comment-region (line-beginning-position) (line-end-position))))

(defun lim-scratch--prepare-buffer (region &optional mode)
  "Add contents to scratch buffer and name it accordingly.

REGION is added to the contents to the new buffer.

Use the current buffer's major mode by default.  With optional
MODE use that major mode instead."
  (let ((major (or mode major-mode)))
    (with-current-buffer (pop-to-buffer (format "*%s scratch*" major))
      (funcall major)
      (lim-scratch--insert-comment)
      (goto-char (point-max))
      (unless (string-empty-p region)
        (when (lim-helper-line-regexp-p 'non-empty)
          (insert "\n\n"))
        (insert region)))))

(defun lim-scratch--major-mode-prompt ()
  "Prompt for major mode and return the choice as a symbol."
  (intern
   (completing-read "Select major mode: "
                    (lim-scratch--scratch-list-modes)
                    nil
                    :require-match
                    nil
                    'lim-scratch--major-mode-history)))

(defun lim-scratch--capture-region ()
  "Capture active region, else return empty string."
  (if (region-active-p)
      (buffer-substring-no-properties (region-beginning) (region-end))
    ""))

;;;###autoload
(defun lim-scratch-confirm-kill-buffer ()
  "Confirm before killing the *scratch* buffer."
  (interactive)
  (when (yes-or-no-p "*scratch* Don't want to be Killed, Confirm? ")
    (kill-buffer (current-buffer))))

;;;###autoload
(defun lim-scratch-buffer (&optional arg)
  "Produce a scratch buffer matching the current major mode.

With optional ARG as a prefix argument (\\[universal-argument]),
use `lim-scratch-default-mode'.

With ARG as a double prefix argument, prompt for a major mode
with completion.  Candidates are derivatives of `text-mode' or
`prog-mode'.

If region is active, copy its contents to the new scratch
buffer.

Buffers are named as *MAJOR-MODE scratch*.  If one already exists
for the given MAJOR-MODE, any text is appended to it."
  (interactive "P")
  (let ((region (lim-scratch--capture-region)))
    (pcase (prefix-numeric-value arg)
      (16 (lim-scratch--prepare-buffer region (lim-scratch--major-mode-prompt)))
      (4 (lim-scratch--prepare-buffer region lim-scratch-default-mode))
      (_ (lim-scratch--prepare-buffer region)))))

(provide 'lim-scratch)

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:
#+end_src

** lim-pair.el 库

#+begin_src emacs-lisp :tangle feature/lim-pair.el :mkdirp yes
;;; lim-pair.el --- Insert character pair around symbol or region -*- lexical-binding: t; coding: utf-8; -*-

;; Copyright (C) 2024 Tabuyos

;; Author: Tabuyos <tabuyos@outlook.com>
;; Maintainer: Tabuyos <tabuyos@outlook.com>
;; Created: 2024/05/20

;;; Commentary:

;; Insert character pair around symbol or region.

;;; Code:

(defvar lim-pair-pairs
  '((?'  :description "Single quotes"           :pair (?' . ?'))
    (?\" :description "Double quotes"           :pair (?\" . ?\"))
    (?\( :description "Parentheses"             :pair (?\( . ?\)))
    (?{  :description "Curly brackets"          :pair (?{ . ?}))
    (?\[ :description "Square brackets"         :pair (?\[ . ?\]))
    (?\< :description "Angled brackets"         :pair (?\< . ?\>))
    (?@  :description "At signs"                :pair (?@ . ?@))
    (?=  :description "Equals signs"            :pair (?= . ?=))
    (?+  :description "Plus signs"              :pair (?+ . ?+))
    (?`  :description "Backticks"               :pair lim-pair-insert-backticks)
    (?~  :description "Tildes"                  :pair (?~ . ?~))
    (?*  :description "Asterisks"               :pair (?* . ?*))
    (?/  :description "Forward slashes"         :pair (?/ . ?/))
    (?_  :description "Underscores"             :pair (?_ . ?_)))
  "Alist of pairs for use with `lim-pair-insert'.
Each element in the list is a list whose `car' is a character and
the `cdr' is a plist with a `:description' and `:pair' keys.  The
`:description' is a string used to describe the character/pair in
interactive use, while `:pair' is a cons cell referencing the
opening and closing characters.

The value of `:pair' can also be the unquoted symbol of a
function.  The function is called with no arguments and must
return a cons cell of two characters.  Examples of such functions
are `lim-pair-insert-natural-language-quotes' and
`lim-pair-insert-backticks'")

(defvar lim-pair--insert-history nil
  "Minibuffer history of `lim-pair--insert-prompt'.")

(defun lim-pair-insert-backticks ()
  "Return pair of backticks for `lim-pair-pairs'.
When the major mode is derived from `lisp-mode', return a pair of
backtick and single quote, else two backticks."
  (if (derived-mode-p 'lisp-mode 'lisp-data-mode)
      (cons ?` ?')
    (cons ?` ?`)))

(defun lim-pair--annotate (character)
  "Annotate CHARACTER with its description in `lim-pair-pairs'."
  (when-let ((char (if (characterp character) character (string-to-char character)))
             (plist (alist-get char lim-pair-pairs))
             (description (plist-get plist :description)))
    (format "  %s" description)))

(defun lim-pair--get-pair (character)
  "Get the pair of corresponding to CHARACTER."
  (when-let ((char (if (characterp character) character (string-to-char character)))
             (plist (alist-get char lim-pair-pairs))
             (pair (plist-get plist :pair)))
    pair))

(defun lim-pair--insert-prompt ()
  "Prompt for pair among `lim-pair-pairs'."
  (let ((default (car lim-pair--insert-history))
        (candidates (mapcar (lambda (char) (char-to-string (car char))) lim-pair-pairs))
        (completion-extra-properties `(:annotation-function ,#'lim-pair--annotate)))
    (completing-read
     (format-prompt "Select pair" default)
     candidates nil :require-match
     nil 'lim-pair--insert-history default)))

(defun lim-pair--insert-bounds ()
  "Return boundaries of symbol at point or active region."
  (if (region-active-p)
      (cons (region-beginning) (region-end))
    (let ((bounds (bounds-of-thing-at-point 'symbol)))
      (if (null bounds)
          (cons (point) (point))
        bounds))))

(defun lim-pair--insert-pair (pair n)
  "Insert N number of PAIR around object or direct at point."
  (let* ((bounds (lim-pair--insert-bounds))
         (point (point))
         (beg (car bounds))
         (end (1+ (cdr bounds)))
         (characters (if (functionp pair) (funcall pair) pair)))
    (dotimes (_ n)
      (save-excursion
        (goto-char beg)
        (insert (car characters))
        (goto-char end)
        (setq end (1+ end))
        (insert (cdr characters))))
    (goto-char (+ point n))))

;;;###autoload
(defun lim-pair-insert (pair n)
  "Insert N number of PAIR around object or direct at point.
PAIR is one among `lim-pair-pairs'.  The object at point is
either a symbol or the boundaries of the active region.  N is a
numeric prefix argument, defaulting to 1 if none is provided in
interactive use."
  (interactive
   (list
    (lim-pair--get-pair (lim-pair--insert-prompt))
    (prefix-numeric-value current-prefix-arg)))
  (lim-pair--insert-pair pair n))

;;;###autoload
(defun lim-pair-quick-insert (n)
  "Quick insert N number of PAIR around object or direct at point."
  (interactive "p")
  (lim-pair--insert-pair (lim-pair--get-pair last-input-event) n))

(defvar lim-pair-mode-map
  (let ((keymap (make-sparse-keymap)))
    (mapcar (lambda (entry) (keymap-set keymap (char-to-string (car entry)) #'lim-pair-quick-insert)) lim-pair-pairs)
    keymap))

;;;###autoload
(define-minor-mode lim-pair-mode
  "Pair minor mode."
  :init-value nil
  :global nil
  :keymap lim-pair-mode-map)

;;;###autoload
(define-globalized-minor-mode global-lim-pair-mode lim-pair-mode
  (lambda ()
    (unless (minibufferp)
      (lim-pair-mode 1))))

(provide 'lim-pair)

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:
#+end_src

** lim-packaage.el 库

该库预设了许多的软件包源, 集成三方包管理器等

#+begin_src emacs-lisp :tangle feature/lim-package.el :mkdirp yes
;;; lim-package.el --- The Package Manager for Lim -*- lexical-binding: t; coding: utf-8; -*-

;; Copyright (C) 2024 Tabuyos

;; Author: Tabuyos <tabuyos@outlook.com>
;; Maintainer: Tabuyos <tabuyos@outlook.com>
;; Created: 2024/05/20

;;; Commentary:

;; Lim's Package Manager Library.
;; Base on use-package

;;; Code:

(defvar tsinghua-source
  '(("gnu-tsinghua" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
    ("gnu-devel-tsinghua" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu-devel/")
    ("melpa-tsinghua" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
    ("stable-melpa-tshinghua" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/stable-melpa/")
    ("nongnu-tsinghua" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/")
    ("nongnu-devel-tsinghua" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu-devel/"))
  "Using TsingHua University Source.")

(defvar tencent-source
  '(("gnu-tencent" . "http://mirrors.cloud.tencent.com/elpa/gnu/")
    ("melpa-tencent" . "http://mirrors.cloud.tencent.com/elpa/melpa/")
    ("stable-melpa-tencent" . "http://mirrors.cloud.tencent.com/elpa/stable-melpa/")
    ("org-tencent" . "http://mirrors.cloud.tencent.com/elpa/org/"))
  "Using Tencent Cloud Source.")

(defvar emacs-china-source
  '(("gnu-emacs-china" . "http://elpa.emacs-china.org/gnu/")
    ("melpa-emacs-china" . "http://elpa.emacs-china.org/melpa/")
    ("stable-melpa-emacs-china" . "http://elpa.emacs-china.org/stable-melpa/")
    ("org-emacs-china" . "http://elpa.emacs-china.org/org/"))
  "Using Emacs China Source.")

(defvar tsinghua-source-priorities
  '(("gnu-tsinghua" . 3)
    ("melpa-tsinghua" . 2)
    ("nongnu-tsinghua" . 1))
  "Using TsingHua University Source Priorities")

(defvar tencent-source-priorities
  '(("gnu-tencent" . 3)
    ("melpa-tencent" . 2)
    ("org-tencent" . 1))
  "Using Tencent Cloud Source Priorities")

(defvar emacs-china-source-priorities
  '(("gnu-emacs-china" . 3)
    ("melpa-emacs-china" . 2)
    ("org-emacs-china" . 1))
  "Using Emacs China Source Priorities")

(defvar quelpa-use-package-repo-url
  "https://github.com/quelpa/quelpa-use-package.git"
  "This URL is the repo or quelpa-use-package.")

(defvar quelpa-download-url
  "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el"
  "This URL is for downloading Quelpa.")

(defvar straight-download-url
  "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
  "This URL is for downloading Quelpa.")

(defvar elpaca-installer-version 0.7)

(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))

(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))

(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))

(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))

(defvar archives-dir
  (expand-file-name "elpa" user-emacs-directory)
  "User's package directory, default value is `package-user-dir'.")

(defvar archives-source
  tsinghua-source
  "User's customize archives source, default value is `tsinghua-source'.")

(defvar archives-priorities
  tsinghua-source-priorities
  "User's customize archives priorities, default value is `tsinghua-source-priorities'.")

(unless (bound-and-true-p bootstrap-version)
  (defvar bootstrap-version nil
    "Straight Bootstrap Version."))

(unless (bound-and-true-p package-user-dir)
  (defvar package-user-dir nil
    "package user's directory for elpa."))

(unless (bound-and-true-p package-archives)
  (defvar package-archives nil
    "package archives address."))

;;;###autoload
(defun integration-diminish ()
  "Integration Diminish."
  (use-package diminish))

;;;###autoload
(defun integration-el-get ()
  "Integration El Get."
  (use-package el-get))

;;;###autoload
(defun integration-quelpa ()
  "Integration Quelpa."
  (use-package quelpa
    :hook
    ((after-init . (lambda () (quelpa-upgrade-all-maybe))))
    :config
    (setq quelpa-upgrade-interval 7)
    (use-package quelpa-use-package)
    ;; enable advice
    (quelpa-use-package-activate-advice)))

;;;###autoload
(defun integration-straight ()
  "Integration Straight."
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-temp-buffer
        (url-insert-file-contents straight-download-url)
        (eval-buffer)))
    (load bootstrap-file nil 'nomessage)))

;;;###autoload
(defun integration-elpaca ()
  "Integration Elpaca."
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                   ,@(when-let ((depth (plist-get order :depth)))
                                                       (list (format "--depth=%d" depth) "--no-single-branch"))
                                                   ,(plist-get order :repo) ,repo))))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  (elpaca elpaca-use-package (elpaca-use-package-mode 1)))

(provide 'lim-package)

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:
#+end_src

** lim-soothing.el 库

#+begin_src emacs-lisp :tangle feature/lim-soothing.el :mkdirp yes
;;; lim-soothing.el --- Lim Soothing -*- lexical-binding: t; coding: utf-8; -*-

;; Copyright (C) 2024 Tabuyos

;; Author: Tabuyos <tabuyos@outlook.com>
;; Maintainer: Tabuyos <tabuyos@outlook.com>
;; Created: 2024/05/20

;;; Commentary:

;; Soothing

;;; Code:

(require 'newcomment)

(defvar lim-soothing-comment-timestamp-format-concise "%F"
  "Specifier for date in `lim-soothing-comment-timestamp-keyword'.
Refer to the doc string of `format-time-string' for the available
options.")

(defvar lim-soothing-comment-timestamp-format-verbose "%F %T %z"
  "Like `lim-soothing-comment-timestamp-format-concise', but longer.")

(defvar lim-soothing-comment-keywords
  '("TODO" "NOTE" "REVIEW" "FIXME")
  "List of strings with keywords used by `lim-soothing-comment-timestamp-keyword'.")

(defvar lim-soothing-comment--keyword-hist '()
  "Minibuffer history of `lim-soothing-comment--keyword-prompt'.")

(defun lim-soothing-comment--keyword-prompt (keywords)
  "Prompt for candidate among KEYWORDS (per `lim-soothing-comment-timestamp-keyword')."
  (let ((def (car lim-soothing-comment--keyword-hist)))
    (completing-read
     (format "Select keyword [%s]: " def)
     keywords nil nil nil 'lim-soothing-comment--keyword-hist def)))

(defun lim-soothing-comment--format-date (verbose)
  "Format date using `format-time-string'.
VERBOSE has the same meaning as `lim-soothing-comment-timestamp-keyword'."
  (format-time-string
   (if verbose
       lim-soothing-comment-timestamp-format-verbose
     lim-soothing-comment-timestamp-format-concise)))

(defun lim-soothing-comment--timestamp (keyword &optional verbose)
  "Format string using current time and KEYWORD.
VERBOSE has the same meaning as `lim-soothing-comment-timestamp-keyword'."
  (format "%s %s: " keyword (lim-soothing-comment--format-date verbose)))

(defun lim-soothing-comment--format-comment (string)
  "Format comment STRING per `lim-soothing-comment-timestamp-keyword'.
STRING is a combination of a keyword and a time stamp."
  (concat comment-start
          (make-string comment-add (string-to-char comment-start))
          comment-padding
          string
          comment-end))

(defun lim-soothing-comment--maybe-newline ()
  "Call `newline' if current line is not empty.
Check `lim-soothing-comment-timestamp-keyword' for the rationale."
  (unless (looking-at "[\s\t]*$")
    (save-excursion (newline))))

;;;###autoload
(defun lim-soothing-comment (n)
  "Comment N lines, defaulting to the current one.
When the region is active, comment its lines instead."
  (interactive "p")
  (comment-normalize-vars)
  (cond ((looking-at "[\s-]*$") (comment-dwim nil))
        (t (comment-line n))))

;;;###autoload
(defun lim-soothing-comment-timestamp-keyword (keyword &optional verbose)
  "Add timestamped comment with KEYWORD."
  (interactive
   (list
    (lim-soothing-comment--keyword-prompt lim-soothing-comment-keywords)
    current-prefix-arg))
  (let ((string (lim-soothing-comment--timestamp keyword verbose))
        (beg (point)))
    (cond ((looking-at "[\s\t]*$")
           (insert (lim-soothing-comment--format-comment string)))
          ((eq beg (line-beginning-position))
           (insert (lim-soothing-comment--format-comment string))
           (indent-region beg (point))
           (lim-soothing-comment--maybe-newline))
          (t
           (comment-indent t)
           (insert (concat " " string))))))

;;;###autoload
(defun lim-soothing-smart-beginning-of-line ()
  "Move point to `beginning-of-line'. If repeat command it cycle
position between `back-to-indentation' and `beginning-of-line'."
  (interactive "^")
  (if (and (eq last-command 'lim-soothing-smart-beginning-of-line)
           (not (bolp)))
      (beginning-of-line)
    (back-to-indentation)))

;;;###autoload
(defun lim-soothing-newline-on-below ()
  "Move to the next line and then opens a line.

See also `newline-and-indent'."
  (interactive)
  (end-of-line)
  (newline-and-indent))

;;;###autoload
(defun lim-soothing-newline-on-above ()
    "Move to the prev line and then opens a line.

See also `newline-and-indent'."
  (interactive)
  (beginning-of-line)
  (newline-and-indent)
  (previous-line)
  (indent-according-to-mode))

;;;###autoload
(defun soothin-join-line (&optional arg beg end)
  "Join this line and next line, or join all lines in the region if it is active.

ee also `delete-indentation'."
  (interactive
   (progn (barf-if-buffer-read-only)
          (cons (if (use-region-p) nil 1)
                (and (use-region-p)
                     (list (region-beginning) (region-end))))))
  (delete-indentation arg beg en))

(defun lim-soothing-marker-is-point-p (marker)
  "Test if marker is current point"
  (and (eq (marker-buffer marker) (current-buffer))
       (= (marker-position marker) (point))))

(defun lim-soothing-push-mark-maybe ()
  "Push mark into `global-mark-ring' if mark head or tail is not current location"
  (if (not global-mark-ring) (error "global-mark-ring is empty")
    (unless (or (lim-soothing-marker-is-point-p (car global-mark-ring))
                (lim-soothing-marker-is-point-p (car (reverse global-mark-ring))))
      (push-mark))))

;;;###autoload
(defun lim-soothing-backward-global-mark ()
  "Use `pop-global-mark', pushing current point if not on ring."
  (interactive)
  (lim-soothing-push-mark-maybe)
  (when (lim-soothing-marker-is-point-p (car global-mark-ring))
    (call-interactively 'pop-global-mark))
  (call-interactively 'pop-global-mark))

;;;###autoload
(defun lim-soothing-forward-global-mark ()
  "Hack `pop-global-mark' to go in reverse, pushing current point if not on ring."
  (interactive)
  (soothingpush-mark-maybe)
  (setq global-mark-ring (nreverse global-mark-ring))
  (when (lim-soothing-marker-is-point-p (car global-mark-ring))
    (call-interactively 'pop-global-mark))
  (call-interactively 'pop-global-mark)
  (setq global-mark-ring (nreverse global-mark-ring)))

(defun lim-soothing--enable ()
    "Enable Soothing."
  (message "enable soothing."))

(defun lim-soothing--disable ()
    "Disable Soothing."
  (message "disable soothing."))

(defvar lim-soothing-mode-map
  (let ((keymap (make-sparse-keymap)))
    keymap)
  "Keymap for Soothing.")

;;;###autoload
(define-minor-mode lim-soothing-mode
  "Soothing Minor Mode.

Provide key-binding of edit"
  :init-value nil
  :global nil
  :lighter " Oo"
  :keymap lim-soothing-mode-map)

;;;###autoload
(define-globalized-minor-mode global-lim-soothing-mode lim-soothing-mode
  (lambda ()
    (unless (minibufferp)
      (lim-soothing-mode 1))))

(provide 'lim-soothing)

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:
#+end_src

** lim-modeline.el 库

#+begin_src emacs-lisp :tangle feature/lim-modeline.el :mkdirp yes
;;; lim-modeline.el --- The Modeline for Lim's Appearance -*- lexical-binding: t; coding: utf-8; -*-

;; Copyright (C) 2024 Tabuyos

;; Author: Tabuyos <tabuyos@outlook.com>
;; Maintainer: Tabuyos <tabuyos@outlook.com>
;; Created: 2024/05/20

;;; Commentary:

;; Lim's Modeline Module

;;; Code:

(declare-function nerd-icons-icon-for-mode "nerd-icons" (mode &rest arg-overrides))
(declare-function vc-git--symbolic-ref "vc-git" (file))
(declare-function vc-git-working-revision "vc-git" (file))
(declare-function flymake--severity "flymake" (type))
(declare-function flymake-diagnostic-type "flymake" (diag))

(with-eval-after-load 'eglot
  (setq mode-line-misc-info
        (delete '(eglot--managed-mode (" [" eglot--mode-line-format "] ")) mode-line-misc-info)))

(defface lim-modeline-indicator nil
  "Generic face used for indicators that have a background.
Modify this face to, for example, add a :box attribute to all
relevant indicators (combines nicely with my `spacious-padding'
package).")

(defface lim-modeline-indicator-red
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :foreground "#880000")
    (((class color) (min-colors 88) (background dark))
     :foreground "#ff9f9f")
    (t :foreground "red"))
  "Face for modeline indicators (e.g. see my `notmuch-indicator').")

(defface lim-modeline-indicator-red-bg
  '((default :inherit (bold lim-modeline-indicator))
    (((class color) (min-colors 88) (background light))
     :background "#aa1111" :foreground "white")
    (((class color) (min-colors 88) (background dark))
     :background "#ff9090" :foreground "black")
    (t :background "red" :foreground "black"))
  "Face for modeline indicators with a background.")

(defface lim-modeline-indicator-green
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :foreground "#005f00")
    (((class color) (min-colors 88) (background dark))
     :foreground "#73fa7f")
    (t :foreground "green"))
  "Face for modeline indicators (e.g. see my `notmuch-indicator').")

(defface lim-modeline-indicator-green-bg
  '((default :inherit (bold lim-modeline-indicator))
    (((class color) (min-colors 88) (background light))
     :background "#207b20" :foreground "white")
    (((class color) (min-colors 88) (background dark))
     :background "#77d077" :foreground "black")
    (t :background "green" :foreground "black"))
  "Face for modeline indicators with a background.")

(defface lim-modeline-indicator-yellow
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :foreground "#6f4000")
    (((class color) (min-colors 88) (background dark))
     :foreground "#f0c526")
    (t :foreground "yellow"))
  "Face for modeline indicators (e.g. see my `notmuch-indicator').")

(defface lim-modeline-indicator-yellow-bg
  '((default :inherit (bold lim-modeline-indicator))
    (((class color) (min-colors 88) (background light))
     :background "#805000" :foreground "white")
    (((class color) (min-colors 88) (background dark))
     :background "#ffc800" :foreground "black")
    (t :background "yellow" :foreground "black"))
  "Face for modeline indicators with a background.")

(defface lim-modeline-indicator-blue
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :foreground "#00228a")
    (((class color) (min-colors 88) (background dark))
     :foreground "#88bfff")
    (t :foreground "blue"))
  "Face for modeline indicators (e.g. see my `notmuch-indicator').")

(defface lim-modeline-indicator-blue-bg
  '((default :inherit (bold lim-modeline-indicator))
    (((class color) (min-colors 88) (background light))
     :background "#0000aa" :foreground "white")
    (((class color) (min-colors 88) (background dark))
     :background "#77aaff" :foreground "black")
    (t :background "blue" :foreground "black"))
  "Face for modeline indicators with a background.")

(defface lim-modeline-indicator-magenta
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :foreground "#6a1aaf")
    (((class color) (min-colors 88) (background dark))
     :foreground "#e0a0ff")
    (t :foreground "magenta"))
  "Face for modeline indicators (e.g. see my `notmuch-indicator').")

(defface lim-modeline-indicator-magenta-bg
  '((default :inherit (bold lim-modeline-indicator))
    (((class color) (min-colors 88) (background light))
     :background "#6f0f9f" :foreground "white")
    (((class color) (min-colors 88) (background dark))
     :background "#e3a2ff" :foreground "black")
    (t :background "magenta" :foreground "black"))
  "Face for modeline indicators with a background.")

(defface lim-modeline-indicator-cyan
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :foreground "#004060")
    (((class color) (min-colors 88) (background dark))
     :foreground "#30b7cc")
    (t :foreground "cyan"))
  "Face for modeline indicators (e.g. see my `notmuch-indicator').")

(defface lim-modeline-indicator-cyan-bg
  '((default :inherit (bold lim-modeline-indicator))
    (((class color) (min-colors 88) (background light))
     :background "#006080" :foreground "white")
    (((class color) (min-colors 88) (background dark))
     :background "#40c0e0" :foreground "black")
    (t :background "cyan" :foreground "black"))
  "Face for modeline indicators with a background.")

(defface lim-modeline-indicator-gray
  '((t :inherit shadow))
  "Face for modeline indicators (e.g. see my `notmuch-indicator').")

(defface lim-modeline-indicator-gray-bg
  '((default :inherit (bold lim-modeline-indicator))
    (((class color) (min-colors 88) (background light))
     :background "#808080" :foreground "white")
    (((class color) (min-colors 88) (background dark))
     :background "#a0a0a0" :foreground "black")
    (t :inverse-video t))
  "Face for modeline indicatovrs with a background.")

(defface lim-modeline-light
  '((t :weight light))
  "Face for modeline font weight: light")

(defface lim-modeline-indicator-hydra-status-face
  '((t :inherit lim-modeline-indicator-magenta))
  "Face for hydra status.")

(defsubst lim-modeline-column (pos)
  "Get the column of the position `POS'."
  (save-excursion (goto-char pos)
                  (current-column)))

(defun lim-modeline--calc-face (&rest args)
  "Calc the face according to the selection state of the window."
  (if (mode-line-window-selected-p)
      (plist-get args :active)
    (plist-get args :inactive)))

(defun lim-modeline--check-hydra ()
  "Check hydra status."
  (and (bound-and-true-p lim-hydra-modeline-names)
       (mode-line-window-selected-p)
       (not (null (car lim-hydra-modeline-names)))))

(defun lim-modeline--calc-inherit-from-text (text)
  "Calc the `:inherit' property of the face in the text."
  (plist-get (get-text-property 0 'face text) :inherit))

(defun lim-modeline--major-mode-indicator ()
  "Return appropriate propertized mode line indicator for the major mode."
  (let ((indicator (cond
                    ((assoc major-mode nerd-icons-mode-icon-alist)
                     (nerd-icons-icon-for-mode major-mode))
                    ((derived-mode-p 'text-mode) (char-to-string #xF15C))
                    ((derived-mode-p 'prog-mode) (char-to-string #xE6B1))
                    ((derived-mode-p 'comint-mode) (char-to-string #xF120))
                    ((derived-mode-p 'compilation-mode) (char-to-string #xF085))
                    (t "X"))))
    (propertize indicator
                'face (lim-modeline--calc-face
                       :active (lim-modeline--calc-inherit-from-text indicator)
                       :inactive 'shadow))))

(defun lim-modeline--major-mode-name ()
  "Return current mode's name."
  (cond ((consp mode-name) (car-safe mode-name))
        ((stringp mode-name) mode-name)
        (t (capitalize (string-replace "-mode" "" (symbol-name major-mode))))))

(defun lim-modeline--major-mode-name-with-hydra ()
  "Return current mode's name and add hydra's status face."
  (if (lim-modeline--check-hydra)
      (propertize (lim-modeline--major-mode-name) 'face 'lim-modeline-indicator-hydra-status-face)
    (lim-modeline--major-mode-name)))

(defun lim-modeline--buffer-identification-face ()
  "Return appropriate face or face list for `lim-modeline-buffer-identification'."
  (let ((file (buffer-file-name)))
    (cond
     ((and (mode-line-window-selected-p)
           file
           (buffer-modified-p))
      '(italic mode-line-buffer-id))
     ((and file (buffer-modified-p))
      'italic)
     ((mode-line-window-selected-p)
      'mode-line-buffer-id))))

(defun lim-modeline--vc-branch-name (file backend)
  "Return capitalized VC branch name for FILE with BACKEND."
  (when-let ((rev (vc-working-revision file backend))
             (branch (or (vc-git--symbolic-ref file)
                         (substring rev 0 7))))
    (capitalize branch)))

(defun lim-modeline--git-diffstat (file)
  "Return shortened Git diff numstat for FILE."
  (when-let* ((output (shell-command-to-string (format "git diff --numstat %s" file)))
              (stats (split-string output "[\s\t]" :omit-nulls "[\s\f\t\n\r\v]+"))
              (added (nth 0 stats))
              (deleted (nth 1 stats)))
    (cond
     ((and (equal added "0") (equal deleted "0"))
      "")
     ((and (not (equal added "0")) (equal deleted "0"))
      (propertize (format "+%s" added) 'face 'shadow))
     ((and (equal added "0") (not (equal deleted "0")))
      (propertize (format "-%s" deleted) 'face 'shadow))
     (t
      (propertize (format "+%s -%s" added deleted) 'face 'shadow)))))

(defun lim-modeline--vc-text (file branch &optional face)
  "Prepare text for Git controlled FILE, given BRANCH.
With optional FACE, use it to propertize the BRANCH."
  (concat
   "  "
   (propertize (char-to-string #xE0A0) 'face 'shadow)
   " "
   (propertize branch 'face face)
   " "
   (lim-modeline--git-diffstat file)
   ))

(defun lim-modeline--vc-details (file branch &optional face)
  "Return Git BRANCH details for FILE, truncating it if necessary.
The string is truncated if the width of the window is smaller
than `split-width-threshold'."
  (lim-modeline--vc-text file branch face))

(defvar lim-modeline--vc-faces
  '((added . vc-locally-added-state)
    (edited . vc-edited-state)
    (removed . vc-removed-state)
    (missing . vc-missing-state)
    (conflict . vc-conflict-state)
    (locked . vc-locked-state)
    (up-to-date . vc-up-to-date-state))
  "VC state faces.")

(defun lim-modeline--vc-get-face (key)
  "Get face from KEY in `lim-modeline--vc-faces'."
  (alist-get key lim-modeline--vc-faces 'up-to-date))

(defun lim-modeline--vc-face (file backend)
  "Return VC state face for FILE with BACKEND."
  (lim-modeline--vc-get-face (vc-state file backend)))

(defun lim-modeline--flymake-counter (type)
  "Compute number of diagnostics in buffer with TYPE's severity.
TYPE is usually keyword `:error', `:warning' or `:note'."
  (let ((count 0))
    (dolist (d (flymake-diagnostics))
      (when (= (flymake--severity type)
               (flymake--severity (flymake-diagnostic-type d)))
        (cl-incf count)))
    ;; (when (cl-plusp count)
    ;;   (number-to-string count))
    (number-to-string count)))

(defmacro lim-modeline--flymake-type (type indicator &optional face)
  "Return function that handles Flymake TYPE with stylistic INDICATOR and FACE."
  `(defun ,(intern (format "lim-modeline--flymake-%s" type)) ()
     (when-let ((count (lim-modeline--flymake-counter
                        ,(intern (format ":%s" type)))))
       (concat
        ;; (propertize ,indicator 'face 'shadow)
        ,indicator
        " "
        (propertize count 'face ',(or face type))
        " "
        ))))

(lim-modeline--flymake-type error (nerd-icons-mdicon "nf-md-close_circle_outline" :face 'error))
(lim-modeline--flymake-type warning (nerd-icons-mdicon "nf-md-alert_outline" :face 'warning))
(lim-modeline--flymake-type note (nerd-icons-mdicon "nf-md-information_outline" :face 'success) success)

;; buffer-status
(defvar-local lim-modeline-buffer-status
    '(:eval
      (cond (buffer-read-only
             (propertize (format " %s " (char-to-string #xE0A2))
                         'face (lim-modeline--calc-face
                                :active 'lim-modeline-indicator-gray
                                :inactive 'shadow)))
            ((buffer-modified-p)
             (propertize (format " %s " (char-to-string #x25C9))
                         'face (lim-modeline--calc-face
                                :active 'lim-modeline-indicator-red
                                :inactive 'shadow)))
            (t
             (propertize (format " %s " (char-to-string #x25CE))
                         'face (lim-modeline--calc-face
                                :active 'lim-modeline-indicator-green
                                :inactive 'shadow)))))
  "Render current bufffer status: `read-only', `modified' or `default'")
(put 'lim-modeline-buffer-status 'risky-local-variable t)

;; window-number
(defvar-local lim-modeline-window-number
    '(:eval
      (let ((num
             (cond
              ((bound-and-true-p ace-window-display-mode)
               (aw-update)
               (window-parameter (selected-window) 'ace-window-path))
              ((bound-and-true-p winum-mode)
               (setq winum-auto-setup-mode-line nil)
               (winum-get-number-string))
              ((bound-and-true-p window-numbering-mode)
               (window-numbering-get-number-string))
              (t ""))))
        (when (length> num 0) (format " %s " num)))))
(put 'lim-modeline-window-number 'risky-local-variable t)

;; kbd-macro
(defvar-local lim-modeline-kbd-macro
    '(:eval
      (when (and (mode-line-window-selected-p) defining-kbd-macro)
        (propertize " KMacro " 'face 'lim-modeline-indicator-blue))))
(put 'lim-modeline-kbd-macro 'risky-local-variable t)

;; narrow
(defvar-local lim-modeline-narrow
    '(:eval
      (when (and (mode-line-window-selected-p)
                 (buffer-narrowed-p)
                 (not (derived-mode-p 'Info-mode 'help-mode 'special-mode 'message-mode)))
        (propertize " Narrow " 'face 'lim-modeline-indicator-cyan))))
(put 'lim-modeline-narrow 'risky-local-variable t)

;; hydra
(defvar-local lim-modeline-hydra
    '(:eval
      (when (lim-modeline--check-hydra)
        (let ((name (car lim-hydra-modeline-names)))
          (cond ((stringp name)
               (propertize (concat " " name " ")
                           'face 'lim-modeline-indicator-hydra-status-face))
              ((fboundp name)
               (propertize (concat " " (name) " ")
                           'face 'lim-modeline-indicator-hydra-status-face)))
          ))))
(put 'lim-modeline-hydra 'risky-local-variable t)

;; remote-status
(defvar-local lim-modeline-remote-status
    '(:eval
      (when (file-remote-p default-directory)
        (propertize " @ " 'face 'lim-modeline-indicator-red))))
(put 'lim-modeline-remote-status 'risky-local-variable t)

;; window-dedicated-status
(defvar-local lim-modeline-window-dedicated-status
    '(:eval
      (when (window-dedicated-p)
        (propertize " = " 'face 'lim-modeline-indicator-gray))))
(put 'lim-modeline-window-dedicated-status 'risky-local-variable t)

;; input-method
(defvar-local lim-modeline-input-method
    '(:eval
      (when current-input-method-title
        (propertize (format " %s " current-input-method-title)
                    'face 'lim-modeline-indicator-green))))
(put 'lim-modeline-input-method 'risky-local-variable t)

;; major-mode
(defvar-local lim-modeline-major-mode
    (list
     " "
     (propertize "%[" 'face 'lim-modeline-indicator-red)
     '(:eval
       (concat
        (lim-modeline--major-mode-indicator)
        "  "
        (lim-modeline--major-mode-name)
        ;; (lim-modeline--major-mode-name-with-hydra)
        ))
     (propertize "%]" 'face 'lim-modeline-indicator-red)
     ))
(put 'lim-modeline-major-mode 'risky-local-variable t)

;; minor-mode
(defvar-local lim-modeline-minor-mode
    '((:propertize (" -" minor-mode-alist) face (italic lim-modeline-light))))
(put 'lim-modeline-minor-mode 'risky-local-variable t)

;; cursor-position
(defvar-local lim-modeline-cursor-position
    '("  "
      (:eval (cond
              ((and line-number-mode column-number-mode) "%l:%c")
              (line-number-mode "L%l")
              (column-number-mode "C%c")
              (t "")))
      " %p"))
(put 'lim-modeline-cursor-position 'risky-local-variable t)

;; selection
(defvar-local lim-modeline-selection
    '(:eval
      (when mark-active
        (propertize
         (let* ((beg (region-beginning))
                (end (region-end))
                (lines (count-lines beg (min end (point-max)))))
           (concat
            "  "
            (cond ((bound-and-true-p rectangle-mark-mode)
                   (let ((cols (abs (- (lim-modeline-column end)
                                       (lim-modeline-column beg)))))
                     (format "%dx%dB" lines cols)))
                  ((> lines 1)
                   (format "%dC %dL" (- end beg) lines))
                  (t
                   (format "%dC" (- end beg))))))
         'face 'lim-modeline-indicator-cyan))))
(put 'lim-modeline-selection 'risky-local-variable t)

;; encoding
(defvar-local lim-modeline-encoding
    '(:eval
      (propertize
       (concat
        "  "
        ;; eol type
        (let ((eol (coding-system-eol-type buffer-file-coding-system)))
          (pcase eol
            (0 "LF ")
            (1 "CRLF ")
            (2 "CR ")
            (_ "")))
        ;; coding system
        (let* ((sys (coding-system-plist buffer-file-coding-system))
               (cat (plist-get sys :category))
               (sym (if (memq cat '(coding-category-undecided coding-category-utf-8))
                        'utf-8
                      (plist-get sys :name))))
          (upcase (symbol-name sym)))
        " "
        )
       'face '(italic lim-modeline-light)
       )
      )
  )
(put 'lim-modeline-encoding 'risky-local-variable t)

;; buffer-id
(defvar-local lim-modeline-buffer-id
    '(:eval
      (propertize (concat " " (buffer-name))
                  'face (lim-modeline--buffer-identification-face))))
(put 'lim-modeline-buffer-id 'risky-local-variable t)

;; buffer-id-with-breadcrumb
(defvar-local lim-modeline-buffer-id-with-breadcrumb
    '(:eval
      (unless (bound-and-true-p breadcrumb-local-mode) lim-modeline-buffer-id)))
(put 'lim-modeline-buffer-id-with-breadcrumb 'risky-local-variable t)

;; process
(defvar-local lim-modeline-process
    (list '(" " mode-line-process)))
(put 'lim-modeline-process 'risky-local-variable t)

;; vc
(defvar-local lim-modeline-vc
    '(:eval
      (when-let* (((mode-line-window-selected-p))
                  (file (buffer-file-name))
                  (backend (vc-backend file))
                  ((vc-git-registered file))
                  (branch (lim-modeline--vc-branch-name file backend))
                  (face (lim-modeline--vc-face file backend)))
        (lim-modeline--vc-details file branch face))))
(put 'lim-modeline-vc 'risky-local-variable t)

;; eglot
(defvar-local lim-modeline-eglot
    '(:eval
      (when (and (featurep 'eglot) (mode-line-window-selected-p))
        (list
         " "
         '(eglot--managed-mode eglot--mode-line-format)))))
(put 'lim-modeline-eglot 'risky-local-variable t)

;; flymake
(defvar-local lim-modeline-flymake
    '(:eval
      (when (and (bound-and-true-p flymake-mode)
                 (mode-line-window-selected-p))
        (list
         " "
         ;; See the calls to the macro `lim-modeline--flymake-type'
         '(:eval (lim-modeline--flymake-error))
         '(:eval (lim-modeline--flymake-warning))
         '(:eval (lim-modeline--flymake-note))))))
(put 'lim-modeline-flymake 'risky-local-variable t)

;; misc-info
(defvar-local lim-modeline-misc-info
    '(:eval
      (when (mode-line-window-selected-p)
        (list
         " "
         mode-line-misc-info))))
(put 'lim-modeline-misc-info 'risky-local-variable t)

;; notmuch-indicator
(defvar-local lim-modeline-notmuch-indicator
    '(notmuch-indicator-mode
      (" "
       (:eval (when (mode-line-window-selected-p)
                notmuch-indicator--counters)))))
(put 'lim-modeline-notmuch-indicator 'risky-local-variable t)


(with-eval-after-load 'spacious-padding
  (defun lim/modeline-spacious-indicators ()
    "Set box attribute to `'lim-modeline-indicator' if spacious-padding is enabled."
    (if (bound-and-true-p spacious-padding-mode)
        (set-face-attribute 'lim-modeline-indicator nil :box t)
      (set-face-attribute 'lim-modeline-indicator nil :box 'unspecified)))

  ;; Run it at startup and then afterwards whenever
  ;; `spacious-padding-mode' is toggled on/off.
  (lim/modeline-spacious-indicators)

  (add-hook 'spacious-padding-mode-hook #'lim/modeline-spacious-indicators))

(provide 'lim-modeline)

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:
#+end_src

** lim-org.el 库

#+begin_src emacs-lisp :tangle feature/lim-org.el :mkdirp yes
;;; lim-org.el --- Lim's Customized Org -*- lexical-binding: t; coding: utf-8; -*-

;; Copyright (C) 2024 Tabuyos

;; Author: Tabuyos <tabuyos@outlook.com>
;; Maintainer: Tabuyos <tabuyos@outlook.com>
;; Created: 2024/05/20

;;; Commentary:

;; Org for Lim

;;; Code:

(declare-function org-html-export-as-html "org")

;;;###autoload
(defun lim-org-ox-html ()
  "Streamline HTML export."
  (interactive)
  (org-html-export-as-html nil nil nil t nil))

;;;###autoload
(defun lim-org-ox-texinfo ()
  "Streamline Info export."
  (interactive)
  (org-texinfo-export-to-info))

;;;; org-id

(declare-function org-entry-get "org")
(declare-function org-id-new "org")
(declare-function org-entry-put "org")

;; Original idea:
;; <https://writequit.org/articles/emacs-org-mode-generate-ids.html>.
(defun lim-org--id-get ()
  "Get the CUSTOM_ID of the current entry.
If the entry already has a CUSTOM_ID, return it as-is, else
create a new one."
  (let* ((pos (point))
         (id (org-entry-get pos "CUSTOM_ID")))
    (if (and id (stringp id) (string-match-p "\\S-" id))
        id
      (setq id (org-id-new "h"))
      (org-entry-put pos "CUSTOM_ID" id)
      id)))

(declare-function org-map-entries "org")

;;;###autoload
(defun lim-org-id-headlines ()
  "Add missing CUSTOM_ID to all headlines in current file."
  (interactive)
  (org-map-entries
   (lambda () (lim-org--id-get))))

;;;###autoload
(defun lim-org-id-headline ()
  "Add missing CUSTOM_ID to headline at point."
  (interactive)
  (lim-org--id-get))

(declare-function diary-sunrise-sunset "solar")

;; Sunrise
;;;###autoload
(defun lim-org-diary-sunrise ()
  (let ((dss (diary-sunrise-sunset)))
    (with-temp-buffer
      (insert dss)
      (goto-char (point-min))
      (while (re-search-forward " ([^)]*)" nil t)
        (replace-match "" nil nil))
      (goto-char (point-min))
      (search-forward ",")
      (buffer-substring (point-min) (match-beginning 0)))))

;; Sunset
;;;###autoload
(defun lim-org-diary-sunset ()
  (let ((dss (diary-sunrise-sunset))
        start end)
    (with-temp-buffer
      (insert dss)
      (goto-char (point-min))
      (while (re-search-forward " ([^)]*)" nil t)
        (replace-match "" nil nil))
      (goto-char (point-min))
      (search-forward ", ")
      (setq start (match-end 0))
      (search-forward " at")
      (setq end (match-beginning 0))
      (goto-char start)
      (capitalize-word 1)
      (buffer-substring start end))))

(provide 'lim-org)

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:
#+end_src

** lim-search.el 库

#+begin_src emacs-lisp :tangle feature/lim-search.el :mkdirp yes
;;; lim-search.el --- Lim's Search Mode -*- lexical-binding: t; coding: utf-8; -*-

;; Copyright (C) 2024 Tabuyos

;; Author: Tabuyos <tabuyos@outlook.com>
;; Maintainer: Tabuyos <tabuyos@outlook.com>
;; Created: 2024/05/20

;;; Commentary:

;; Search for Lim

;;; Code:

(defvar lim-search-mode-quit-hook nil
  "Function(s) to call after terminating lim's search.")

(defun lim-search-dehighlight ()
  "Dehighlight search."
  (isearch-dehighlight)
  (lazy-highlight-cleanup t))

;;;###autoload
(defun lim-search-mode-quit ()
  "Disable `lim-search-mode'."
  (interactive)
  (lim-search-mode 0)
  (run-hooks 'lim-search-mode-quit-hook))

;;;###autoload
(defun lim-search-mode-toggle ()
  "Toggle `lim-search-mode'."
  (interactive)
  (lim-search-mode 'toggle))

(defvar-keymap lim-search-mode-map
  "p" #'isearch-repeat-backward
  "n" #'isearch-repeat-forward
  "<escape>" #'lim-search-mode-quit)

;;;###autoload
(define-minor-mode lim-search-mode
  "Lim's search mode."
  :init-value nil
  :global nil
  :lighter " Qs"
  :keymap lim-search-mode-map)

(provide 'lim-search)

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:
#+end_src

** lim-hydra.el 库

#+begin_src emacs-lisp :tangle feature/lim-hydra.el :mkdirp yes
;;; lim-hydra.el --- Lim's Key using hydra -*- lexical-binding: t; coding: utf-8; -*-

;; Copyright (C) 2024 Tabuyos

;; Author: Tabuyos <tabuyos@outlook.com>
;; Maintainer: Tabuyos <tabuyos@outlook.com>
;; Created: 2024/05/20

;;; Commentary:

;; (key-binding (kbd "RET"))
;; (key-binding (read-kbd-macro "M-x abc RET"))

;; Hydra key for Lim

;;; Code:

(require 'lim-helper)
(require 'defrepeater)
(require 'hydra)

(defvar lim-hydra-default-helpful-title "Help"
  "Default helpful title for `lim-hydra-key'.")

(defvar lim-hydra-default-quit-key '("ESC" "SPC")
  "Default quit key for `lim-hydra-key'.")

(defvar lim-hydra-default-quit-key-no-spc '("ESC")
  "Default quit key for `lim-hydra-key'.")

(defvar lim-hydra-default-quit-key-no-esc '("SPC")
  "Default quit key for `lim-hydra-key'.")

(defvar lim-hydra-default-quit-key-no-esc-spc '()
  "Default quit key for `lim-hydra-key'.")

(defvar lim-hydra-default-quit-key-only-esc '("ESC")
  "Default quit key for `lim-hydra-key'.")

(defvar lim-hydra-default-quit-key-only-spc '("SPC")
  "Default quit key for `lim-hydra-key'.")

(defvar lim-hydra-default-show-hide-key "C-h"
  "Default show hide key for `lim-hydra-key'.")

(defvar lim-hydra-default-foreign-keys 'warn
  "Default foreign-keys")

(defvar lim-hydra-icon-alpha-c (nerd-icons-mdicon "nf-md-alpha_c"))
(defvar lim-hydra-icon-alpha-g (nerd-icons-mdicon "nf-md-alpha_g"))
(defvar lim-hydra-icon-alpha-h (nerd-icons-mdicon "nf-md-alpha_h"))
(defvar lim-hydra-icon-alpha-i (nerd-icons-mdicon "nf-md-alpha_i"))
(defvar lim-hydra-icon-alpha-m (nerd-icons-mdicon "nf-md-alpha_m"))
(defvar lim-hydra-icon-alpha-q (nerd-icons-mdicon "nf-md-alpha_q"))
(defvar lim-hydra-icon-alpha-r (nerd-icons-mdicon "nf-md-alpha_r"))
(defvar lim-hydra-icon-alpha-s (nerd-icons-mdicon "nf-md-alpha_s"))
(defvar lim-hydra-icon-alpha-t (nerd-icons-mdicon "nf-md-alpha_t"))
(defvar lim-hydra-icon-alpha-x (nerd-icons-mdicon "nf-md-alpha_x"))
(defvar lim-hydra-icon-alpha-z (nerd-icons-mdicon "nf-md-alpha_z"))
(defvar lim-hydra-icon-gears (nerd-icons-faicon "nf-fa-gears"))

(defvar lim-hydra-call-chains nil
  "hydra body func call-chain, format: (from . to).

Reset chain when first-call hydra.")

(defvar lim-hydra-modeline-bg-colors nil)

(defvar lim-hydra-modeline-names nil)

(defun lim-hydra-configure (name)
  "Configure current called hydra fun.

NAME is a symbol."
  (let ((light-bg "#ffc0cb")
        ;; (dark-bg "#8470ff")
        (dark-bg "#778899")
        (bg (face-background 'mode-line-active))
        (sn (symbol-name name)))
    (push bg lim-hydra-modeline-bg-colors)
    (push sn lim-hydra-modeline-names)
    (pcase (frame--current-background-mode (selected-frame))
      ('light (set-face-background 'mode-line-active light-bg))
      ('dark (set-face-background 'mode-line-active dark-bg)))
    ))

(defun lim-hydra-unconfigure ()
  "Unconfigure hydra info."
  (let ((bg (car lim-hydra-modeline-bg-colors)))
    (set-face-background 'mode-line-active bg)
    (pop lim-hydra-modeline-bg-colors)
    (pop lim-hydra-modeline-names)
    ))

(defun lim-hydra-toggle-helpful ()
  "Toggle hydra helpful info."
  (if hydra-is-helpful (setq hydra-is-helpful nil) (setq hydra-is-helpful t)))

(defun lim-hydra-alist-remove-all (sequence keys &optional test-fn)
  "Remove all keys from sequence."
  (let (seq)
    (dolist (elt sequence)
      (unless (seq-contains-p keys (car elt) test-fn)
        (setq seq (append seq (list elt)))))
    seq))

(defun lim-hydra--run-fun (fn)
  "Run Function."
  (cond ((commandp fn)
         (call-interactively fn))
        ((and (symbolp fn) (fboundp fn))
         (funcall fn))
        ((functionp fn)
         (funcall fn))
        (t (funcall `(lambda () ,fn)))))

(defun lim-hydra--run-key (key)
  "Run Key."
  (call-interactively (key-binding (read-kbd-macro key))))

(defun lim-hydra-go-to (body-fn)
  "Call `body-fn' from current body."
  (when body-fn
    (push (cons hydra-curr-body-fn body-fn) lim-hydra-call-chains)
    (funcall body-fn)))

(defun lim-hydra-go-back (&rest fns)
  "Call these `fns' and go back to previous body fn.

Must check if the current body-fn matches,
the cdr value of the first element in the stack."
  (dolist (fn fns) (lim-hydra--run-fun fn))
  (when-let* ((pair (car lim-hydra-call-chains))
              (from (car-safe pair))
              (to (cdr-safe pair))
              (_ (equal hydra-curr-body-fn to)))
    (pop lim-hydra-call-chains)
    (call-interactively from)))

(defun lim-hydra-go-back-by-pop ()
  "Go back previous body fn by element that pop from stack."
  (interactive)
  (lim-hydra-go-back))

(defun lim-hydra-reset-chain ()
  "Reset body func call-chain."
  (interactive)
  (setq lim-hydra-call-chains nil))

(defun lim-hydra-run-remapping (command)
  "Run remapping func/self."
  (lim-hydra--run-fun (or (command-remapping command) command)))

;;;###autoload
(defun lim-hydra-next-line ()
  "Next line."
  (interactive)
  (lim-hydra-run-remapping 'next-line))

;;;###autoload
(defun lim-hydra-prev-line ()
  "Prev line."
  (interactive)
  (lim-hydra-run-remapping 'previous-line))

;;;###autoload
(defun lim-hydra-enter ()
  "Enter."
  (interactive)
  (lim-hydra--run-key "RET"))

;;;###autoload
(defun lim-hydra-tab ()
  "Enter."
  (interactive)
  (lim-hydra--run-key "TAB"))

;;;###autoload
(defun lim-hydra-yank ()
  "Yank."
  (interactive)
  (lim-hydra--run-key "C-y"))

;;;###autoload
(defun lim-hydra-save ()
  "Enter."
  (interactive)
  (lim-hydra-run-remapping 'save-buffer))

(defmacro lim-hydra-pretty-define (name body heads-plist)
  (declare (indent defun))
  (let* ((show-hide-key (or (plist-get body :show-hide-key) lim-hydra-default-show-hide-key))
         (foreign-keys (or (plist-get body :foreign-keys) lim-hydra-default-foreign-keys))
         (quit-key (or (plist-get body :quit-key) lim-hydra-default-quit-key))
         (body-pre (plist-get body :body-pre))
         (post (plist-get body :post))
         (separator (or (plist-get body :separator) "-"))
         (no-help (plist-get body :no-help))
         (no-config (plist-get body :no-config))

         (body-pre (if no-config body-pre `(progn (lim-hydra-configure ',name) ,body-pre)))
         (post (if no-config post `(progn (lim-hydra-unconfigure) ,post)))

         (new-body (if show-hide-key (lim-helper-plist-delete body :show-hide-key) body))
         (new-body (if no-help (lim-helper-plist-delete body :no-help) body))
         (new-body (if no-config (lim-helper-plist-delete body :no-config) body))

         (new-body (plist-put new-body :foreign-keys foreign-keys))
         (new-body (plist-put new-body :quit-key quit-key))
         (new-body (plist-put new-body :body-pre body-pre))
         (new-body (plist-put new-body :post post))
         (new-body (plist-put new-body :separator separator))

         (new-heads (let* ((heads (eval heads-plist))
                           (helpful (plist-get heads lim-hydra-default-helpful-title 'string=)))
                      (unless no-help
                        (plist-put
                         heads
                         lim-hydra-default-helpful-title
                         (append helpful
                                 `((,show-hide-key (lim-hydra-toggle-helpful) "helpful")))
                         'string=))
                      heads)))
    `(pretty-hydra-define ,name ,new-body ,new-heads)))

(defvar lim-hydra-entries
  '( :-> (forward-char "->")
     :-< (backward-char "<-")
     :bol (crux-move-beginning-of-line "|<-")
     :ori-bol (move-beginning-of-line "|<-")
     :eol (move-end-of-line "->|")
     :bob (beginning-of-buffer "ToB")
     :eob (end-of-buffer "ToE")
     :->> (forward-word "->>")
     :-<< (backward-word "<<-")
     :-^ (lim-hydra-prev-line "-^")
     :-v (lim-hydra-next-line "-v")
     :ori-^ (previous-line "-^")
     :ori-v (next-line "-v")
     :jump (avy-goto-char-timer "Jump")
     :ctb (recenter-top-bottom "C-T-B")
     :del-> (delete-forward-char "Del ->")
     :del-< (delete-backward-char "Del <-")
     :e-del-< (backward-delete-char-untabify "Del <-")
     :del->> (kill-word "Del ->>")
     :del-<< (backward-kill-word "Del <<-")
     :kwl/r (lim-simple-kill-whole-line-or-region "KWL/R")
     :dl/r (lim-simple-duplicate-line-or-region "DL/R")
     :format (format-all-region-or-buffer "Format")
     :kill-line (kill-line "Kill Line")
     :newline (crux-smart-open-line "Newline")
     :newline-above (crux-smart-open-line-above "Newline Above")
     :join-line (crux-top-join-line "Join Line")
     :undo (undo "Undo")
     :v-undo (vundo "V-Undo")
     :n-page (scroll-up-command "Next Page")
     :p-page (scroll-down-command "Prev Page")
     :mark (set-mark-command "Set Mark")
     :mark-all (mark-whole-buffer "Mark All")
     :c-mark (lim-simple-deactivate-mark "Cancel Mark")
     :x-mark (exchange-point-and-mark "Point <-> Mark")
     :copy (kill-ring-save "Copy")
     :cut (kill-region "Cut")
     :yank (yank "Yank")
     :yank-pop (consult-yank-pop "Yank Pop")
     :f-sexp (forward-sexp "F Sexp")
     :b-sexp (backward-sexp "B Sexp")
     :eval-expr (eval-expression "Eval Expr")
     :mmh (major-mode-hydra "M-M-H")
     :insert-comma (lim-simple-insert-comma ",")
     :insert-space (lim-simple-insert-space " ")
     :insert-comma-space (lim-simple-insert-comma-space ", ")
     :command (execute-extended-command "Command")
     :compile (compile "Compile")
     :save (lim-hydra-save "Save")
     :ori-save (save-buffer "Save")
     :save-other (save-some-buffers "Save Other")
     :rename (rename-buffer "Rename")
     :kill (kill-buffer "Kill")
     :kill-other (kill-matching-buffers "Kill Other")
     :kill-current (kill-current-buffer "Kill Current")
     :go-back (lim-hydra-go-back-by-pop "Go Back")
     :re-buffer (revert-buffer "Revert Buffer")
     :quit (lim-simple-quit "Quit")
     :kb-quit (keyboard-quit "Keyboard Quit")
     :mb-kb-quit (minibuffer-keyboard-quit "Minibuffer Quit")
     :enter (lim-hydra-enter "Enter")
     :tab (lim-hydra-tab "TAB")
     :capital (capitalize-dwim "Capitalize")
     :upcase (upcase-dwim "Up Case")
     :downcase (downcase-dwim "Down Case")
     :m-scratch (lim-scratch-buffer "Major Scratch")
     :prev-buffer (previous-buffer "Prev Buffer")
     :next-buffer (next-buffer "Next Buffer")
     :pop-to-buffer (pop-to-buffer "Pop Buffer")

     :move-up (move-dup-move-lines-up "Move Up")
     :move-down (move-dup-move-lines-down "Move Down")

     :mouse-set-point (mouse-set-point "Point")
     :mouse-drag-region (mouse-drag-region "Drag Region")
     :mouse-set-region (mouse-set-region "Set Region")
     :mwheel-scroll (mwheel-scroll "Point")
     
     :hs-toggle (hs-toggle-hiding "HS Toggle")
     :hs-hide-all (hs-hide-all "HS Hide All")
     :hs-show-all (hs-show-all "HS Show All")

     :dired-sidebar-toggle (dired-sidebar-toggle-sidebar "Dired")
     :dired-sidebar-jump (dired-sidebar-jump-to-sidebar "Jump Dired")
     :dired-sidebar-show-selected-file (lim-simple-dired-sidebar-show-selected-file "Show File")

     :e-expand (expreg-expand "Expand")
     :e-contract (expreg-contract "Contract")

     :vertico-next (vertico-next "Next")
     :vertico-prev (vertico-previous "Prev")
     :vertico-enter (vertico-directory-enter "Enter")

     :xref-find-def (xref-find-definitions "Find Def")
     :xref-find-ref (xref-find-references "Find Ref")
     :xref-go-back (xref-go-back "Go Backward")
     :xref-go-for (xref-go-forward "Go Forward")

     :view-mode (view-mode "View")
     :ws-mode (whitespace-mode "Whitespace")
     :wsc-mode (whitespace-cleanup-mode "Whitespace Cleanup")
     :rb-mode (rainbow-mode "Rainbow")
     :fm-mode (flymake-mode "Flymake")
     :repeat-mode (repeat-mode "Repeat")
     :winner-mode (winner-mode "Winner")

     :lim-search-mode (lim-search-mode "Lim's Search")

     :search (isearch-forward "Search")
     :search-symbol (isearch-forward-symbol-at-point "Search Symbol")
     :search-thing (isearch-forward-thing-at-point "Search Thing")
     :search-edit (isearch-edit-string "Edit")
     :search-exit (isearch-exit "Exit")
     :search-abort (isearch-abort "Abort")
     :search-repeat-f (isearch-repeat-forward "Forward Search")
     :search-repeat-b (isearch-repeat-backward "Backward Search")

     :ai-gptel (gptel "Interactive Chat")
     :ai-gptel-send (gptel-send "Send The Line")

     :describe-keymap (describe-keymap "Describe Keymap")
     :describe-face (describe-face "Describe Face")
     :describe-prefix-bindings (describe-prefix-bindings "Describe Prefix")
     :describe-key (describe-key "Describe Key")
     :describe-mode (describe-mode "Describe Mode")
     :describe-char (describe-char "Describe Char")
     :describe-function (describe-function "Describe Function")
     :describe-variable (describe-variable "Describe Variable")

     :cap (completion-at-point "Completion")
     :cap-tag (complete-tag "Complete Tag")

     :so-put (symbol-overlay-put "Put SO")
     :so-remove-all (symbol-overlay-remove-all "RM SO")

     :project-switch (project-switch-project "Switch Project")
     :project-switch-buffer (project-switch-to-buffer "Switch Buffer")
     :project-forget (project-forget-project "Forget Project")
     :project-find (project-find-file "Find File")
     :project-compile (project-compile "Compile")

     :open-file (find-file "Open File")
     :open-recent (recentf-open "Recent Open")

     :consult-x (consult-mode-command "Command")
     :consult-search (consult-isearch-history "Search")
     :consult-buffer (consult-buffer "Buffer")
     :consult-project-buffer (consult-project-buffer "Project Buffer")
     :consult-bookmark (consult-bookmark "Bookmark")
     :consult-man (consult-man "Man")
     :consult-goto-line (consult-goto-line "Go to Line")
     :consult-outline (consult-outline "Outline")
     :consult-mark (consult-mark "Go to Mark")
     :consult-imenu (consult-imenu "IMenu")
     :consult-find (consult-find "Find")
     :consult-grep (consult-grep "Grep")
     :consult-ripgrep (consult-ripgrep "RG")
     :consult-line (consult-line "Search Line")
     :consult-git-grep (consult-git-grep "Git Grep")
     :consult-locate (consult-locate "Locate")

     :embark-act (embark-act "Action")
     :embark-dwim (embark-dwim "Dwim")
     :embark-bindings (embark-bindings "Bindings")
     :embark-collect (embark-collect "Collect")
     :embark-export (embark-export "Export")

     :mc-mark-point (lim-simple-mc-mark-at-point "Mark Point")
     :mc-activate (lim-simple-mc-activate "Activate")
     :mc-edit-lines (mc/edit-lines "Edit Lines")
     :mc-edit-eol (mc/edit-ends-of-lines "Edit End of Lines")
     :mc-edit-bol (mc/edit-beginnings-of-lines "Edit Beg of Lines")
     :mc-mark-nl (mc/mark-next-like-this "Mark Next Line")
     :mc-mark-pl (mc/mark-previous-like-this "Mark Prev Line")
     :mc-mark-inregion (mc/mark-all-like-this "Mark in Region")
     :mc-mark-dwim (mc/mark-all-like-this-dwim "Mark in Dwim")
     :mc-mark-infunc (mc/mark-all-like-this-in-defun "Mark in Func")

     :window-switch (other-window "Switch")
     :window-delete (delete-window "Delete")
     :window-delete-other (delete-other-windows "Delete Other")
     :window-ace (ace-window "Ace")
     :window-ace-select (ace-select-window "Ace Select")
     :window-ace-swap (ace-swap-window "Ace Swap")

     :window-swap-left (windmove-swap-states-left "Swap Left")
     :window-swap-right (windmove-swap-states-right "Swap Right")
     :window-swap-down (windmove-swap-states-down "Swap Down")
     :window-swap-up (windmove-swap-states-up "Swap Up")

     :window-move-left (windmove-left "Move Left")
     :window-move-right (windmove-right "Move Right")
     :window-move-down (windmove-down "Move Down")
     :window-move-up (windmove-up "Move Up")

     :window-resize-eh (enlarge-window-horizontally "Enlarge H")
     :window-resize-sh (shrink-window-horizontally "Shrink H")
     :window-resize-ev (enlarge-window "Enlarge V")
     :window-resize-sv (shrink-window "Shrink V")
     :window-resize-b (balance-windows "Balance")

     :window-split-right (split-window-right "Split Right")
     :window-split-below (split-window-below "Split Below")
     :window-split-right-root (split-root-window-right "Split Right(Root)")
     :window-split-below-root (split-root-window-below "Split Below(Root)")

     :winner-redo (winner-redo "Redo")
     :winner-undo (winner-undo "Undo")


     :root ((limhydragt 'lim-hydra/body) "Root")


     :body-c ((limhydragt 'lim-hydra-c/body) "(C)offee")
     :body-g ((limhydragt 'lim-hydra-g/body) "(G)olden")
     :body-h ((limhydragt 'lim-hydra-h/body) "(H)appy")
     :body-m ((limhydragt 'lim-hydra-m/body) "(M)ore")
     :body-i ((limhydragt 'lim-hydra-i/body) "(I)ce")
     :body-q ((limhydragt 'lim-hydra-q/body) "(Q)uick")
     :body-r ((limhydragt 'lim-hydra-r/body) "(R)ecipe")
     :body-s ((limhydragt 'lim-hydra-s/body) "(S)atan")
     :body-t ((limhydragt 'lim-hydra-t/body) "(T)oggle")
     :body-x ((limhydragt 'lim-hydra-x/body) "(X)")
     :body-z ((limhydragt 'lim-hydra-z/body) "(Z)eta")

     :body-c-cap ((limhydragt 'lim-hydra-c-cap/body) "C-A-P")
     
     :body-s-es ((limhydragt 'lim-hydra-s-es/body) "Enhance Search")
     :body-s-find ((limhydragt 'lim-hydra-s-find/body) "Find")
     
     :body-m-ai ((limhydragt 'lim-hydra-m-ai/body) "AI")
     :body-m-consult ((limhydragt 'lim-hydra-m-consult/body) "Consult Navigate")
     :body-m-describe ((limhydragt 'lim-hydra-m-describe/body) "Describe")
     :body-m-mc ((limhydragt 'lim-hydra-m-mc/body) "Multi Cursor")
     :body-m-visual ((limhydragt 'lim-hydra-m-visual/body) "Visual")
     :body-m-visual-vertico ((limhydragt 'lim-hydra-m-visual-vertico/body) "Vertico")
     :body-m-buffer ((limhydragt 'lim-hydra-m-buffer/body) "Buffer")
     :body-m-project ((limhydragt 'lim-hydra-m-project/body) "Project")
     :body-m-embark ((limhydragt 'lim-hydra-m-embark/body) "Embark")
     :body-m-open ((limhydragt 'lim-hydra-m-open/body) "Open")

     :body-m-window ((limhydragt 'lim-hydra-m-window/body) "Window Management")
     :body-m-window-resize ((limhydragt 'lim-hydra-m-window-resize/body) "Window Resize")
     :body-m-window-split ((limhydragt 'lim-hydra-m-window-split/body) "Window Split")
     )
  "Hydra entries table.")

(defun lim-hydra-build (prop key &rest args)
  "Build Entry."
  (apply #'lim-hydra--build prop key nil args))

(defun lim-hydra-build-back (prop key &rest args)
  "Build Entry."
  (apply #'lim-hydra--build prop key t args))

(defun lim-hydra--build (prop key back &rest args)
  "Build Entry."
  (let ((entry (plist-get lim-hydra-entries prop)))
    (unless entry (user-error "not found %s" prop))
    (if back
        `(,key (lim-hydra-go-back ',(car entry)) ,(cadr entry) ,@args)
      `(,key ,@entry ,@args))))

(defalias 'limhydrab 'lim-hydra-build)
(defalias 'limhydrabk 'lim-hydra-build-back)
(defalias 'limhydragt 'lim-hydra-go-to)
(defalias 'limhydragb 'lim-hydra-go-back)

(lim-hydra-pretty-define lim-hydra
  ( :title (s-concat lim-hydra-icon-gears " My Key Bindings")
    :body-pre (lim-hydra-reset-chain)
    :foreign-keys run
    :quit-key ("SPC"))
  `("Moving"
    (,(limhydrab :bol "a")
     ,(limhydrab :eol "e")
     ,(limhydrab :-< "b")
     ,(limhydrab :-> "f")
     ,(limhydrab :-v "n")
     ,(limhydrab :-^ "p")
     ,(limhydrab :ctb "l")
     ,(limhydrab :n-page "v")
     ,(limhydrab :b-sexp "[")
     ,(limhydrab :f-sexp "]")
     ,(limhydrab :jump ";" :exit t))

    "S-Moving"
    (,(limhydrab :bob "A")
     ,(limhydrab :eob "E")
     ,(limhydrab :-<< "B")
     ,(limhydrab :->> "F")
     ,(limhydrab :p-page "V"))

    "Broken"
    (,(limhydrab :del-> "d")
     ,(limhydrab :e-del-< "DEL")
     ,(limhydrab :del->> "D")
     ,(limhydrab :del-<< "C-<backspace>")
     ,(limhydrab :newline "j")
     ,(limhydrab :join-line "J")
     ,(limhydrab :kill-line "k")
     ,(limhydrab :newline-above "o")
     ,(limhydrab :v-undo "u" :exit t)
     ,(limhydrab :move-up "P")
     ,(limhydrab :move-down "N")
     ,(limhydrab :undo "/"))

    "Go"
    (,(limhydrab :xref-find-def "M-.")
     ,(limhydrab :xref-find-ref "C-M-.")
     ,(limhydrab :xref-go-back "M-,")
     ,(limhydrab :xref-go-for "C-M-,")
     ,(limhydrab :hs-toggle "C-."))

    "C/V"
    (,(limhydrab :copy "w")
     ,(limhydrab :yank "y")
     ,(limhydrab :yank-pop "Y"))

    "To"
    (,(limhydrab :body-c "c" :exit t)
     ,(limhydrab :body-g "g" :exit t)
     ,(limhydrab :body-h "h" :exit t)
     ,(limhydrab :body-i "i" :exit t)
     ,(limhydrab :body-m "m" :exit t)
     ,(limhydrab :body-q "q" :exit t))

    "To"
    (,(limhydrab :body-r "r" :exit t)
     ,(limhydrab :body-s "s" :exit t)
     ,(limhydrab :body-t "t" :exit t)
     ,(limhydrab :body-x "x" :exit t)
     ,(limhydrab :body-z "z" :exit t))

    "Help"
    (,(limhydrab :insert-comma "," :exit t)
     ,(limhydrab :mmh "." :exit t)
     ,(limhydrab :tab "TAB" :exit t)
     ,(limhydrab :enter "RET" :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-c
  (:title "Coffee")
  `("Latte"
    (,(limhydrab :command "c" :exit t)
     ,(limhydrab :compile "C" :exit t)
     ,(limhydrabk :dl/r "d" :exit t)
     ,(limhydrabk :format "f" :exit t)
     ,(limhydrabk :format "l" :exit t)
     ,(limhydrabk :kwl/r "k" :exit t))

    "Switch"
    (,(limhydrab :consult-buffer "e" :exit t))

    "Cappuccino"
    (,(limhydrab :save "s" :exit t)
     ,(limhydrab :save-other "S" :exit t))

    "Mocha"
    (,(limhydrab :eval-expr "x" :exit t)
     ,(limhydrab :cap "TAB" :exit t))

    "To"
    (,(limhydrab :body-c-cap "p" :exit t))

    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-g
  (:title "Golden")
  `("Copilot"
    (,(limhydrab :quit "g" :exit t)
     ,(limhydrab :kb-quit "G" :exit t)
     ,(limhydrab :mb-kb-quit "m" :exit t)
     ,(limhydrab :re-buffer "r" :exit t))

    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-h
  (:title "Happy")
  `("Dance"
    (,(limhydrab :mark-all "h" :exit t)
     ,(limhydrab :hs-hide-all "f")
     ,(limhydrab :hs-show-all "s")
     ,(limhydrab :ctb "l"))
    
    "To"
    (,(limhydrab :body-c "c" :exit t)
     ,(limhydrab :body-g "g" :exit t)
     ,(limhydrab :body-m "m" :exit t)
     ,(limhydrab :body-q "q" :exit t)
     ,(limhydrab :body-r "r" :exit t))

    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-i
  (:title "Ice")
  `("Cream"
    (,(limhydrab :bol "a")
     ,(limhydrab :eol "e")
     ,(limhydrab :-< "b")
     ,(limhydrab :-> "f")
     ,(limhydrab :-v "n")
     ,(limhydrab :-^ "p")
     ,(limhydrab :ctb "l")
     ,(limhydrab :n-page "v")
     ,(limhydrab :b-sexp "[")
     ,(limhydrab :f-sexp "]"))

    "Gelato"
    (,(limhydrab :bob "A")
     ,(limhydrab :eob "E")
     ,(limhydrab :-<< "B")
     ,(limhydrab :-<< "u")
     ,(limhydrab :-<< "J")
     ,(limhydrab :->> "F")
     ,(limhydrab :->> "o")
     ,(limhydrab :->> "K")
     ,(limhydrab :-< "j")
     ,(limhydrab :-> "k")
     ,(limhydrab :-v "m")
     ,(limhydrab :-^ "i")
     ,(limhydrab :p-page "V"))

    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-m
  (:title "More" :quit-key ("ESC"))
  `("Moon"
    (,(limhydrabk :x-mark "x" :exit t)
     ,(limhydrabk :c-mark "z" :exit t)
     ,(limhydrabk :mark "SPC" :exit t))
    
    "To"
    (,(limhydrab :body-m-ai "a" :exit t)
     ,(limhydrab :body-m-buffer "b" :exit t)
     ,(limhydrab :body-m-consult "c" :exit t)
     ,(limhydrab :body-m-describe "d" :exit t)
     ,(limhydrab :body-m-embark "e" :exit t)
     ,(limhydrab :body-m-mc "m" :exit t))

    "To"
    (,(limhydrab :body-m-open "o" :exit t)
     ,(limhydrab :body-m-project "p" :exit t)
     ,(limhydrab :body-q "q" :exit t)
     ,(limhydrab :body-m-visual "v" :exit t)
     ,(limhydrab :body-m-window "w" :exit t))

    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-q
  (:title "Quick" :quit-key ("ESC"))
  `("C1"
    (,(limhydrab :bol "a")
     ,(limhydrab :eol "e")
     ,(limhydrab :bob "A")
     ,(limhydrab :eob "E")
     ,(limhydrab :-< "b")
     ,(limhydrab :-> "f")
     ,(limhydrab :-<< "B")
     ,(limhydrab :->> "F")
     ,(limhydrab :del-> "d")
     ,(limhydrab :e-del-< "DEL")
     ,(limhydrab :del->> "D")
     ,(limhydrab :del-<< "C-<backspace>")
     ,(limhydrab :capital "g")
     ,(limhydrab :downcase "i"))

    "C2"
    (,(limhydrab :upcase "I")
     ,(limhydrab :newline "j")
     ,(limhydrab :join-line "J")
     ,(limhydrab :kill-line "k")
     ,(limhydrab :ctb "l")
     ,(limhydrab :-v "n")
     ,(limhydrab :-^ "p")
     ,(limhydrab :kb-quit "q")
     ,(limhydrab :search "s")
     ,(limhydrab :v-undo "u"))

    "C3"
    (,(limhydrab :n-page "v")
     ,(limhydrab :p-page "V")
     ,(limhydrab :copy "w")
     ,(limhydrab :yank "y")
     ,(limhydrab :yank-pop "Y")
     ,(limhydrab :c-mark "z")
     ,(limhydrab :mark "SPC")
     ,(limhydrab :undo "/")
     ,(limhydrab :b-sexp "[")
     ,(limhydrab :f-sexp "]"))

    "To"
    (,(limhydrab :body-c "c" :exit t)
     ,(limhydrab :body-h "h" :exit t)
     ,(limhydrab :body-m "m" :exit t)
     ,(limhydrab :body-r "r" :exit t)
     ,(limhydrab :body-t "t" :exit t)
     ,(limhydrab :body-x "x" :exit t))
    
    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-r
  (:title "Recipe" :quit-key ("ESC" "g"))
  `("Radio"
    (,(limhydrab :bol "a")
     ,(limhydrab :eol "e")
     ,(limhydrab :bob "A")
     ,(limhydrab :eob "E")
     ,(limhydrab :-< "b")
     ,(limhydrab :-> "f")
     ,(limhydrab :-<< "B")
     ,(limhydrab :->> "F"))

    "Rain"
    (,(limhydrab :ctb "l")
     ,(limhydrabk :view-mode "r" :toggle 'buffer-read-only :exit t)
     ,(limhydrab :search "s" :exit t)
     ,(limhydrab :n-page "v")
     ,(limhydrab :p-page "V")
     ,(limhydrab :copy "w"))

    "Raise"
    (,(limhydrab :c-mark "z")
     ,(limhydrab :mark "SPC")
     ,(limhydrab :b-sexp "[")
     ,(limhydrab :f-sexp "]"))

    "To"
    (,(limhydrab :body-c "c" :exit t)
     ,(limhydrab :body-h "h" :exit t)
     ,(limhydrab :body-i "i" :exit t)
     ,(limhydrab :body-m "m" :exit t)
     ,(limhydrab :body-q "q" :exit t)
     ,(limhydrab :body-t "t" :exit t))

    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-s
  (:title "Satan")
  `("Satiny"
    (,(limhydrab :search "s" :exit t)
     ,(limhydrab :search-edit "e")
     ,(limhydrab :search-symbol "m" :exit t)
     ,(limhydrab :search-thing "t" :exit t)
     ,(limhydrab :lim-search-mode "N" :toggle t :exit t))

    "Symbol"
    (,(limhydrab :so-put "p" :exit t)
     ,(limhydrab :so-remove-all "r" :exit t))

    "To"
    (,(limhydrab :body-s-es "n" :exit t)
     ,(limhydrab :body-s-find "f" :exit t))

    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-t
  (:title "Toggle")
  `("M1"
    (,(limhydrab :view-mode "vv" :toggle t)
     ,(limhydrab :ws-mode "ws" :toggle t)
     ,(limhydrab :wsc-mode "wc" :toggle t)
     ,(limhydrab :rb-mode "rb" :toggle t)
     ,(limhydrab :fm-mode "fm" :toggle t))

    "M2"
    (,(limhydrab :repeat-mode "rp" :toggle t)
     ,(limhydrab :winner-mode "wi" :toggle t))

    "Less is More"
    (,(limhydrab :lim-search-mode "ls" :toggle t :exit t))

    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-x
  (:title "X")
  `("oXygen"
    (,(limhydrab :save "s" :exit t)
     ,(limhydrab :save-other "S" :exit t)
     ,(limhydrabk :cut "x" :exit t))

    "C/V"
    (,(limhydrab :copy "w")
     ,(limhydrab :yank "y")
     ,(limhydrab :yank-pop "Y"))

    "Moving"
    (,(limhydrab :-< "b")
     ,(limhydrab :-> "f")
     ,(limhydrab :-v "n")
     ,(limhydrab :-^ "p"))

    "eXpreg"
    (,(limhydrab :e-expand "e")
     ,(limhydrab :e-contract "c"))

    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-z
  (:title "Zeta")
  `("Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-m-window
  (:title "Window Management")
  `("Switch"
    (,(limhydrab :window-switch "TAB")
     ,(limhydrab :window-delete "d")
     ,(limhydrab :window-delete-other "D")
     ,(limhydrab :window-ace "o" :exit t)
     ,(limhydrab :window-ace-select "a"))

    "Swap"
    (,(limhydrab :window-ace-swap "S")
     ,(limhydrab :window-swap-left "J")
     ,(limhydrab :window-swap-right "K")
     
     ,(limhydrab :window-swap-up "I"))

    "Moving"
    (,(limhydrab :window-move-left "j")
     ,(limhydrab :window-move-right "k")
     ,(limhydrab :window-move-down "m")
     ,(limhydrab :window-move-up "i"))

    "Winner"
    (,(limhydrab :winner-redo "[")
     ,(limhydrab :winner-undo "]"))

    "POP"
    (,(limhydrab :pop-to-buffer "p" :exit t))

    "To"
    (,(limhydrab :body-m-window-resize "r" :exit t)
     ,(limhydrab :body-m-window-split "s" :exit t))

    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-m-window-resize
  (:title "Window Resize")
  `("Horizontally"
    (,(limhydrab :window-resize-sh "j")
     ,(limhydrab :window-resize-eh "k"))

    "Vertically"
    (,(limhydrab :window-resize-sv "m")
     ,(limhydrab :window-resize-ev "i"))

    "Balance"
    (,(limhydrab :window-resize-b "b"))

    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-m-window-split
  (:title "Window Split")
  `("Horizontally"
    (,(limhydrab :window-split-right "k")
     ,(limhydrab :window-split-right-root "K"))

    "Vertically"
    (,(limhydrab :window-split-below "m")
     ,(limhydrab :window-split-below-root "M"))

    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-m-ai
  (:title "AI Collection")
  `("GPT"
    (,(limhydrab :ai-gptel "c" :exit t)
     ,(limhydrab :ai-gptel-send "s" :exit t))
    
    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-m-consult
  (:title "Consult Tool")
  `("Sweet"
    (,(limhydrab :consult-x "x" :exit t)
     ,(limhydrab :consult-man "m" :exit t)
     ,(limhydrab :consult-search "s" :exit t)
     ,(limhydrab :consult-buffer "b" :exit t)
     ,(limhydrab :consult-project-buffer "B" :exit t)
     ,(limhydrab :consult-bookmark "k" :exit t)
     ,(limhydrab :consult-goto-line "t" :exit t)
     ,(limhydrab :consult-outline "o" :exit t)
     ,(limhydrab :consult-mark "a" :exit t))

    "Lookup"
    (,(limhydrab :consult-outline "o" :exit t)
     ,(limhydrab :consult-imenu "i" :exit t)
     ,(limhydrab :consult-find "f" :exit t)
     ,(limhydrab :consult-grep "g" :exit t)
     ,(limhydrab :consult-git-grep "G" :exit t)
     ,(limhydrab :consult-ripgrep "r" :exit t)
     ,(limhydrab :consult-line "l" :exit t)
     ,(limhydrab :consult-locate "L" :exit t))

    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-m-mc
  (:title "Multi Cursor")
  `("Mark"
    (,(limhydrab :mc-mark-inregion "mt")
     ,(limhydrab :mc-mark-dwim "mm")
     ,(limhydrab :mc-mark-infunc "md")
     ,(limhydrab :mc-mark-point "mg")
     ,(limhydrab :mc-mark-nl "mn")
     ,(limhydrab :mc-mark-pl "mp"))

    "Edit"
    (,(limhydrab :mc-edit-lines "ml" :exit t)
     ,(limhydrab :mc-edit-bol "ma" :exit t)
     ,(limhydrab :mc-edit-eol "me" :exit t)
     ,(limhydrab :mc-activate "mh" :exit t))

    "Moving"
    (,(limhydrab :bol "a")
     ,(limhydrab :eol "e")
     ,(limhydrab :-< "b")
     ,(limhydrab :-> "f")
     ,(limhydrab :-v "n")
     ,(limhydrab :-^ "p")
     ,(limhydrab :ctb "l")
     ,(limhydrab :n-page "v")
     ,(limhydrab :b-sexp "[")
     ,(limhydrab :f-sexp "]")
     ,(limhydrab :jump ";" :exit t))

    "S-Moving"
    (,(limhydrab :bob "A")
     ,(limhydrab :eob "E")
     ,(limhydrab :-<< "B")
     ,(limhydrab :->> "F")
     ,(limhydrab :p-page "V"))

    "To"
    (,(limhydrab :body-i "i" :exit t))

    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-m-describe
  (:title "Describe")
  `("Dance"
    (,(limhydrab :describe-face "a" :exit t)
     ,(limhydrab :describe-char "c" :exit t)
     ,(limhydrab :describe-function "f" :exit t)
     ,(limhydrab :describe-keymap "e" :exit t)
     ,(limhydrab :describe-key "k" :exit t)
     ,(limhydrab :describe-mode "m" :exit t)
     ,(limhydrab :describe-prefix-bindings "p" :exit t)
     ,(limhydrab :describe-variable "v" :exit t))

    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-m-visual
  (:title "Visual")
  `("To"
    (,(limhydrab :body-m-visual-vertico "v" :exit t))

    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-m-visual-vertico
  (:title "Vertico")
  `("Moving"
    (,(limhydrab :vertico-next "n")
     ,(limhydrab :vertico-prev "p"))

    "In"
    (,(limhydrab :vertico-enter "RET" :exit t))

    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-m-buffer
  (:title "Buffer")
  `("Scratch"
    (,(limhydrab :m-scratch "s" :exit t))

    "Switch"
    (,(limhydrab :consult-buffer "b" :exit t)
     ,(limhydrab :consult-project-buffer "B" :exit t))

    "Navigation"
    (,(limhydrab :prev-buffer "p")
     ,(limhydrab :next-buffer "n"))

    "Operate"
    (,(limhydrab :kill "k" :exit t)
     ,(limhydrab :kill-current "K" :exit t)
     ,(limhydrab :rename "r" :exit t))
    
    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-m-project
  (:title "Project")
  `("Management"
    (,(limhydrab :project-switch "p" :exit t)
     ,(limhydrab :project-switch-buffer "b" :exit t)
     ,(limhydrab :project-compile "c" :exit t)
     ,(limhydrab :project-forget "d" :exit t)
     ,(limhydrab :project-find "f" :exit t))

    "Dired"
    (,(limhydrab :dired-sidebar-toggle "e" :exit t)
     ,(limhydrab :dired-sidebar-show-selected-file "s" :exit t)
     ,(limhydrab :dired-sidebar-jump "g" :exit t))
    
    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-m-embark
  (:title "Embark")
  `("Management"
    (,(limhydrab :embark-act "a" :exit t)
     ,(limhydrab :embark-bindings "B" :exit t)
     ,(limhydrab :embark-collect "c" :exit t)
     ,(limhydrab :embark-export "e" :exit t)
     ,(limhydrab :embark-dwim ";" :exit t))
    
    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-m-open
  (:title "Open Any")
  `("File"
    (,(limhydrab :open-file "f" :exit t)
     ,(limhydrab :open-recent "r" :exit t))

    "Project"
    (,(limhydrab :project-switch "p" :exit t))
    
    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-s-es
  (:title "Enhance Search")
  `("Easy"
    (,(limhydrab :search-repeat-f "n")
     ,(limhydrab :search-repeat-b "p")
     ,(limhydrab :search-abort "g" :exit t)
     ,(limhydrab :search-exit "<escape>" :exit t))

    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-s-find
  (:title "Find" :body-pre (progn (isearch-forward nil t) (isearch-edit-string)))
  `("Fire"
    (,(limhydrab :search-repeat-f "n")
     ,(limhydrab :search-repeat-b "p")
     ,(limhydrab :search-edit "e")
     ,(limhydrab :search-abort "g" :exit t)
     ,(limhydrab :search-exit "<escape>" :exit t))

    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(lim-hydra-pretty-define lim-hydra-c-cap
  (:title "Completion at Point")
  `("Management"
    (,(limhydrab :cap "p" :exit t)
     ,(limhydrab :cap-tag "t" :exit t))
    
    "Help"
    (,(limhydrab :root "," :exit t)
     ,(limhydrab :go-back "." :exit t))
    ))

(provide 'lim-hydra)

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:
#+end_src

** lim-keymap.el 库

#+begin_src emacs-lisp :tangle feature/lim-keymap.el :mkdirp yes
;;; lim-keymap.el --- Lim's Keymap -*- lexical-binding: t; coding: utf-8; -*-

;; Copyright (C) 2024 Tabuyos

;; Author: Tabuyos <tabuyos@outlook.com>
;; Maintainer: Tabuyos <tabuyos@outlook.com>
;; Created: 2024/05/20

;;; Commentary:

;; Keymap for Lim

;;; Code:

(defun lim-keymap-get-keys (keymap)
  "Get keys of keymap."
  (let (keys)
    (map-keymap
     (lambda (key def)
       (cl-pushnew (key-description (vector key)) keys :test 'equal))
     (keymap-canonicalize keymap))
    keys))

(defun lim-keymap-get-bindings (keymap &optional prefix)
  "Get bindings of keymap."
  (let (bindings)
    (map-keymap
     (lambda (evt def)
       (let* ((key (vconcat prefix (list evt)))
              (key-desc (key-description key))
              (act-def (keymap-lookup keymap key-desc)))
         (cond (def
                (setf (alist-get key-desc bindings nil nil 'equal)
                      def))
               (t
                (when act-def
                  (setf (alist-get key-desc bindings nil nil 'equal)
                        act-def))))))
     (keymap-canonicalize keymap))
    bindings))

(provide 'lim-keymap)

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:
#+end_src

** lim-minibuffer.el 库

#+begin_src emacs-lisp :tangle feature/lim-minibuffer.el :mkdirp yes
;;; lim-minibuffer.el --- Enhanced Minibuffer -*- lexical-binding: t; coding: utf-8; -*-

;; Copyright (C) 2024 Tabuyos

;; Author: Tabuyos <tabuyos@outlook.com>
;; Maintainer: Tabuyos <tabuyos@outlook.com>
;; Created: 2024/05/20

;;; Commentary:

;; Enhanced Minibuffer

;;; Code:

(require 'lim-hydra)

;;;###autoload
(defun lim-minibuffer-mode-enable ()
  "Enable `lim-minibuffer-mode'"
  (interactive)
  (lim-minibuffer-mode 1))

;;;###autoload
(defun lim-minibuffer-mode-disable ()
  "Disable `lim-minibuffer-mode'"
  (interactive)
  (lim-minibuffer-mode -1))

;;;###autoload
(defun lim-minibuffer-keyboard-quit ()
  "Keyboard Quit."
  (interactive)
  (minibuffer-keyboard-quit)
  (lim-minibuffer-mode-disable))

;;;###autoload
(defun lim-minibuffer-enter ()
  (interactive)
  (lim-hydra-enter)
  (lim-minibuffer-mode-disable))

;;;###autoload
(defun lim-minibuffer-insert-comma ()
  (interactive)
  (lim-simple-insert-comma)
  (lim-minibuffer-mode-disable))

(defvar lim-minibuffer-mode-map
  (let ((keymap (make-sparse-keymap)))
    (keymap-set keymap "," 'lim-minibuffer-insert-comma)
    (keymap-set keymap "n" 'lim-hydra-next-line)
    (keymap-set keymap "p" 'lim-hydra-prev-line)
    (keymap-set keymap "g" 'lim-minibuffer-keyboard-quit)
    (keymap-set keymap "SPC" 'lim-minibuffer-mode-disable)
    keymap))

;;;###autoload
(define-minor-mode lim-minibuffer-mode
  "Enhanced Minibuffer Navigate."
  :init-value nil
  :global nil
  :lighter nil
  :keymap lim-minibuffer-mode-map)

(provide 'lim-minibuffer)

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:
#+end_src

** lim-dev.el 库

#+begin_src emacs-lisp :tangle feature/lim-dev.el :mkdirp yes
;;; lim-dev.el --- Lim's Dev Language -*- lexical-binding: t; coding: utf-8; -*-

;; Copyright (C) 2024 Tabuyos

;; Author: Tabuyos <tabuyos@outlook.com>
;; Maintainer: Tabuyos <tabuyos@outlook.com>
;; Created: 2024/05/20

;;; Commentary:

;; Dev Language for Lim

;;; Code:

(defvar lim-dev-go-tools-alist nil "Tools for Golang.")

(defun lim-dev-install-go-tools (&optional tools update)
  "Install or update go tools."
  (interactive
   (list lim-dev-go-tools-alist
         (< 1 (prefix-numeric-value current-prefix-arg))))
  (unless (executable-find "go")
    (user-error "Unable to find `go' in `exec-path'!"))

  (dolist (tool tools)
    (let ((pkg (symbol-name (car-safe tool)))
          (url (cdr-safe tool)))
      (when (or update (not (executable-find pkg)))
        (set-process-sentinel
         (start-process
          "go-tools" nil
          "go" "install" "-v" "-x" (concat url "@latest"))
         `(lambda (proc _)
            (let ((status (process-exit-status proc)))
              (if (= 0 status)
                  (message "Installed %s" ,pkg)
                (message "Failed to install %s: %d" ,pkg status)))
            ))))))

(provide 'lim-dev)

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:
#+end_src

** lim-flymake-golangci.el 库

#+begin_src emacs-lisp :tangle feature/lim-flymake-golangci.el :mkdirp yes
;;; lim-flymake-golangci.el --- Lim's flymake backend for golangci-lint -*- lexical-binding: t; coding: utf-8; -*-

;; Copyright (C) 2024 Tabuyos

;; Author: Tabuyos <tabuyos@outlook.com>
;; Maintainer: Tabuyos <tabuyos@outlook.com>
;; Created: 2024/05/20

;;; Commentary:

;; Golangci-Lint for Lim

;;; Code:

(require 'project)

(defvar flymake-golangci-executable "golangci-lint" "Path to golangci-lint executable.")

(defvar flymake-golangci-args nil "Flags sent to golangci")

(defvar-local flymake-golangci--proc nil)

(defun flymake-golangci--match-regex (filename)
  (format "\\(%s\\):\\([0-9]+\\):\\([0-9]+\\): \\(.*\\) \\(([A-Z0-9]+)\\)"
          filename))

(defun flymake-golangci (report-fn &rest _args)
  "Flymake backend function for golangci-lint, a linter for Go. "
  (unless (executable-find flymake-golangci-executable)
    (error "Cannot find golangci-lint, is it installed?"))
  (when (process-live-p flymake-golangci--proc)
    (kill-process flymake-golangci--proc))
  (let* ((source (current-buffer))
         (match-regexp (flymake-golangci--match-regex
                        (file-name-nondirectory (buffer-file-name source)))))
    (save-restriction
      (widen)
      ;; Reset the `flymake-golangci--proc' process to a new process
      (setq
       flymake-golangci--proc
       (make-process
        :name "flymake-golangci" :noquery t :connection-type 'pipe
        :buffer (generate-new-buffer " *flymake-golangci*")
        ;; Run golangci, no need to pass config file as golangci looks for it
        :command `(,flymake-golangci-executable "run" ,(file-name-directory
                                                        (buffer-file-name source)))
        :sentinel
        (lambda (proc _event)
          ;; Check that the process has indeed exited, as it might be simply suspended.
          (when (memq (process-status proc) '(exit signal))
            (unwind-protect
                ;; Only proceed if `proc' is the same as `flymake-golangci--proc',
                ;; which indicates that `proc' is not an obsolete process.
                (if (with-current-buffer source (eq proc flymake-golangci--proc))
                    (with-current-buffer (process-buffer proc)
                      (goto-char (point-min))
                      ;; Parse the buffer, collect them and call `report-fn'.
                      (cl-loop
                       while (search-forward-regexp
                              match-regexp
                              nil t)
                       for msg = (format "golangci-lint %s: %s"
                                         (match-string 5)
                                         (match-string 4))
                       for (beg . end) = (flymake-diag-region
                                          source
                                          (string-to-number (match-string 2))
                                          (string-to-number (match-string 3)))
                       when (and beg end)
                       collect (flymake-make-diagnostic source
                                                        beg
                                                        end
                                                        :error
                                                        msg)
                       into diags
                       finally (funcall report-fn diags)))
                  (flymake-log :warning "Canceling obsolete check %s"
                               proc))
              ;; Cleanup the temporary buffer used to hold the check's output.
              (kill-buffer (process-buffer proc)))))))
      ;; Send the buffer contents to the process's stdin, followed by EOF.
      (process-send-region flymake-golangci--proc (point-min) (point-max))
      (process-send-eof flymake-golangci--proc))))

;;;###autoload
(defun flymake-golangci-load-backend ()
  "Loads golangci into `flymake-diagnostic-functions'."
  (add-hook 'flymake-diagnostic-functions 'flymake-golangci nil t))

;;;###autoload
(defun flymake-golangci-lint-project ()
  "Lint entire project with `golangci-lint'."
  (interactive)
  (let ((current-directory (project-current)))
    (call-process flymake-golangci-executable
                  nil
                  (get-buffer-create "*golangci-lint run*")
                  nil
                  "run")))

;;;###autoload
(defun flymake-golangci-clear-cache ()
  "Clear `golangci-lint' cache."
  (interactive)
  (unless (executable-find flymake-golangci-executable)
    (error "Cannot find golangci-lint, is it installed?"))
  (call-process flymake-golangci-executable nil nil nil "cache" "clean"))

(provide 'lim-flymake-golangci)

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:
#+end_src

** lim-project.el 库

#+begin_src emacs-lisp :tangle feature/lim-project.el :mkdirp yes
;;; lim-project.el --- Lim's Project -*- lexical-binding: t; coding: utf-8; -*-

;; Copyright (C) 2024 Tabuyos

;; Author: Tabuyos <tabuyos@outlook.com>
;; Maintainer: Tabuyos <tabuyos@outlook.com>
;; Created: 2024/05/20

;;; Commentary:

;; Project for Lim

;;; Code:

(require 'project)

(defvar lim-project-identifier ".cpr"
  "Project recognize identifiers.

CPR: Customize Project Root")

(defun lim-project-try-cpr (dir)
  "Determine if DIR is a non-VC project.
DIR must include a .cpr file to be considered a project."
  (if-let ((root (locate-dominating-file dir lim-project-identifier)))
      (cons 'cpr root)))

(cl-defmethod project-root ((project (head cpr)))
  "Return root directory of current PROJECT."
  (cdr project))

(defun lim-project-create ()
  "Create new project."
  (interactive))

(defun lim-project-switch ()
  "Switch other project."
  (interactive))

(defun lim-project-remove ()
  "Remove special project."
  (interactive))

(defun lim-project-open ()
  "Open CPR project."
  (interactive))

;;;###autoload
(defun lim-project-root ()
  "Return current project root directory."
  (project-root (project-current t)))

;;;###autoload
(defun lim-project-mark (dir)
  "Mark the project.

Will generate .cpr directory."
  (interactive
   (list (read-directory-name
          "Select Directory." nil (or (project-root (project-current t)) default-directory)
          (lambda (file)
            (or (file-directory-p file)
                (insert-directory-wildcard-in-dir-p
                 (file-name-as-directory (expand-file-name file))))))))
  (let* ((do (y-or-n-p (concat "Mark: " dir)))
         (exsit (file-exists-p (expand-file-name lim-project-identifier dir))))
    (if (and do (not exsit))
        (mkdir (expand-file-name ".cpr" dir)))))

;;;###autoload
(define-minor-mode lim-project-mode
  "Toggle lim-project-mode."
  :init-value nil
  :global nil
  :lighter nil
  (if lim-project-mode
      (progn
        (add-hook 'project-find-functions 'lim-project-try-cpr))
    (remove-hook 'project-find-functions 'lim-project-try-cpr)))

;;;###autoload
(define-globalized-minor-mode global-lim-project-mode lim-project-mode
  (lambda ()
    (unless (minibufferp)
      (lim-project-mode 1))))

(provide 'lim-project)

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:
#+end_src

** lim-treesit.el 库

#+begin_src emacs-lisp :tangle feature/lim-treesit.el :mkdirp yes
;;; lim-treesit.el --- Enhanced treesit -*- lexical-binding: t; coding: utf-8; -*-

;; Copyright (C) 2024 Tabuyos

;; Author: Tabuyos <tabuyos@outlook.com>
;; Maintainer: Tabuyos <tabuyos@outlook.com>
;; Created: 2024/05/20

;;; Commentary:

;; Enhanced treesit.

;;; Code:

(require 'treesit)

(defvar lim-treesit-recipe-alist nil "Tree sitter language source list")

;;;###autoload
(defun lim-treesit-registry-recipe (lang &rest keys)
    "Registry recipe to `lim-treesit-recipe-alist'.

support keywords:

`:ts-mode' `:remap' `:url' `:revision'
`:source-dir' `:cc' `:c++' `:ext'."
  (unless (null keys)
    (when (plistp keys)
      (unless (alist-get lang lim-treesit-recipe-alist)
        (push (cons lang keys) lim-treesit-recipe-alist)))))

;;;###autoload
(defun lim-treesit-modify-recipe (lang &rest keys)
  "Modify `lang' if existed in `lim-treesit-recipe-alist'."
  (unless (null keys)
    (when (plistp keys)
      (when-let (recipe (alist-get lang lim-treesit-recipe-alist))
        (while keys
          (plist-put recipe (pop keys) (pop keys)))
        (setf (alist-get lang lim-treesit-recipe-alist) recipe)))))

(defun lim-treesit--enable (lang)
  "Enable treesit support for `lang'."
  (when-let (recipe (alist-get lang lim-treesit-recipe-alist))
    (let ((ts-mode (plist-get recipe :ts-mode))
          (remap (plist-get recipe :remap))
          (url (plist-get recipe :url))
          (revision (plist-get recipe :revision))
          (source-dir (plist-get recipe :source-dir))
          (cc (plist-get recipe :cc))
          (c++ (plist-get recipe :c++))
          (ext (plist-get recipe :ext)))

      (unless (assoc lang treesit-language-source-alist)
        (push
         (cons lang (list url revision source-dir cc c++))
         treesit-language-source-alist))

      (when (and ts-mode remap)
        (if (listp remap)
            (dolist (r remap)
              (setf (alist-get r major-mode-remap-alist) ts-mode))
          (setf (alist-get remap major-mode-remap-alist) ts-mode)))

      (when (and ts-mode ext)
        (unless (assoc ext auto-mode-alist)
          (push (cons ext ts-mode) auto-mode-alist))))))

;;;###autoload
(defun lim-treesit-enable (&rest langs)
  "Enable treesit support for `langs'."
  (dolist (lang langs)
    (lim-treesit--enable lang)))

(lim-treesit-registry-recipe
  'awk
  :ts-mode 'awk-ts-mode
  :remap 'awk-mode
  :url "https://github.com/Beaglefoot/tree-sitter-awk"
  :ext "\\.awk\\'")

(lim-treesit-registry-recipe
  'bash
  :ts-mode 'bash-ts-mode
  :remap 'sh-mode
  :url "https://github.com/tree-sitter/tree-sitter-bash"
  :ext "\\.sh\\'")

(lim-treesit-registry-recipe
  'bibtex
  :ts-mode 'bibtex-ts-mode
  :remap 'bibtex-mode
  :url "https://github.com/latex-lsp/tree-sitter-bibtex"
  :ext "\\.bib\\'")

(lim-treesit-registry-recipe
  'blueprint
  :ts-mode 'blueprint-ts-mode
  :remap 'blueprint-mode
  :url "https://github.com/huanie/tree-sitter-blueprint"
  :ext "\\.blp\\'")

(lim-treesit-registry-recipe
  'c
  :ts-mode 'c-ts-mode
  :remap 'c-mode
  :url "https://github.com/tree-sitter/tree-sitter-c"
  :ext "\\.c\\'")

(lim-treesit-registry-recipe
  'c-sharp
  :ts-mode 'csharp-ts-mode
  :remap 'csharp-mode
  :url "https://github.com/tree-sitter/tree-sitter-c-sharp"
  :ext "\\.cs\\'")

(lim-treesit-registry-recipe
  'clojure
  :ts-mode 'clojure-ts-mode
  :remap '(clojure-mode clojurescript-mode clojurec-mode)
  :url "https://github.com/sogaiu/tree-sitter-clojure"
  :ext "\\.cljc?s?d?\\'")

(lim-treesit-registry-recipe
  'cmake
  :ts-mode 'cmake-ts-mode
  :remap 'cmake-mode
  :url "https://github.com/uyha/tree-sitter-cmake"
  :ext "\\.cmake\\'")

(lim-treesit-registry-recipe
  'commonlisp
  :ts-mode 'commonlisp-ts-mode
  :remap 'common-lisp-mode
  :url "https://github.com/tree-sitter-grammars/tree-sitter-commonlisp"
  :ext "\\.cl\\'")

(lim-treesit-registry-recipe
  'cpp
  :ts-mode 'c++-ts-mode
  :remap 'c++-mode
  :url "https://github.com/tree-sitter/tree-sitter-cpp"
  :ext "\\.cpp\\'")

(lim-treesit-registry-recipe
  'css
  :ts-mode 'css-ts-mode
  :remap 'css-mode
  :url "https://github.com/tree-sitter/tree-sitter-css"
  :ext "\\.css\\'")

(lim-treesit-registry-recipe
  'dart
  :ts-mode 'dart-ts-mode
  :remap 'dart-mode
  :url "https://github.com/ast-grep/tree-sitter-dart"
  :ext "\\.dart\\'")

(lim-treesit-registry-recipe
  'dockerfile
  :ts-mode 'dockerfile-ts-mode
  :remap 'dockerfile-mode
  :url "https://github.com/camdencheek/tree-sitter-dockerfile"
  :ext "[/\\]\\(?:Containerfile\\|Dockerfile\\)\\(?:\\.[^/\\]*\\)?\\'")

(lim-treesit-registry-recipe
  'elixir
  :ts-mode 'elixir-ts-mode
  :remap 'elixir-mode
  :url "https://github.com/elixir-lang/tree-sitter-elixir"
  :ext "\\.ex\\'")

(lim-treesit-registry-recipe
  'elisp
  :url "https://github.com/Wilfred/tree-sitter-elisp")

(lim-treesit-registry-recipe
  'glsl
  :ts-mode 'glsl-ts-mode
  :remap 'glsl-mode
  :url "https://github.com/tree-sitter-grammars/tree-sitter-glsl")

(lim-treesit-registry-recipe
  'go
  :ts-mode 'go-ts-mode
  :remap 'go-mode
  :url "https://github.com/tree-sitter/tree-sitter-go"
  :ext "\\.go\\'")

(lim-treesit-registry-recipe
  'gomod
  :ts-mode 'go-mod-ts-mode
  :remap 'go-mod-mode
  :url "https://github.com/camdencheek/tree-sitter-go-mod"
  :ext "go\\.mod\\'")

(lim-treesit-registry-recipe
  'heex
  :ts-mode 'heex-ts-mode
  :remap 'heex-mode
  :url "https://github.com/phoenixframework/tree-sitter-heex"
  :ext "\\.heex\\'")

(lim-treesit-registry-recipe
  'html
  :ts-mode 'html-ts-mode
  :remap '(mhtml-mode sgml-mode)
  :url "https://github.com/tree-sitter/tree-sitter-html"
  :ext "\\.html\\'")

(lim-treesit-registry-recipe
  'janet
  :ts-mode 'janet-ts-mode
  :remap 'janet-mode
  :url "https://github.com/sogaiu/tree-sitter-janet-simple"
  :ext "\\.janet\\'")

(lim-treesit-registry-recipe
  'java
  :ts-mode 'java-ts-mode
  :remap 'java-mode
  :url "https://github.com/tree-sitter/tree-sitter-java"
  :ext "\\.java\\'")

(lim-treesit-registry-recipe
  'javascript
  :ts-mode 'js-ts-mode
  :remap '(js-mode javascript-mode js2-mode)
  :url "https://github.com/tree-sitter/tree-sitter-javascript"
  :revision "master"
  :source-dir "src"
  :ext "\\.js\\'")

(lim-treesit-registry-recipe
  'json
  :ts-mode 'json-ts-mode
  :remap '(js-json-mode json-mode jsonc-mode)
  :url "https://github.com/tree-sitter/tree-sitter-json"
  :ext "\\.json\\'")

(lim-treesit-registry-recipe
  'julia
  :ts-mode 'julia-ts-mode
  :remap 'julia-mode
  :url "https://github.com/tree-sitter/tree-sitter-julia"
  :ext "\\.jl\\'")

(lim-treesit-registry-recipe
  'kotlin
  :ts-mode 'kotlin-ts-mode
  :remap 'kotlin-mode
  :url "https://github.com/fwcd/tree-sitter-kotlin"
  :ext "\\.kts?\\'")

(lim-treesit-registry-recipe
  'latex
  :ts-mode 'latex-ts-mode
  :remap 'latex-mode
  :url "https://github.com/latex-lsp/tree-sitter-latex"
  :ext "\\.tex\\'")

(lim-treesit-registry-recipe
  'lua
  :ts-mode 'lua-ts-mode
  :remap 'lua-mode
  :url "https://github.com/tree-sitter-grammars/tree-sitter-lua"
  :ext "\\.lua\\'")

(lim-treesit-registry-recipe
  'magik
  :ts-mode 'magik-ts-mode
  :remap 'magik-mode
  :url "https://github.com/krn-robin/tree-sitter-magik"
  :ext "\\.magik\\'")

(lim-treesit-registry-recipe
  'make
  ;; :ts-mode 'makefile-ts-mode
  ;; :remap 'makefile-mode
  :url "https://github.com/tree-sitter-grammars/tree-sitter-make"
  :ext "\\([Mm]akefile\\|.*\\.\\(mk\\|make\\)\\)\\'")

(lim-treesit-registry-recipe
  'markdown
  :ts-mode 'markdown-ts-mode
  :remap '(poly-markdown-mode markdown-mode)
  :url "https://github.com/tree-sitter-grammars/tree-sitter-markdown"
  :revision "split_parser"
  :source-dir "tree-sitter-markdown/src"
  :ext "\\.md\\'")

(lim-treesit-registry-recipe
  'markdown-inline
  :ts-mode 'markdown-ts-mode
  :remap '(poly-markdown-mode markdown-mode)
  :url "https://github.com/tree-sitter-grammars/tree-sitter-markdown"
  :revision "split_parser"
  :source-dir "tree-sitter-markdown-inline/src"
  :ext "\\.md\\'")

(lim-treesit-registry-recipe
  'nix
  :ts-mode 'nix-ts-mode
  :remap 'nix-mode
  :url "https://github.com/nix-community/tree-sitter-nix"
  :ext "\\.nix\\'")

(lim-treesit-registry-recipe
  'nu
  :ts-mode 'nushell-ts-mode
  :remap 'nushell-mode
  :url "https://github.com/nushell/tree-sitter-nu"
  :ext "\\.nu\\'")

(lim-treesit-registry-recipe
  'ocaml
  :ts-mode 'ocaml-ts-mode
  :remap 'tuareg-mode
  :url "https://github.com/tree-sitter/tree-sitter-ocaml"
  :source-dir "grammars/ocaml/src"
  :ext "\\.ml[i]?\\'")

(lim-treesit-registry-recipe
  'org
  :ts-mode 'org-ts-mode
  :remap 'org-mode
  :url "https://github.com/milisims/tree-sitter-org"
  :ext "\\.org\\'")

(lim-treesit-registry-recipe
  'perl
  :ts-mode 'perl-ts-mode
  :remap 'perl-mode
  :url "https://github.com/ganezdragon/tree-sitter-perl"
  :ext "\\.pl\\'")

(lim-treesit-registry-recipe
  'php
  :ts-mode 'php-ts-mode
  :remap 'php-mode
  :url "https://github.com/tree-sitter/tree-sitter-php"
  :revision "master"
  :source-dir "php/src"
  :ext "\\.php[s345]?\\'")

(lim-treesit-registry-recipe
  'proto
  :ts-mode 'protobuf-ts-mode
  :remap 'protobuf-mode
  :url "https://github.com/mitchellh/tree-sitter-proto"
  :ext "\\.proto\\'")

(lim-treesit-registry-recipe
  'python
  :ts-mode 'python-ts-mode
  :remap 'python-mode
  :url "https://github.com/tree-sitter/tree-sitter-python"
  :ext "\\.py[iw]?\\'")

(lim-treesit-registry-recipe
  'r
  :ts-mode 'r-ts-mode
  :remap 'ess-mode
  :url "https://github.com/r-lib/tree-sitter-r"
  :ext "\\.r\\'")

(lim-treesit-registry-recipe
  'ruby
  :ts-mode 'ruby-ts-mode
  :remap 'ruby-mode
  :url "https://github.com/tree-sitter/tree-sitter-ruby"
  :ext "\\(?:\\.\\(?:rbw?\\|ru\\|rake\\|thor\\|jbuilder\\|rabl\\|gemspec\\|podspec\\)\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Puppet\\|Berks\\|Brew\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'")

(lim-treesit-registry-recipe
  'rust
  :ts-mode 'rust-ts-mode
  :remap '(rustic-mode rust-mode)
  :url "https://github.com/tree-sitter/tree-sitter-rust"
  :ext "\\.rs\\'")

(lim-treesit-registry-recipe
  'scala
  :ts-mode 'scala-ts-mode
  :remap 'scala-mode
  :url "https://github.com/tree-sitter/tree-sitter-scala"
  :ext "\\.\\(scala\\|sbt\\)\\'")

(lim-treesit-registry-recipe
  'sql
  ;; :ts-mode 'sql-ts-mode
  ;; :remap 'sql-mode
  :revision "gh-pages"
  :url "https://github.com/DerekStride/tree-sitter-sql"
  :ext "\\.sql\\'")

(lim-treesit-registry-recipe
  'surface
  :ts-mode 'surface-ts-mode
  :remap 'surface-mode
  :url "https://github.com/connorlay/tree-sitter-surface")

(lim-treesit-registry-recipe
  'toml
  :ts-mode 'toml-ts-mode
  :remap '(conf-toml-mode toml-mode)
  :url "https://github.com/tree-sitter/tree-sitter-toml"
  :ext "\\.toml\\'")

(lim-treesit-registry-recipe
  'tsx
  :ts-mode 'tsx-ts-mode
  :remap 'tsx-mode
  :url "https://github.com/tree-sitter/tree-sitter-typescript"
  :revision "master"
  :source-dir "tsx/src"
  :ext "\\.tsx\\'")

(lim-treesit-registry-recipe
  'typescript
  :ts-mode 'typescript-ts-mode
  :remap 'typescript-mode
  :url "https://github.com/tree-sitter/tree-sitter-typescript"
  :revision "master"
  :source-dir "typescript/src"
  :ext "\\.ts\\'")

(lim-treesit-registry-recipe
  'typst
  :ts-mode 'typst-ts-mode
  :remap 'typst-mode
  :url "https://github.com/uben0/tree-sitter-typst"
  :revision "master"
  :source-dir "src"
  :ext "\\.typ\\'")

(lim-treesit-registry-recipe
  'verilog
  :ts-mode 'verilog-ts-mode
  :remap 'verilog-mode
  :url "https://github.com/gmlarumbe/tree-sitter-verilog"
  :ext "\\.s?vh?\\'")

(lim-treesit-registry-recipe
  'vhdl
  :ts-mode 'vhdl-ts-mode
  :remap 'vhdl-mode
  :url "https://github.com/alemuller/tree-sitter-vhdl"
  :ext "\\.vhdl?\\'")

(lim-treesit-registry-recipe
  'vue
  :ts-mode 'vue-ts-mode
  :remap 'vue-mode
  :url "https://github.com/tree-sitter-grammars/tree-sitter-vue"
  :ext "\\.vue\\'")

(lim-treesit-registry-recipe
  'wast
  :ts-mode 'wat-ts-wast-mode
  :remap 'wat-mode
  :url "https://github.com/wasm-lsp/tree-sitter-wasm"
  :source-dir "wast/src"
  :ext "\\.wast\\'")

(lim-treesit-registry-recipe
  'wat
  :ts-mode 'wat-ts-mode
  :remap 'wat-mode
  :url "https://github.com/wasm-lsp/tree-sitter-wasm"
  :source-dir "wat/src"
  :ext "\\.wat\\'")

(lim-treesit-registry-recipe
  'wgsl
  :ts-mode 'wgsl-ts-mode
  :remap 'wgsl-mode
  :url "https://github.com/mehmetoguzderin/tree-sitter-wgsl"
  :ext "\\.wgsl\\'")

(lim-treesit-registry-recipe
  'yaml
  :ts-mode 'yaml-ts-mode
  :remap 'yaml-mode
  :url "https://github.com/tree-sitter-grammars/tree-sitter-yaml"
  :ext "\\.ya?ml\\'")

(provide 'lim-treesit)

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:
#+end_src

** lim-lsp.el 库

#+begin_src emacs-lisp :tangle feature/lim-lsp.el :mkdirp yes
;;; lim-lsp.el --- Enhanced lsp -*- lexical-binding: t; coding: utf-8; -*-

;; Copyright (C) 2024 Tabuyos

;; Author: Tabuyos <tabuyos@outlook.com>
;; Maintainer: Tabuyos <tabuyos@outlook.com>
;; Created: 2024/05/20

;;; Commentary:

;; Enhanced lsp.

;;; Code:

(require 'f)
(require 's)
(require 'jsonrpc)
(require 'lim-helper)
(require 'lim-project)

(require 'eglot)
(require 'lsp-mode)
(require 'lsp-bridge)

;;;###autoload
(defun lim-lsp-load-lsp-options (&optional lsp-server user-fn)
  "Load LSP's options in initilize."
  (let* ((name (or lsp-server (lim-helper-mode-id)))
         (filename (format "%s.json" name))
         (local-dir (lim-project-root))
         (default-dir user-emacs-directory)
         (local-file (f-join local-dir lim-project-identifier "lspserver" filename))
         (default-file (f-join default-dir "lspserver" filename)))
    (lim-helper-plist-merge
     (lim-helper-load-options local-file)
     (lim-helper-load-options default-file)
     (and user-fn (funcall user-fn)))))



;;; Java Enhanced

(defvar lim-lsp-java-jdt-uri-handling-patch-applied nil "Whether or not JDT uri handling is already patched.")

(defun lim-lsp-java-jdt-uri-handler (_op &rest args)
  "Support Eclipse jdtls `jdt://' uri scheme."
  (let* ((uri (car args))
         (cache-dir (f-join (lim-project-root) ".cache" "jdtls"))
         (source-file
          (expand-file-name
           (f-join
            cache-dir
            (save-match-data
              (when (string-match "jdt://contents/\\(.*?\\)/\\(.*\\)\.class\\?" uri)
                (format "%s.java" (replace-regexp-in-string "/" "." (match-string 2 uri) t t))))))))
    (unless (file-readable-p source-file)
      (let ((content (jsonrpc-request (eglot-current-server) :java/classFileContents (list :uri uri)))
            (metadata-file (format "%s.%s.metadata"
                                   (file-name-directory source-file)
                                   (file-name-base source-file))))
        (unless (file-directory-p cache-dir) (make-directory cache-dir t))
        (with-temp-file source-file (insert content))
        (with-temp-file metadata-file (insert uri))))
    source-file))

(defun lim-lsp-java-wrap-legacy-eglot--path-to-uri (original-fn &rest args)
  "Hack until eglot is updated.
ARGS is a list with one element, a file path or potentially a URI.
If path is a jar URI, don't parse. If it is not a jar call ORIGINAL-FN."
  (let ((path (file-truename (car args))))
    (if (equal "jdt" (url-type (url-generic-parse-url path)))
        path
      (apply original-fn args))))

(defun lim-lsp-java-wrap-legacy-eglot--uri-to-path (original-fn &rest args)
  "Hack until eglot is updated.
ARGS is a list with one element, a URI.
If URI is a jar URI, don't parse and let the `lim-lsp-java-jdt-uri-handler'
handle it. If it is not a jar call ORIGINAL-FN."
  (let ((uri (car args)))
    (if (and (stringp uri)
             (string= "jdt" (url-type (url-generic-parse-url uri))))
        uri
      (apply original-fn args))))

(defun lim-lsp-java-jdthandler-patch-eglot ()
  "Patch old versions of Eglot to work with Jdthandler."
  (interactive)
  ;; TODO Remove when eglot is updated in melpa
  ;; See also https://debbugs.gnu.org/cgi/bugreport.cgi?bug=58790
  ;; See also https://git.savannah.gnu.org/gitweb/?p=emacs.git;a=blob;f=lisp/progmodes/eglot.el#l1558
  (unless (or (and (advice-member-p #'lim-lsp-java-wrap-legacy-eglot--path-to-uri 'eglot--path-to-uri)
                   (advice-member-p #'lim-lsp-java-wrap-legacy-eglot--uri-to-path 'eglot--uri-to-path))
              (<= 29 emacs-major-version))
    (advice-add 'eglot--path-to-uri :around #'lim-lsp-java-wrap-legacy-eglot--path-to-uri)
    (advice-add 'eglot--uri-to-path :around #'lim-lsp-java-wrap-legacy-eglot--uri-to-path)
    (message "[lim-lsp-java-jdthandler-patch-eglot] Eglot successfully patched.")))

;;;###autoload
(defun lim-lsp-java-initialize ()
  "Initialized Java customize config."
  (unless lim-lsp-java-jdt-uri-handling-patch-applied
    (add-to-list 'file-name-handler-alist '("\\`jdt://" . lim-lsp-java-jdt-uri-handler))
    (lim-lsp-java-jdthandler-patch-eglot)
    (setq lim-lsp-java-jdt-uri-handling-patch-applied t)
    ))



(defun lim-lsp-organize-imports-for-eglot ()
  "Call `eglot-code-action-organize-imports' by interactively."
  (call-interactively 'eglot-code-action-organize-imports))

(defun lim-lsp-install-save-hooks-for-eglot ()
  "Install save hooks for lsp."
  (add-hook 'before-save-hook #'eglot-format-buffer t t)
  ;; (add-hook 'before-save-hook #'lim-lsp-organize-imports-for-eglot t t)
  )

(defun lim-lsp-ensure-for-eglot ()
  "Start eglot."
  (eglot-ensure)
  (lim-lsp-install-save-hooks-for-eglot))



(defun lim-lsp-install-save-hooks-for-lsp-mode ()
  "Install save hooks for lsp."
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))

(defun lim-lsp-ensure-for-lsp-mode ()
  "Start lsp-mode."
  (lsp-mode 1)
  (lim-lsp-install-save-hooks-for-lsp-mode))



(defun lim-lsp-code-format-for-lsp-bridge ()
  "Call `lsp-bridge-code-format by interactively."
  (call-interactively 'lsp-bridge-code-format))

(defun lim-lsp-install-save-hooks-for-lsp-bridge ()
  "Install save hooks for lsp."
  (add-hook 'before-save-hook #'lim-lsp-code-format-for-lsp-bridge t t))

(defun lim-lsp-ensure-for-lsp-bridge ()
  "Start lsp-bridge."
  (lsp-bridge-mode 1)
  (lim-lsp-install-save-hooks-for-lsp-bridge))

(provide 'lim-lsp)

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:
#+end_src

* 总结

撒花~~~
